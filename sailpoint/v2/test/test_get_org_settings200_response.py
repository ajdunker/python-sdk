# coding: utf-8

"""
    SailPoint SaaS API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import unittest
import datetime

from sailpoint.v2.models.get_org_settings200_response import GetOrgSettings200Response


class TestGetOrgSettings200Response(unittest.TestCase):
    """GetOrgSettings200Response unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GetOrgSettings200Response:
        """Test GetOrgSettings200Response
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GetOrgSettings200Response`
        """
        model = GetOrgSettings200Response()
        if include_optional:
            return GetOrgSettings200Response(
                id = '',
                name = '',
                description = '',
                date_created = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                last_updated = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                script_name = '',
                sso_domain = '',
                status = 'inactive',
                max_registered_identities = 56,
                identity_count = 56,
                kba_req_for_authn = 56,
                kba_req_answers = 56,
                lockout_attempt_threshold = 56,
                lockout_time_minutes = 56,
                usage_cert_required = True,
                admin_strong_auth_required = True,
                enable_external_password_change = True,
                enable_password_replay = True,
                enable_automatic_password_replay = True,
                netmasks = [
                    ''
                    ],
                country_codes = [
                    ''
                    ],
                white_list = True,
                email_test_mode = True,
                email_test_address = '',
                username_empty_text = '',
                username_label = '',
                enable_automation_generation = True,
                password_replay_state = 'enabled',
                system_notification_config = sailpoint.v2.models.get_org_settings_200_response_system_notification_config.getOrgSettings_200_response_systemNotificationConfig(
                    notifications = [
                        sailpoint.v2.models.get_org_settings_200_response_system_notification_config_notifications_inner.getOrgSettings_200_response_systemNotificationConfig_notifications_inner(
                            type = '', 
                            by_email = True, 
                            thresholds = sailpoint.v2.models.get_org_settings_200_response_system_notification_config_notifications_inner_thresholds.getOrgSettings_200_response_systemNotificationConfig_notifications_inner_thresholds(
                                healthy = '', 
                                unhealthy = '', ), )
                        ], 
                    recipient_type = 'allAdmins', ),
                system_notification_emails = [
                    ''
                    ],
                login_url = '',
                redirect_patterns = [
                    ''
                    ],
                style_hash = '',
                approval_config = sailpoint.v2.models.get_org_settings_200_response_approval_config.getOrgSettings_200_response_approvalConfig(
                    days_till_escalation = 56, 
                    days_between_reminders = 56, 
                    max_reminders = 56, 
                    fallback_approver = '', ),
                sso_partner_source = ''
            )
        else:
            return GetOrgSettings200Response(
        )
        """

    def testGetOrgSettings200Response(self):
        """Test GetOrgSettings200Response"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == '__main__':
    unittest.main()
