# coding: utf-8

"""
    SailPoint SaaS API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr, conlist, validator
from v2.models.get_org_settings200_response_approval_config import GetOrgSettings200ResponseApprovalConfig
from v2.models.get_org_settings200_response_system_notification_config import GetOrgSettings200ResponseSystemNotificationConfig

class GetOrgSettings200Response(BaseModel):
    """
    GetOrgSettings200Response
    """
    id: Optional[StrictStr] = None
    name: Optional[StrictStr] = None
    description: Optional[StrictStr] = None
    date_created: Optional[datetime] = Field(None, alias="dateCreated")
    last_updated: Optional[datetime] = Field(None, alias="lastUpdated")
    script_name: Optional[StrictStr] = Field(None, alias="scriptName")
    sso_domain: Optional[StrictStr] = Field(None, alias="ssoDomain")
    status: Optional[StrictStr] = None
    max_registered_identities: Optional[StrictInt] = Field(None, alias="maxRegisteredIdentities")
    identity_count: Optional[StrictInt] = Field(None, alias="identityCount")
    kba_req_for_authn: Optional[StrictInt] = Field(None, alias="kbaReqForAuthn")
    kba_req_answers: Optional[StrictInt] = Field(None, alias="kbaReqAnswers")
    lockout_attempt_threshold: Optional[StrictInt] = Field(None, alias="lockoutAttemptThreshold")
    lockout_time_minutes: Optional[StrictInt] = Field(None, alias="lockoutTimeMinutes")
    usage_cert_required: Optional[StrictBool] = Field(None, alias="usageCertRequired")
    admin_strong_auth_required: Optional[StrictBool] = Field(None, alias="adminStrongAuthRequired")
    enable_external_password_change: Optional[StrictBool] = Field(None, alias="enableExternalPasswordChange")
    enable_password_replay: Optional[StrictBool] = Field(None, alias="enablePasswordReplay")
    enable_automatic_password_replay: Optional[StrictBool] = Field(None, alias="enableAutomaticPasswordReplay")
    netmasks: Optional[conlist(StrictStr)] = None
    country_codes: Optional[conlist(StrictStr)] = Field(None, alias="countryCodes")
    white_list: Optional[StrictBool] = Field(None, alias="whiteList")
    email_test_mode: Optional[StrictBool] = Field(None, alias="emailTestMode")
    email_test_address: Optional[StrictStr] = Field(None, alias="emailTestAddress")
    username_empty_text: Optional[StrictStr] = Field(None, alias="usernameEmptyText")
    username_label: Optional[StrictStr] = Field(None, alias="usernameLabel")
    enable_automation_generation: Optional[StrictBool] = Field(None, alias="enableAutomationGeneration")
    password_replay_state: Optional[StrictStr] = Field(None, alias="passwordReplayState")
    system_notification_config: Optional[GetOrgSettings200ResponseSystemNotificationConfig] = Field(None, alias="systemNotificationConfig")
    system_notification_emails: Optional[conlist(StrictStr)] = Field(None, alias="systemNotificationEmails")
    login_url: Optional[StrictStr] = Field(None, alias="loginUrl")
    redirect_patterns: Optional[conlist(StrictStr)] = Field(None, alias="redirectPatterns")
    style_hash: Optional[StrictStr] = Field(None, alias="styleHash")
    approval_config: Optional[GetOrgSettings200ResponseApprovalConfig] = Field(None, alias="approvalConfig")
    sso_partner_source: Optional[StrictStr] = Field(None, alias="ssoPartnerSource")
    __properties = ["id", "name", "description", "dateCreated", "lastUpdated", "scriptName", "ssoDomain", "status", "maxRegisteredIdentities", "identityCount", "kbaReqForAuthn", "kbaReqAnswers", "lockoutAttemptThreshold", "lockoutTimeMinutes", "usageCertRequired", "adminStrongAuthRequired", "enableExternalPasswordChange", "enablePasswordReplay", "enableAutomaticPasswordReplay", "netmasks", "countryCodes", "whiteList", "emailTestMode", "emailTestAddress", "usernameEmptyText", "usernameLabel", "enableAutomationGeneration", "passwordReplayState", "systemNotificationConfig", "systemNotificationEmails", "loginUrl", "redirectPatterns", "styleHash", "approvalConfig", "ssoPartnerSource"]

    @validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('inactive', 'active', 'demo', 'test'):
            raise ValueError("must be one of enum values ('inactive', 'active', 'demo', 'test')")
        return value

    @validator('password_replay_state')
    def password_replay_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('enabled', 'passive', 'disabled'):
            raise ValueError("must be one of enum values ('enabled', 'passive', 'disabled')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> GetOrgSettings200Response:
        """Create an instance of GetOrgSettings200Response from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of system_notification_config
        if self.system_notification_config:
            _dict['systemNotificationConfig'] = self.system_notification_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of approval_config
        if self.approval_config:
            _dict['approvalConfig'] = self.approval_config.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> GetOrgSettings200Response:
        """Create an instance of GetOrgSettings200Response from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return GetOrgSettings200Response.parse_obj(obj)

        _obj = GetOrgSettings200Response.parse_obj({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "description": obj.get("description"),
            "date_created": obj.get("dateCreated"),
            "last_updated": obj.get("lastUpdated"),
            "script_name": obj.get("scriptName"),
            "sso_domain": obj.get("ssoDomain"),
            "status": obj.get("status"),
            "max_registered_identities": obj.get("maxRegisteredIdentities"),
            "identity_count": obj.get("identityCount"),
            "kba_req_for_authn": obj.get("kbaReqForAuthn"),
            "kba_req_answers": obj.get("kbaReqAnswers"),
            "lockout_attempt_threshold": obj.get("lockoutAttemptThreshold"),
            "lockout_time_minutes": obj.get("lockoutTimeMinutes"),
            "usage_cert_required": obj.get("usageCertRequired"),
            "admin_strong_auth_required": obj.get("adminStrongAuthRequired"),
            "enable_external_password_change": obj.get("enableExternalPasswordChange"),
            "enable_password_replay": obj.get("enablePasswordReplay"),
            "enable_automatic_password_replay": obj.get("enableAutomaticPasswordReplay"),
            "netmasks": obj.get("netmasks"),
            "country_codes": obj.get("countryCodes"),
            "white_list": obj.get("whiteList"),
            "email_test_mode": obj.get("emailTestMode"),
            "email_test_address": obj.get("emailTestAddress"),
            "username_empty_text": obj.get("usernameEmptyText"),
            "username_label": obj.get("usernameLabel"),
            "enable_automation_generation": obj.get("enableAutomationGeneration"),
            "password_replay_state": obj.get("passwordReplayState"),
            "system_notification_config": GetOrgSettings200ResponseSystemNotificationConfig.from_dict(obj.get("systemNotificationConfig")) if obj.get("systemNotificationConfig") is not None else None,
            "system_notification_emails": obj.get("systemNotificationEmails"),
            "login_url": obj.get("loginUrl"),
            "redirect_patterns": obj.get("redirectPatterns"),
            "style_hash": obj.get("styleHash"),
            "approval_config": GetOrgSettings200ResponseApprovalConfig.from_dict(obj.get("approvalConfig")) if obj.get("approvalConfig") is not None else None,
            "sso_partner_source": obj.get("ssoPartnerSource")
        })
        return _obj


