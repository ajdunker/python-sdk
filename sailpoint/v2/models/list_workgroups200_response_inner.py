# coding: utf-8

"""
    SailPoint SaaS API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictInt, StrictStr
from pydantic import Field
from sailpoint.v2.models.list_workgroups200_response_inner_owner import ListWorkgroups200ResponseInnerOwner
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self


class ListWorkgroups200ResponseInner(BaseModel):
    """
    ListWorkgroups200ResponseInner
    """

  # noqa: E501
    connection_count: Optional[StrictInt] = Field(default=None,
                                                  alias="connectionCount")
    created: Optional[StrictInt] = None
    description: Optional[StrictStr] = None
    id: Optional[StrictStr] = None
    member_count: Optional[StrictInt] = Field(default=None,
                                              alias="memberCount")
    modified: Optional[StrictInt] = None
    name: Optional[StrictStr] = None
    owner: Optional[ListWorkgroups200ResponseInnerOwner] = None
    __properties: ClassVar[List[str]] = [
        "connectionCount", "created", "description", "id", "memberCount",
        "modified", "name", "owner"
    ]

    model_config = {"populate_by_name": True, "validate_assignment": True}

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of ListWorkgroups200ResponseInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={},
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of owner
        if self.owner:
            _dict['owner'] = self.owner.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of ListWorkgroups200ResponseInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "connectionCount":
            obj.get("connectionCount"),
            "created":
            obj.get("created"),
            "description":
            obj.get("description"),
            "id":
            obj.get("id"),
            "memberCount":
            obj.get("memberCount"),
            "modified":
            obj.get("modified"),
            "name":
            obj.get("name"),
            "owner":
            ListWorkgroups200ResponseInnerOwner.from_dict(obj.get("owner"))
            if obj.get("owner") is not None else None
        })
        return _obj
