# coding: utf-8

"""
    SailPoint SaaS API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictBool, StrictInt, StrictStr, field_validator
from pydantic import Field
from sailpoint.v2.models.get_org_settings200_response_approval_config import GetOrgSettings200ResponseApprovalConfig
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self


class UpdateOrgSettingsRequest(BaseModel):
    """
    UpdateOrgSettingsRequest
    """

  # noqa: E501
    country_codes: Optional[List[StrictStr]] = Field(default=None,
                                                     alias="countryCodes")
    enable_external_password_change: Optional[StrictBool] = Field(
        default=None, alias="enableExternalPasswordChange")
    enable_automatic_password_replay: Optional[StrictBool] = Field(
        default=None, alias="enableAutomaticPasswordReplay")
    enable_automation_generation: Optional[StrictBool] = Field(
        default=None, alias="enableAutomationGeneration")
    kba_req_answers: Optional[StrictInt] = Field(default=None,
                                                 alias="kbaReqAnswers")
    kba_req_for_authn: Optional[StrictInt] = Field(default=None,
                                                   alias="kbaReqForAuthn")
    lockout_attempt_threshold: Optional[StrictInt] = Field(
        default=None, alias="lockoutAttemptThreshold")
    lockout_time_minutes: Optional[StrictInt] = Field(
        default=None, alias="lockoutTimeMinutes")
    login_url: Optional[StrictStr] = Field(default=None, alias="loginUrl")
    netmasks: Optional[List[StrictStr]] = None
    notify_authentication_setting_change: Optional[StrictBool] = Field(
        default=None, alias="notifyAuthenticationSettingChange")
    password_replay_state: Optional[StrictStr] = Field(
        default=None, alias="passwordReplayState")
    preferred_identity_invite_template: Optional[StrictStr] = Field(
        default=None, alias="preferredIdentityInviteTemplate")
    redirect_patterns: Optional[List[StrictStr]] = Field(
        default=None, alias="redirectPatterns")
    sso_partner_source: Optional[StrictStr] = Field(default=None,
                                                    alias="ssoPartnerSource")
    system_notification_emails: Optional[List[StrictStr]] = Field(
        default=None, alias="systemNotificationEmails")
    track_analytics: Optional[StrictBool] = Field(default=None,
                                                  alias="trackAnalytics")
    usage_cert_required: Optional[StrictBool] = Field(
        default=None, alias="usageCertRequired")
    usage_cert_text: Optional[StrictStr] = Field(default=None,
                                                 alias="usageCertText")
    username_empty_text: Optional[StrictStr] = Field(default=None,
                                                     alias="usernameEmptyText")
    username_label: Optional[StrictStr] = Field(default=None,
                                                alias="usernameLabel")
    white_list: Optional[StrictBool] = Field(default=None, alias="whiteList")
    approval_config: Optional[GetOrgSettings200ResponseApprovalConfig] = Field(
        default=None, alias="approvalConfig")
    __properties: ClassVar[List[str]] = [
        "countryCodes", "enableExternalPasswordChange",
        "enableAutomaticPasswordReplay", "enableAutomationGeneration",
        "kbaReqAnswers", "kbaReqForAuthn", "lockoutAttemptThreshold",
        "lockoutTimeMinutes", "loginUrl", "netmasks",
        "notifyAuthenticationSettingChange", "passwordReplayState",
        "preferredIdentityInviteTemplate", "redirectPatterns",
        "ssoPartnerSource", "systemNotificationEmails", "trackAnalytics",
        "usageCertRequired", "usageCertText", "usernameEmptyText",
        "usernameLabel", "whiteList", "approvalConfig"
    ]

    @field_validator('password_replay_state')
    def password_replay_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('enabled', 'passive', 'disabled'):
            raise ValueError(
                "must be one of enum values ('enabled', 'passive', 'disabled')"
            )
        return value

    model_config = {"populate_by_name": True, "validate_assignment": True}

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of UpdateOrgSettingsRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={},
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of approval_config
        if self.approval_config:
            _dict['approvalConfig'] = self.approval_config.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of UpdateOrgSettingsRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "countryCodes":
            obj.get("countryCodes"),
            "enableExternalPasswordChange":
            obj.get("enableExternalPasswordChange"),
            "enableAutomaticPasswordReplay":
            obj.get("enableAutomaticPasswordReplay"),
            "enableAutomationGeneration":
            obj.get("enableAutomationGeneration"),
            "kbaReqAnswers":
            obj.get("kbaReqAnswers"),
            "kbaReqForAuthn":
            obj.get("kbaReqForAuthn"),
            "lockoutAttemptThreshold":
            obj.get("lockoutAttemptThreshold"),
            "lockoutTimeMinutes":
            obj.get("lockoutTimeMinutes"),
            "loginUrl":
            obj.get("loginUrl"),
            "netmasks":
            obj.get("netmasks"),
            "notifyAuthenticationSettingChange":
            obj.get("notifyAuthenticationSettingChange"),
            "passwordReplayState":
            obj.get("passwordReplayState"),
            "preferredIdentityInviteTemplate":
            obj.get("preferredIdentityInviteTemplate"),
            "redirectPatterns":
            obj.get("redirectPatterns"),
            "ssoPartnerSource":
            obj.get("ssoPartnerSource"),
            "systemNotificationEmails":
            obj.get("systemNotificationEmails"),
            "trackAnalytics":
            obj.get("trackAnalytics"),
            "usageCertRequired":
            obj.get("usageCertRequired"),
            "usageCertText":
            obj.get("usageCertText"),
            "usernameEmptyText":
            obj.get("usernameEmptyText"),
            "usernameLabel":
            obj.get("usernameLabel"),
            "whiteList":
            obj.get("whiteList"),
            "approvalConfig":
            GetOrgSettings200ResponseApprovalConfig.from_dict(
                obj.get("approvalConfig"))
            if obj.get("approvalConfig") is not None else None
        })
        return _obj
