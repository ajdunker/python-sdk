# coding: utf-8

"""
    SailPoint SaaS API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import re  # noqa: F401
import io
import warnings

from pydantic import validate_arguments, ValidationError

from typing_extensions import Annotated
from pydantic import Field, StrictStr, conint

from typing import List, Optional

from v2.models.bulk_delete_work_groups200_response import BulkDeleteWorkGroups200Response
from v2.models.bulk_delete_work_groups_request import BulkDeleteWorkGroupsRequest
from v2.models.create_workgroup_request import CreateWorkgroupRequest
from v2.models.list_workgroup_connections200_response_inner import ListWorkgroupConnections200ResponseInner
from v2.models.list_workgroup_members200_response_inner import ListWorkgroupMembers200ResponseInner
from v2.models.list_workgroups200_response_inner import ListWorkgroups200ResponseInner
from v2.models.modify_workgroup_members_request import ModifyWorkgroupMembersRequest

from v2.api_client import ApiClient
from v2.api_response import ApiResponse
from v2.exceptions import (  # noqa: F401
    ApiTypeError, ApiValueError)


class GovernanceGroupsApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def bulk_delete_work_groups(
            self, bulk_delete_work_groups_request: Annotated[
                BulkDeleteWorkGroupsRequest,
                Field(..., description="Work group ids to delete")],
            **kwargs) -> BulkDeleteWorkGroups200Response:  # noqa: E501
        """Bulk delete work groups  # noqa: E501

        This API allows you to bulk-delete work groups  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.bulk_delete_work_groups(bulk_delete_work_groups_request, async_req=True)
        >>> result = thread.get()

        :param bulk_delete_work_groups_request: Work group ids to delete (required)
        :type bulk_delete_work_groups_request: BulkDeleteWorkGroupsRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: BulkDeleteWorkGroups200Response
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the bulk_delete_work_groups_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.bulk_delete_work_groups_with_http_info(
            bulk_delete_work_groups_request, **kwargs)  # noqa: E501

    @validate_arguments
    def bulk_delete_work_groups_with_http_info(
            self, bulk_delete_work_groups_request: Annotated[
                BulkDeleteWorkGroupsRequest,
                Field(..., description="Work group ids to delete")],
            **kwargs) -> ApiResponse:  # noqa: E501
        """Bulk delete work groups  # noqa: E501

        This API allows you to bulk-delete work groups  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.bulk_delete_work_groups_with_http_info(bulk_delete_work_groups_request, async_req=True)
        >>> result = thread.get()

        :param bulk_delete_work_groups_request: Work group ids to delete (required)
        :type bulk_delete_work_groups_request: BulkDeleteWorkGroupsRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(BulkDeleteWorkGroups200Response, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ['bulk_delete_work_groups_request']
        _all_params.extend([
            'async_req', '_return_http_data_only', '_preload_content',
            '_request_timeout', '_request_auth', '_content_type', '_headers'
        ])

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError("Got an unexpected keyword argument '%s'"
                                   " to method bulk_delete_work_groups" % _key)
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['bulk_delete_work_groups_request'] is not None:
            _body_params = _params['bulk_delete_work_groups_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get(
            '_content_type',
            self.api_client.select_header_content_type(['application/json']))
        if _content_types_list:
            _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['UserContextAuth', 'UserContextAuth']  # noqa: E501

        _response_types_map = {
            '200': "BulkDeleteWorkGroups200Response",
        }

        return self.api_client.call_api(
            '/workgroups/bulk-delete',
            'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get(
                '_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def create_workgroup(
            self, create_workgroup_request: Annotated[
                CreateWorkgroupRequest,
                Field(..., description="Work group to create.")],
            **kwargs) -> List[ListWorkgroups200ResponseInner]:  # noqa: E501
        """Create Work Group  # noqa: E501

        This API allows you to create a work group  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_workgroup(create_workgroup_request, async_req=True)
        >>> result = thread.get()

        :param create_workgroup_request: Work group to create. (required)
        :type create_workgroup_request: CreateWorkgroupRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: List[ListWorkgroups200ResponseInner]
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the create_workgroup_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.create_workgroup_with_http_info(create_workgroup_request,
                                                    **kwargs)  # noqa: E501

    @validate_arguments
    def create_workgroup_with_http_info(
            self, create_workgroup_request: Annotated[
                CreateWorkgroupRequest,
                Field(..., description="Work group to create.")],
            **kwargs) -> ApiResponse:  # noqa: E501
        """Create Work Group  # noqa: E501

        This API allows you to create a work group  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_workgroup_with_http_info(create_workgroup_request, async_req=True)
        >>> result = thread.get()

        :param create_workgroup_request: Work group to create. (required)
        :type create_workgroup_request: CreateWorkgroupRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(List[ListWorkgroups200ResponseInner], status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ['create_workgroup_request']
        _all_params.extend([
            'async_req', '_return_http_data_only', '_preload_content',
            '_request_timeout', '_request_auth', '_content_type', '_headers'
        ])

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError("Got an unexpected keyword argument '%s'"
                                   " to method create_workgroup" % _key)
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['create_workgroup_request'] is not None:
            _body_params = _params['create_workgroup_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get(
            '_content_type',
            self.api_client.select_header_content_type(['application/json']))
        if _content_types_list:
            _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['UserContextAuth', 'UserContextAuth']  # noqa: E501

        _response_types_map = {
            '200': "List[ListWorkgroups200ResponseInner]",
        }

        return self.api_client.call_api(
            '/workgroups',
            'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get(
                '_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def delete_workgroup(self, workgroup_id: Annotated[
        StrictStr, Field(..., description="The workgroup ID")],
                         **kwargs) -> None:  # noqa: E501
        """Delete Work Group By Id  # noqa: E501

        This API deletes a single workgroup based on the ID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_workgroup(workgroup_id, async_req=True)
        >>> result = thread.get()

        :param workgroup_id: The workgroup ID (required)
        :type workgroup_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the delete_workgroup_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.delete_workgroup_with_http_info(workgroup_id,
                                                    **kwargs)  # noqa: E501

    @validate_arguments
    def delete_workgroup_with_http_info(self, workgroup_id: Annotated[
        StrictStr, Field(..., description="The workgroup ID")],
                                        **kwargs) -> ApiResponse:  # noqa: E501
        """Delete Work Group By Id  # noqa: E501

        This API deletes a single workgroup based on the ID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_workgroup_with_http_info(workgroup_id, async_req=True)
        >>> result = thread.get()

        :param workgroup_id: The workgroup ID (required)
        :type workgroup_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = ['workgroup_id']
        _all_params.extend([
            'async_req', '_return_http_data_only', '_preload_content',
            '_request_timeout', '_request_auth', '_content_type', '_headers'
        ])

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError("Got an unexpected keyword argument '%s'"
                                   " to method delete_workgroup" % _key)
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['workgroup_id']:
            _path_params['workgroupId'] = _params['workgroup_id']

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['UserContextAuth', 'UserContextAuth']  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/workgroups/{workgroupId}',
            'DELETE',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get(
                '_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_workgroup(
            self, workgroup_id: Annotated[
                StrictStr,
                Field(..., description="The workgroup ID")],
            **kwargs) -> ListWorkgroups200ResponseInner:  # noqa: E501
        """Get Work Group By Id  # noqa: E501

        This API returns the details for a single workgroup based on the ID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_workgroup(workgroup_id, async_req=True)
        >>> result = thread.get()

        :param workgroup_id: The workgroup ID (required)
        :type workgroup_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ListWorkgroups200ResponseInner
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the get_workgroup_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.get_workgroup_with_http_info(workgroup_id,
                                                 **kwargs)  # noqa: E501

    @validate_arguments
    def get_workgroup_with_http_info(self, workgroup_id: Annotated[
        StrictStr, Field(..., description="The workgroup ID")],
                                     **kwargs) -> ApiResponse:  # noqa: E501
        """Get Work Group By Id  # noqa: E501

        This API returns the details for a single workgroup based on the ID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_workgroup_with_http_info(workgroup_id, async_req=True)
        >>> result = thread.get()

        :param workgroup_id: The workgroup ID (required)
        :type workgroup_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ListWorkgroups200ResponseInner, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ['workgroup_id']
        _all_params.extend([
            'async_req', '_return_http_data_only', '_preload_content',
            '_request_timeout', '_request_auth', '_content_type', '_headers'
        ])

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError("Got an unexpected keyword argument '%s'"
                                   " to method get_workgroup" % _key)
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['workgroup_id']:
            _path_params['workgroupId'] = _params['workgroup_id']

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['UserContextAuth', 'UserContextAuth']  # noqa: E501

        _response_types_map = {
            '200': "ListWorkgroups200ResponseInner",
        }

        return self.api_client.call_api(
            '/workgroups/{workgroupId}',
            'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get(
                '_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def list_workgroup_connections(
        self,
        workgroup_id: Annotated[StrictStr,
                                Field(..., description="The workgroup ID")],
        **kwargs
    ) -> List[ListWorkgroupConnections200ResponseInner]:  # noqa: E501
        """List Work Group Connections  # noqa: E501

        This API returns the connections of a work group  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_workgroup_connections(workgroup_id, async_req=True)
        >>> result = thread.get()

        :param workgroup_id: The workgroup ID (required)
        :type workgroup_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: List[ListWorkgroupConnections200ResponseInner]
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the list_workgroup_connections_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.list_workgroup_connections_with_http_info(
            workgroup_id, **kwargs)  # noqa: E501

    @validate_arguments
    def list_workgroup_connections_with_http_info(
            self, workgroup_id: Annotated[
                StrictStr,
                Field(..., description="The workgroup ID")],
            **kwargs) -> ApiResponse:  # noqa: E501
        """List Work Group Connections  # noqa: E501

        This API returns the connections of a work group  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_workgroup_connections_with_http_info(workgroup_id, async_req=True)
        >>> result = thread.get()

        :param workgroup_id: The workgroup ID (required)
        :type workgroup_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(List[ListWorkgroupConnections200ResponseInner], status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ['workgroup_id']
        _all_params.extend([
            'async_req', '_return_http_data_only', '_preload_content',
            '_request_timeout', '_request_auth', '_content_type', '_headers'
        ])

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError("Got an unexpected keyword argument '%s'"
                                   " to method list_workgroup_connections" %
                                   _key)
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['workgroup_id']:
            _path_params['workgroupId'] = _params['workgroup_id']

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['UserContextAuth', 'UserContextAuth']  # noqa: E501

        _response_types_map = {
            '200': "List[ListWorkgroupConnections200ResponseInner]",
        }

        return self.api_client.call_api(
            '/workgroups/{workgroupId}/connections',
            'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get(
                '_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def list_workgroup_members(
            self,
            workgroup_id: Annotated[
                StrictStr,
                Field(..., description="The workgroup ID")],
            limit: Annotated[
                Optional[conint(strict=True, le=250, ge=0)],
                Field(description="Max number of results to return")] = None,
            offset:
        Annotated[
            Optional[conint(strict=True, ge=0)],
            Field(
                description=
                "Offset into the full result set. Usually specified with *limit* to paginate through the results."
            )] = None,
            filters:
        Annotated[
            Optional[StrictStr],
            Field(
                description=
                "Filter results using the following syntax. [{property:name, value: \"Tyler\", operation: EQ}]"
            )] = None,
            **kwargs
    ) -> List[ListWorkgroupMembers200ResponseInner]:  # noqa: E501
        """List Work Group Members  # noqa: E501

        This API returns the members of a work group  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_workgroup_members(workgroup_id, limit, offset, filters, async_req=True)
        >>> result = thread.get()

        :param workgroup_id: The workgroup ID (required)
        :type workgroup_id: str
        :param limit: Max number of results to return
        :type limit: int
        :param offset: Offset into the full result set. Usually specified with *limit* to paginate through the results.
        :type offset: int
        :param filters: Filter results using the following syntax. [{property:name, value: \"Tyler\", operation: EQ}]
        :type filters: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: List[ListWorkgroupMembers200ResponseInner]
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the list_workgroup_members_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.list_workgroup_members_with_http_info(
            workgroup_id, limit, offset, filters, **kwargs)  # noqa: E501

    @validate_arguments
    def list_workgroup_members_with_http_info(
            self,
            workgroup_id: Annotated[
                StrictStr,
                Field(..., description="The workgroup ID")],
            limit: Annotated[
                Optional[conint(strict=True, le=250, ge=0)],
                Field(description="Max number of results to return")] = None,
            offset:
        Annotated[
            Optional[conint(strict=True, ge=0)],
            Field(
                description=
                "Offset into the full result set. Usually specified with *limit* to paginate through the results."
            )] = None,
            filters:
        Annotated[
            Optional[StrictStr],
            Field(
                description=
                "Filter results using the following syntax. [{property:name, value: \"Tyler\", operation: EQ}]"
            )] = None,
            **kwargs) -> ApiResponse:  # noqa: E501
        """List Work Group Members  # noqa: E501

        This API returns the members of a work group  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_workgroup_members_with_http_info(workgroup_id, limit, offset, filters, async_req=True)
        >>> result = thread.get()

        :param workgroup_id: The workgroup ID (required)
        :type workgroup_id: str
        :param limit: Max number of results to return
        :type limit: int
        :param offset: Offset into the full result set. Usually specified with *limit* to paginate through the results.
        :type offset: int
        :param filters: Filter results using the following syntax. [{property:name, value: \"Tyler\", operation: EQ}]
        :type filters: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(List[ListWorkgroupMembers200ResponseInner], status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ['workgroup_id', 'limit', 'offset', 'filters']
        _all_params.extend([
            'async_req', '_return_http_data_only', '_preload_content',
            '_request_timeout', '_request_auth', '_content_type', '_headers'
        ])

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError("Got an unexpected keyword argument '%s'"
                                   " to method list_workgroup_members" % _key)
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['workgroup_id']:
            _path_params['workgroupId'] = _params['workgroup_id']

        # process the query parameters
        _query_params = []
        if _params.get('limit') is not None:  # noqa: E501
            _query_params.append(('limit', _params['limit']))

        if _params.get('offset') is not None:  # noqa: E501
            _query_params.append(('offset', _params['offset']))

        if _params.get('filters') is not None:  # noqa: E501
            _query_params.append(('filters', _params['filters']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['UserContextAuth', 'UserContextAuth']  # noqa: E501

        _response_types_map = {
            '200': "List[ListWorkgroupMembers200ResponseInner]",
        }

        return self.api_client.call_api(
            '/workgroups/{workgroupId}/members',
            'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get(
                '_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def list_workgroups(
            self,
            limit: Annotated[
                Optional[conint(strict=True, le=250, ge=0)],
                Field(description="Max number of results to return")] = None,
            offset:
        Annotated[
            Optional[conint(strict=True, ge=0)],
            Field(
                description=
                "Offset into the full result set. Usually specified with *limit* to paginate through the results."
            )] = None,
            filters:
        Annotated[
            Optional[StrictStr],
            Field(
                description=
                "Filter results using the following syntax. [{property:name, value: \"Tyler\", operation: EQ}]"
            )] = None,
            **kwargs) -> List[ListWorkgroups200ResponseInner]:  # noqa: E501
        """List Work Groups  # noqa: E501

        This API returns a list of work groups  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_workgroups(limit, offset, filters, async_req=True)
        >>> result = thread.get()

        :param limit: Max number of results to return
        :type limit: int
        :param offset: Offset into the full result set. Usually specified with *limit* to paginate through the results.
        :type offset: int
        :param filters: Filter results using the following syntax. [{property:name, value: \"Tyler\", operation: EQ}]
        :type filters: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: List[ListWorkgroups200ResponseInner]
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the list_workgroups_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.list_workgroups_with_http_info(limit, offset, filters,
                                                   **kwargs)  # noqa: E501

    @validate_arguments
    def list_workgroups_with_http_info(
            self,
            limit: Annotated[
                Optional[conint(strict=True, le=250, ge=0)],
                Field(description="Max number of results to return")] = None,
            offset:
        Annotated[
            Optional[conint(strict=True, ge=0)],
            Field(
                description=
                "Offset into the full result set. Usually specified with *limit* to paginate through the results."
            )] = None,
            filters:
        Annotated[
            Optional[StrictStr],
            Field(
                description=
                "Filter results using the following syntax. [{property:name, value: \"Tyler\", operation: EQ}]"
            )] = None,
            **kwargs) -> ApiResponse:  # noqa: E501
        """List Work Groups  # noqa: E501

        This API returns a list of work groups  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_workgroups_with_http_info(limit, offset, filters, async_req=True)
        >>> result = thread.get()

        :param limit: Max number of results to return
        :type limit: int
        :param offset: Offset into the full result set. Usually specified with *limit* to paginate through the results.
        :type offset: int
        :param filters: Filter results using the following syntax. [{property:name, value: \"Tyler\", operation: EQ}]
        :type filters: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(List[ListWorkgroups200ResponseInner], status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ['limit', 'offset', 'filters']
        _all_params.extend([
            'async_req', '_return_http_data_only', '_preload_content',
            '_request_timeout', '_request_auth', '_content_type', '_headers'
        ])

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError("Got an unexpected keyword argument '%s'"
                                   " to method list_workgroups" % _key)
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('limit') is not None:  # noqa: E501
            _query_params.append(('limit', _params['limit']))

        if _params.get('offset') is not None:  # noqa: E501
            _query_params.append(('offset', _params['offset']))

        if _params.get('filters') is not None:  # noqa: E501
            _query_params.append(('filters', _params['filters']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['UserContextAuth', 'UserContextAuth']  # noqa: E501

        _response_types_map = {
            '200': "List[ListWorkgroups200ResponseInner]",
        }

        return self.api_client.call_api(
            '/workgroups',
            'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get(
                '_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def modify_workgroup_members(
            self, workgroup_id: Annotated[
                StrictStr,
                Field(..., description="The workgroup ID")],
            modify_workgroup_members_request: Annotated[
                ModifyWorkgroupMembersRequest,
                Field(..., description="Add/Remove workgroup member ids.")],
            **kwargs) -> None:  # noqa: E501
        """Modify Work Group Members  # noqa: E501

        This API allows you to modify the members of a work group  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.modify_workgroup_members(workgroup_id, modify_workgroup_members_request, async_req=True)
        >>> result = thread.get()

        :param workgroup_id: The workgroup ID (required)
        :type workgroup_id: str
        :param modify_workgroup_members_request: Add/Remove workgroup member ids. (required)
        :type modify_workgroup_members_request: ModifyWorkgroupMembersRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the modify_workgroup_members_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.modify_workgroup_members_with_http_info(
            workgroup_id, modify_workgroup_members_request,
            **kwargs)  # noqa: E501

    @validate_arguments
    def modify_workgroup_members_with_http_info(
            self, workgroup_id: Annotated[
                StrictStr,
                Field(..., description="The workgroup ID")],
            modify_workgroup_members_request: Annotated[
                ModifyWorkgroupMembersRequest,
                Field(..., description="Add/Remove workgroup member ids.")],
            **kwargs) -> ApiResponse:  # noqa: E501
        """Modify Work Group Members  # noqa: E501

        This API allows you to modify the members of a work group  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.modify_workgroup_members_with_http_info(workgroup_id, modify_workgroup_members_request, async_req=True)
        >>> result = thread.get()

        :param workgroup_id: The workgroup ID (required)
        :type workgroup_id: str
        :param modify_workgroup_members_request: Add/Remove workgroup member ids. (required)
        :type modify_workgroup_members_request: ModifyWorkgroupMembersRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = ['workgroup_id', 'modify_workgroup_members_request']
        _all_params.extend([
            'async_req', '_return_http_data_only', '_preload_content',
            '_request_timeout', '_request_auth', '_content_type', '_headers'
        ])

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError("Got an unexpected keyword argument '%s'"
                                   " to method modify_workgroup_members" %
                                   _key)
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['workgroup_id']:
            _path_params['workgroupId'] = _params['workgroup_id']

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['modify_workgroup_members_request'] is not None:
            _body_params = _params['modify_workgroup_members_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get(
            '_content_type',
            self.api_client.select_header_content_type(['application/json']))
        if _content_types_list:
            _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['UserContextAuth', 'UserContextAuth']  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/workgroups/{workgroupId}/members',
            'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get(
                '_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def update_workgroup(
            self, workgroup_id: Annotated[
                StrictStr,
                Field(..., description="The workgroup ID")],
            create_workgroup_request: Annotated[
                CreateWorkgroupRequest,
                Field(..., description="Work group to modify.")],
            **kwargs) -> ListWorkgroups200ResponseInner:  # noqa: E501
        """Update Work Group By Id  # noqa: E501

        This API updates and returns the details for a single workgroup based on the ID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_workgroup(workgroup_id, create_workgroup_request, async_req=True)
        >>> result = thread.get()

        :param workgroup_id: The workgroup ID (required)
        :type workgroup_id: str
        :param create_workgroup_request: Work group to modify. (required)
        :type create_workgroup_request: CreateWorkgroupRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ListWorkgroups200ResponseInner
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the update_workgroup_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.update_workgroup_with_http_info(workgroup_id,
                                                    create_workgroup_request,
                                                    **kwargs)  # noqa: E501

    @validate_arguments
    def update_workgroup_with_http_info(
            self, workgroup_id: Annotated[
                StrictStr,
                Field(..., description="The workgroup ID")],
            create_workgroup_request: Annotated[
                CreateWorkgroupRequest,
                Field(..., description="Work group to modify.")],
            **kwargs) -> ApiResponse:  # noqa: E501
        """Update Work Group By Id  # noqa: E501

        This API updates and returns the details for a single workgroup based on the ID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_workgroup_with_http_info(workgroup_id, create_workgroup_request, async_req=True)
        >>> result = thread.get()

        :param workgroup_id: The workgroup ID (required)
        :type workgroup_id: str
        :param create_workgroup_request: Work group to modify. (required)
        :type create_workgroup_request: CreateWorkgroupRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ListWorkgroups200ResponseInner, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ['workgroup_id', 'create_workgroup_request']
        _all_params.extend([
            'async_req', '_return_http_data_only', '_preload_content',
            '_request_timeout', '_request_auth', '_content_type', '_headers'
        ])

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError("Got an unexpected keyword argument '%s'"
                                   " to method update_workgroup" % _key)
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['workgroup_id']:
            _path_params['workgroupId'] = _params['workgroup_id']

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['create_workgroup_request'] is not None:
            _body_params = _params['create_workgroup_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get(
            '_content_type',
            self.api_client.select_header_content_type(['application/json']))
        if _content_types_list:
            _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['UserContextAuth', 'UserContextAuth']  # noqa: E501

        _response_types_map = {
            '200': "ListWorkgroups200ResponseInner",
        }

        return self.api_client.call_api(
            '/workgroups/{workgroupId}',
            'PATCH',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get(
                '_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))
