# coding: utf-8

"""
    IdentityNow V3 API

    Use these APIs to interact with the IdentityNow platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

    The version of the OpenAPI document: 3.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from v3.models.identity_document import IdentityDocument  # noqa: E501

class TestIdentityDocument(unittest.TestCase):
    """IdentityDocument unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> IdentityDocument:
        """Test IdentityDocument
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `IdentityDocument`
        """
        model = IdentityDocument()  # noqa: E501
        if include_optional:
            return IdentityDocument(
                id = '2c91808568c529c60168cca6f90c1313',
                name = 'John Doe',
                type = 'identity',
                display_name = 'Carol.Adams',
                first_name = 'Carol',
                last_name = 'Adams',
                email = 'Carol.Adams@sailpointdemo.com',
                created = '2018-06-25T20:22:28.104Z',
                modified = '2018-06-25T20:22:28.104Z',
                synced = '2018-06-25T20:22:28.104Z',
                phone = '+1 440-527-3672',
                inactive = False,
                protected = False,
                status = 'UNREGISTERED',
                employee_number = '1a2a3d4e',
                manager = None,
                is_manager = False,
                identity_profile = v3.models.reference.Reference(
                    id = '2c91808568c529c60168cca6f90c1313', 
                    name = 'John Doe', ),
                source = v3.models.reference.Reference(
                    id = '2c91808568c529c60168cca6f90c1313', 
                    name = 'John Doe', ),
                attributes = {country=US, firstname=Carol, cloudStatus=UNREGISTERED},
                processing_state = '',
                processing_details = v3.models.processing_details.ProcessingDetails(
                    date = '2018-06-25T20:22:28.104Z', 
                    stage = 'In Process', 
                    retry_count = 0, 
                    stack_trace = '<stack trace>', 
                    message = '<message>', ),
                accounts = [
                    null
                    ],
                account_count = 3,
                apps = [
                    null
                    ],
                app_count = 2,
                access = [
                    null
                    ],
                access_count = 5,
                access_profile_count = 1,
                entitlement_count = 10,
                role_count = 1,
                owns = v3.models.owns.Owns(
                    sources = [
                        v3.models.reference.Reference(
                            id = '2c91808568c529c60168cca6f90c1313', 
                            name = 'John Doe', )
                        ], 
                    entitlements = [
                        v3.models.reference.Reference(
                            id = '2c91808568c529c60168cca6f90c1313', 
                            name = 'John Doe', )
                        ], 
                    access_profiles = [
                        
                        ], 
                    roles = [
                        
                        ], 
                    apps = [
                        
                        ], 
                    governance_groups = [
                        
                        ], 
                    fallback_approver = False, ),
                tags = [TAG_1, TAG_2]
            )
        else:
            return IdentityDocument(
                id = '2c91808568c529c60168cca6f90c1313',
                name = 'John Doe',
                type = 'identity',
        )
        """

    def testIdentityDocument(self):
        """Test IdentityDocument"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
