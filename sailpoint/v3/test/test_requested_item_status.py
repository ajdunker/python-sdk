# coding: utf-8

"""
    IdentityNow V3 API

    Use these APIs to interact with the IdentityNow platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

    The version of the OpenAPI document: 3.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from v3.models.requested_item_status import RequestedItemStatus  # noqa: E501

class TestRequestedItemStatus(unittest.TestCase):
    """RequestedItemStatus unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> RequestedItemStatus:
        """Test RequestedItemStatus
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `RequestedItemStatus`
        """
        model = RequestedItemStatus()  # noqa: E501
        if include_optional:
            return RequestedItemStatus(
                name = 'AccessProfile1',
                type = 'ACCESS_PROFILE',
                cancelled_request_details = v3.models.cancelled_request_details.CancelledRequestDetails(
                    comment = 'This request must be cancelled.', 
                    owner = v3.models.owner_dto.OwnerDto(
                        type = 'IDENTITY', 
                        id = '2c9180a46faadee4016fb4e018c20639', 
                        name = 'Support', ), 
                    modified = '2019-12-20T09:17:12.192Z', ),
                error_messages = [
                    [
                        v3.models.error_message_dto.ErrorMessageDto(
                            locale = 'en-US', 
                            locale_origin = 'DEFAULT', 
                            text = 'The request was syntactically correct but its content is semantically invalid.', )
                        ]
                    ],
                state = 'EXECUTING',
                approval_details = [
                    v3.models.approval_status_dto.ApprovalStatusDto(
                        forwarded = False, 
                        original_owner = v3.models.approval_status_dto_original_owner.ApprovalStatusDto_originalOwner(
                            type = 'IDENTITY', 
                            id = '2c7180a46faadee4016fb4e018c20642', 
                            name = 'Michael Michaels', ), 
                        current_owner = v3.models.access_item_reviewed_by.AccessItemReviewedBy(
                            type = 'IDENTITY', 
                            id = '2c3780a46faadee4016fb4e018c20652', 
                            name = 'Allen Albertson', ), 
                        modified = '2019-08-23T18:52:57.398Z', 
                        status = 'PENDING', 
                        scheme = 'MANAGER', 
                        error_messages = [
                            v3.models.error_message_dto.ErrorMessageDto(
                                locale = 'en-US', 
                                locale_origin = 'DEFAULT', 
                                text = 'The request was syntactically correct but its content is semantically invalid.', )
                            ], 
                        comment = 'I approve this request', 
                        remove_date = '2020-07-11T00:00Z', )
                    ],
                manual_work_item_details = [
                    v3.models.manual_work_item_details.ManualWorkItemDetails(
                        forwarded = True, 
                        original_owner = v3.models.manual_work_item_details_original_owner.ManualWorkItemDetails_originalOwner(
                            type = 'IDENTITY', 
                            id = '2c7180a46faadee4016fb4e018c20642', 
                            name = 'Michael Michaels', ), 
                        current_owner = v3.models.manual_work_item_details_current_owner.ManualWorkItemDetails_currentOwner(
                            type = 'IDENTITY', 
                            id = '2c3780a46faadee4016fb4e018c20652', 
                            name = 'Allen Albertson', ), 
                        modified = '2019-08-23T18:52:57.398Z', 
                        status = 'PENDING', 
                        forward_history = [
                            v3.models.approval_forward_history.ApprovalForwardHistory(
                                old_approver_name = 'Frank Mir', 
                                new_approver_name = 'Al Volta', 
                                comment = 'Forwarding from Frank to Al', 
                                modified = '2019-08-23T18:52:57.398Z', 
                                forwarder_name = 'William Wilson', 
                                reassignment_type = 'AUTOMATIC_REASSIGNMENT', )
                            ], )
                    ],
                account_activity_item_id = '2c9180926cbfbddd016cbfc7c3b10010',
                request_type = 'GRANT_ACCESS',
                modified = '2019-08-23T18:52:59.162Z',
                created = '2019-08-23T18:40:35.772Z',
                requester = v3.models.access_item_requester.AccessItemRequester(
                    type = 'IDENTITY', 
                    id = '2c7180a46faadee4016fb4e018c20648', 
                    name = 'William Wilson', ),
                requested_for = v3.models.access_item_requested_for.AccessItemRequestedFor(
                    type = 'IDENTITY', 
                    id = '2c4180a46faadee4016fb4e018c20626', 
                    name = 'Robert Robinson', ),
                requester_comment = v3.models.comment_dto.CommentDto(
                    comment = 'This is a comment.', 
                    author = v3.models.comment_dto_author.CommentDto_author(
                        type = 'IDENTITY', 
                        id = '2c91808568c529c60168cca6f90c1313', 
                        name = 'Adam Kennedy', ), 
                    created = '2017-07-11T18:45:37.098Z', ),
                sod_violation_context = v3.models.sod_violation_context_check_completed.SodViolationContextCheckCompleted(
                    state = 'SUCCESS', 
                    uuid = 'f73d16e9-a038-46c5-b217-1246e15fdbdd', 
                    violation_check_result = v3.models.sod_violation_check_result.SodViolationCheckResult(
                        message = v3.models.error_message_dto.ErrorMessageDto(
                            locale = 'en-US', 
                            locale_origin = 'DEFAULT', 
                            text = 'The request was syntactically correct but its content is semantically invalid.', ), 
                        client_metadata = {requestedAppName=test-app, requestedAppId=2c91808f7892918f0178b78da4a305a1}, 
                        violation_contexts = [
                            v3.models.sod_violation_context.SodViolationContext(
                                policy = v3.models.sod_policy_dto.SodPolicyDto(
                                    type = 'SOD_POLICY', 
                                    id = '0f11f2a4-7c94-4bf3-a2bd-742580fe3bde', 
                                    name = 'Business SOD Policy', ), 
                                conflicting_access_criteria = v3.models.sod_violation_context_conflicting_access_criteria.SodViolationContext_conflictingAccessCriteria(
                                    left_criteria = v3.models.sod_violation_context_conflicting_access_criteria_left_criteria.SodViolationContext_conflictingAccessCriteria_leftCriteria(
                                        criteria_list = [
                                            v3.models.sod_exempt_criteria.SodExemptCriteria(
                                                existing = True, 
                                                type = 'IDENTITY', 
                                                id = '2c918085771e9d3301773b3cb66f6398', 
                                                name = 'My HR Entitlement', )
                                            ], ), 
                                    right_criteria = v3.models.sod_violation_context_conflicting_access_criteria_left_criteria.SodViolationContext_conflictingAccessCriteria_leftCriteria(), ), )
                            ], 
                        violated_policies = [
                            v3.models.sod_policy_dto.SodPolicyDto(
                                id = '0f11f2a4-7c94-4bf3-a2bd-742580fe3bde', 
                                name = 'Business SOD Policy', )
                            ], ), ),
                provisioning_details = v3.models.provisioning_details.ProvisioningDetails(
                    ordered_sub_phase_references = 'manualWorkItemDetails', ),
                pre_approval_trigger_details = v3.models.pre_approval_trigger_details.PreApprovalTriggerDetails(
                    comment = 'Access is Approved', 
                    reviewer = 'John Doe', 
                    decision = 'APPROVED', ),
                access_request_phases = [
                    v3.models.access_request_phases.AccessRequestPhases(
                        started = '2020-07-11T00:00Z', 
                        finished = '2020-07-12T00:00Z', 
                        name = 'APPROVAL_PHASE', 
                        state = 'COMPLETED', 
                        result = 'SUCCESSFUL', 
                        phase_reference = 'approvalDetails', )
                    ],
                description = 'This is the Engineering role that engineers are granted.',
                remove_date = '2019-10-23T00:00Z',
                cancelable = True,
                access_request_id = '2b838de9-db9b-abcf-e646-d4f274ad4238',
                client_metadata = {key1=value1, key2=value2}
            )
        else:
            return RequestedItemStatus(
        )
        """

    def testRequestedItemStatus(self):
        """Test RequestedItemStatus"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
