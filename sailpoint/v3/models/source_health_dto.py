# coding: utf-8

"""
    IdentityNow V3 API

    Use these APIs to interact with the IdentityNow platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

    The version of the OpenAPI document: 3.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, validator

class SourceHealthDto(BaseModel):
    """
    Dto for source health data  # noqa: E501
    """
    id: Optional[StrictStr] = Field(None, description="the id of the Source")
    type: Optional[StrictStr] = Field(None, description="Specifies the type of system being managed e.g. Active Directory, Workday, etc.. If you are creating a Delimited File source, you must set the `provisionasCsv` query parameter to `true`. ")
    name: Optional[StrictStr] = Field(None, description="the name of the source")
    org: Optional[StrictStr] = Field(None, description="source's org")
    is_authoritative: Optional[StrictBool] = Field(None, alias="isAuthoritative", description="Is the source authoritative")
    is_cluster: Optional[StrictBool] = Field(None, alias="isCluster", description="Is the source in a cluster")
    hostname: Optional[StrictStr] = Field(None, description="source's hostname")
    pod: Optional[StrictStr] = Field(None, description="source's pod")
    iq_service_version: Optional[StrictStr] = Field(None, alias="iqServiceVersion", description="The version of the iqService")
    status: Optional[StrictStr] = Field(None, description="connection test result")
    __properties = ["id", "type", "name", "org", "isAuthoritative", "isCluster", "hostname", "pod", "iqServiceVersion", "status"]

    @validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('SOURCE_STATE_ERROR_CLUSTER', 'SOURCE_STATE_ERROR_SOURCE', 'SOURCE_STATE_ERROR_VA', 'SOURCE_STATE_FAILURE_CLUSTER', 'SOURCE_STATE_FAILURE_SOURCE', 'SOURCE_STATE_HEALTHY', 'SOURCE_STATE_UNCHECKED_CLUSTER', 'SOURCE_STATE_UNCHECKED_CLUSTER_NO_SOURCES', 'SOURCE_STATE_UNCHECKED_SOURCE', 'SOURCE_STATE_UNCHECKED_SOURCE_NO_ACCOUNTS'):
            raise ValueError("must be one of enum values ('SOURCE_STATE_ERROR_CLUSTER', 'SOURCE_STATE_ERROR_SOURCE', 'SOURCE_STATE_ERROR_VA', 'SOURCE_STATE_FAILURE_CLUSTER', 'SOURCE_STATE_FAILURE_SOURCE', 'SOURCE_STATE_HEALTHY', 'SOURCE_STATE_UNCHECKED_CLUSTER', 'SOURCE_STATE_UNCHECKED_CLUSTER_NO_SOURCES', 'SOURCE_STATE_UNCHECKED_SOURCE', 'SOURCE_STATE_UNCHECKED_SOURCE_NO_ACCOUNTS')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> SourceHealthDto:
        """Create an instance of SourceHealthDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "id",
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> SourceHealthDto:
        """Create an instance of SourceHealthDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return SourceHealthDto.parse_obj(obj)

        _obj = SourceHealthDto.parse_obj({
            "id": obj.get("id"),
            "type": obj.get("type"),
            "name": obj.get("name"),
            "org": obj.get("org"),
            "is_authoritative": obj.get("isAuthoritative"),
            "is_cluster": obj.get("isCluster"),
            "hostname": obj.get("hostname"),
            "pod": obj.get("pod"),
            "iq_service_version": obj.get("iqServiceVersion"),
            "status": obj.get("status")
        })
        return _obj


