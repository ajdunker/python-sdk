# coding: utf-8

"""
    IdentityNow V3 API

    Use these APIs to interact with the IdentityNow platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

    The version of the OpenAPI document: 3.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr, conlist
from v3.models.document_type import DocumentType
from v3.models.reference import Reference


class EntitlementDocument(BaseModel):
    """
    Entitlement  # noqa: E501
    """
    id: StrictStr = Field(
        ..., description="The unique ID of the referenced object.")
    name: StrictStr = Field(
        ..., description="The human readable name of the referenced object.")
    type: DocumentType = Field(..., alias="_type")
    description: Optional[StrictStr] = Field(
        None, description="A description of the entitlement")
    attribute: Optional[StrictStr] = Field(
        None, description="The name of the entitlement attribute")
    value: Optional[StrictStr] = Field(
        None, description="The value of the entitlement")
    modified: Optional[datetime] = Field(
        None, description="A date-time in ISO-8601 format")
    synced: Optional[datetime] = Field(
        None, description="A date-time in ISO-8601 format")
    display_name: Optional[StrictStr] = Field(
        None,
        alias="displayName",
        description="The display name of the entitlement")
    source: Optional[Reference] = None
    privileged: Optional[StrictBool] = None
    identity_count: Optional[StrictInt] = Field(None, alias="identityCount")
    tags: Optional[conlist(StrictStr)] = None
    __properties = [
        "id", "name", "_type", "description", "attribute", "value", "modified",
        "synced", "displayName", "source", "privileged", "identityCount",
        "tags"
    ]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> EntitlementDocument:
        """Create an instance of EntitlementDocument from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of source
        if self.source:
            _dict['source'] = self.source.to_dict()
        # set to None if modified (nullable) is None
        # and __fields_set__ contains the field
        if self.modified is None and "modified" in self.__fields_set__:
            _dict['modified'] = None

        # set to None if synced (nullable) is None
        # and __fields_set__ contains the field
        if self.synced is None and "synced" in self.__fields_set__:
            _dict['synced'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> EntitlementDocument:
        """Create an instance of EntitlementDocument from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return EntitlementDocument.parse_obj(obj)

        _obj = EntitlementDocument.parse_obj({
            "id":
            obj.get("id"),
            "name":
            obj.get("name"),
            "type":
            obj.get("_type"),
            "description":
            obj.get("description"),
            "attribute":
            obj.get("attribute"),
            "value":
            obj.get("value"),
            "modified":
            obj.get("modified"),
            "synced":
            obj.get("synced"),
            "display_name":
            obj.get("displayName"),
            "source":
            Reference.from_dict(obj.get("source"))
            if obj.get("source") is not None else None,
            "privileged":
            obj.get("privileged"),
            "identity_count":
            obj.get("identityCount"),
            "tags":
            obj.get("tags")
        })
        return _obj
