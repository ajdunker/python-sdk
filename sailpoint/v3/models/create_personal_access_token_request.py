# coding: utf-8

"""
    IdentityNow V3 API

    Use these APIs to interact with the IdentityNow platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

    The version of the OpenAPI document: 3.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist


class CreatePersonalAccessTokenRequest(BaseModel):
    """
    Object for specifying the name of a personal access token to create  # noqa: E501
    """
    name: StrictStr = Field(
        ...,
        description=
        "The name of the personal access token (PAT) to be created. Cannot be the same as another PAT owned by the user for whom this PAT is being created."
    )
    scope: Optional[conlist(StrictStr)] = Field(
        None,
        description=
        "Scopes of the personal  access token. If no scope is specified, the token will be created with the default scope \"sp:scopes:all\". This means the personal access token will have all the rights of the owner who created it."
    )
    __properties = ["name", "scope"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CreatePersonalAccessTokenRequest:
        """Create an instance of CreatePersonalAccessTokenRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # set to None if scope (nullable) is None
        # and __fields_set__ contains the field
        if self.scope is None and "scope" in self.__fields_set__:
            _dict['scope'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CreatePersonalAccessTokenRequest:
        """Create an instance of CreatePersonalAccessTokenRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CreatePersonalAccessTokenRequest.parse_obj(obj)

        _obj = CreatePersonalAccessTokenRequest.parse_obj({
            "name":
            obj.get("name"),
            "scope":
            obj.get("scope")
        })
        return _obj
