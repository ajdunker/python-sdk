# coding: utf-8

"""
    IdentityNow V3 API

    Use these APIs to interact with the IdentityNow platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

    The version of the OpenAPI document: 3.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictInt, conint
from v3.models.identity_reference_with_name_and_email import IdentityReferenceWithNameAndEmail

class ApprovalReminderAndEscalationConfig(BaseModel):
    """
    ApprovalReminderAndEscalationConfig
    """
    days_until_escalation: Optional[StrictInt] = Field(None, alias="daysUntilEscalation", description="Number of days to wait before the first reminder. If no reminders are configured, then this is the number of days to wait before escalation.")
    days_between_reminders: Optional[StrictInt] = Field(None, alias="daysBetweenReminders", description="Number of days to wait between reminder notifications.")
    max_reminders: Optional[conint(strict=True, ge=1)] = Field(None, alias="maxReminders", description="Maximum number of reminder notification to send to the reviewer before approval escalation.")
    fallback_approver_ref: Optional[IdentityReferenceWithNameAndEmail] = Field(None, alias="fallbackApproverRef")
    __properties = ["daysUntilEscalation", "daysBetweenReminders", "maxReminders", "fallbackApproverRef"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ApprovalReminderAndEscalationConfig:
        """Create an instance of ApprovalReminderAndEscalationConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of fallback_approver_ref
        if self.fallback_approver_ref:
            _dict['fallbackApproverRef'] = self.fallback_approver_ref.to_dict()
        # set to None if fallback_approver_ref (nullable) is None
        # and __fields_set__ contains the field
        if self.fallback_approver_ref is None and "fallback_approver_ref" in self.__fields_set__:
            _dict['fallbackApproverRef'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ApprovalReminderAndEscalationConfig:
        """Create an instance of ApprovalReminderAndEscalationConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ApprovalReminderAndEscalationConfig.parse_obj(obj)

        _obj = ApprovalReminderAndEscalationConfig.parse_obj({
            "days_until_escalation": obj.get("daysUntilEscalation"),
            "days_between_reminders": obj.get("daysBetweenReminders"),
            "max_reminders": obj.get("maxReminders"),
            "fallback_approver_ref": IdentityReferenceWithNameAndEmail.from_dict(obj.get("fallbackApproverRef")) if obj.get("fallbackApproverRef") is not None else None
        })
        return _obj


