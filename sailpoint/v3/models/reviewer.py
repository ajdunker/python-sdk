# coding: utf-8

"""
    IdentityNow V3 API

    Use these APIs to interact with the IdentityNow platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

    The version of the OpenAPI document: 3.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional
from pydantic import BaseModel, Field, StrictStr, validator

class Reviewer(BaseModel):
    """
    Reviewer
    """
    id: Optional[StrictStr] = Field(None, description="The id of the reviewer.")
    name: Optional[StrictStr] = Field(None, description="The name of the reviewer.")
    email: Optional[StrictStr] = Field(None, description="The email of the reviewing identity.")
    type: Optional[StrictStr] = Field(None, description="The type of the reviewing identity.")
    created: Optional[datetime] = Field(None, description="The created date of the reviewing identity.")
    modified: Optional[datetime] = Field(None, description="The modified date of the reviewing identity.")
    __properties = ["id", "name", "email", "type", "created", "modified"]

    @validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('IDENTITY'):
            raise ValueError("must be one of enum values ('IDENTITY')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Reviewer:
        """Create an instance of Reviewer from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if created (nullable) is None
        # and __fields_set__ contains the field
        if self.created is None and "created" in self.__fields_set__:
            _dict['created'] = None

        # set to None if modified (nullable) is None
        # and __fields_set__ contains the field
        if self.modified is None and "modified" in self.__fields_set__:
            _dict['modified'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Reviewer:
        """Create an instance of Reviewer from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Reviewer.parse_obj(obj)

        _obj = Reviewer.parse_obj({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "email": obj.get("email"),
            "type": obj.get("type"),
            "created": obj.get("created"),
            "modified": obj.get("modified")
        })
        return _obj


