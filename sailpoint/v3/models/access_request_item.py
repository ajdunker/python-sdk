# coding: utf-8

"""
    IdentityNow V3 API

    Use these APIs to interact with the IdentityNow platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

    The version of the OpenAPI document: 3.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Dict, Optional
from pydantic import BaseModel, Field, StrictStr, validator


class AccessRequestItem(BaseModel):
    """
    AccessRequestItem
    """
    type: StrictStr = Field(
        ..., description="The type of the item being requested.")
    id: StrictStr = Field(
        ...,
        description="ID of Role, Access Profile or Entitlement being requested."
    )
    comment: Optional[StrictStr] = Field(
        None,
        description=
        "Comment provided by requester. * Comment is required when the request is of type Revoke Access. "
    )
    client_metadata: Optional[Dict[str, StrictStr]] = Field(
        None,
        alias="clientMetadata",
        description=
        "Arbitrary key-value pairs. They will never be processed by the IdentityNow system but will be returned on associated APIs such as /account-activities and /access-request-status."
    )
    remove_date: Optional[datetime] = Field(
        None,
        alias="removeDate",
        description=
        "The date the role or access profile is no longer assigned to the specified identity. * Specify a date in the future. * The current SLA for the deprovisioning is 24 hours. * This date can be modified to either extend or decrease the duration of access item assignments for the specified identity. * Currently it is not supported for entitlements. "
    )
    __properties = ["type", "id", "comment", "clientMetadata", "removeDate"]

    @validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('ACCESS_PROFILE', 'ROLE', 'ENTITLEMENT'):
            raise ValueError(
                "must be one of enum values ('ACCESS_PROFILE', 'ROLE', 'ENTITLEMENT')"
            )
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> AccessRequestItem:
        """Create an instance of AccessRequestItem from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> AccessRequestItem:
        """Create an instance of AccessRequestItem from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return AccessRequestItem.parse_obj(obj)

        _obj = AccessRequestItem.parse_obj({
            "type":
            obj.get("type"),
            "id":
            obj.get("id"),
            "comment":
            obj.get("comment"),
            "client_metadata":
            obj.get("clientMetadata"),
            "remove_date":
            obj.get("removeDate")
        })
        return _obj
