# coding: utf-8

"""
    IdentityNow V3 API

    Use these APIs to interact with the IdentityNow platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

    The version of the OpenAPI document: 3.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from typing import Any, Dict, List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist, validator
from v3.models.campaign_filter_details_criteria_list_inner import CampaignFilterDetailsCriteriaListInner


class CampaignFilterDetails(BaseModel):
    """
    Campaign Filter Details  # noqa: E501
    """
    id: Optional[StrictStr] = Field(None,
                                    description="Id of the campaign filter")
    name: StrictStr = Field(..., description="This is campaign filter's name.")
    description: StrictStr = Field(
        ..., description="This is campaign filter's description.")
    owner: StrictStr = Field(
        ...,
        description=
        "The owner of this filter. This field is automatically populated at creation time with the current user."
    )
    mode: Dict[str, Any] = Field(
        ...,
        description=
        "The mode/type of Filter, where it is of INCLUSION or EXCLUSION type. INCLUSION type will include the data in generated campaign  as per specified in criteria, whereas EXCLUSION type will exclude the the data in generated campaign as per specified in criteria."
    )
    criteria_list: Optional[conlist(
        CampaignFilterDetailsCriteriaListInner)] = Field(
            None, alias="criteriaList", description="List of criteria.")
    __properties = [
        "id", "name", "description", "owner", "mode", "criteriaList"
    ]

    @validator('mode')
    def mode_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('INCLUSION', 'EXCLUSION'):
            raise ValueError(
                "must be one of enum values ('INCLUSION', 'EXCLUSION')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CampaignFilterDetails:
        """Create an instance of CampaignFilterDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in criteria_list (list)
        _items = []
        if self.criteria_list:
            for _item in self.criteria_list:
                if _item:
                    _items.append(_item.to_dict())
            _dict['criteriaList'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CampaignFilterDetails:
        """Create an instance of CampaignFilterDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CampaignFilterDetails.parse_obj(obj)

        _obj = CampaignFilterDetails.parse_obj({
            "id":
            obj.get("id"),
            "name":
            obj.get("name"),
            "description":
            obj.get("description"),
            "owner":
            obj.get("owner"),
            "mode":
            obj.get("mode"),
            "criteria_list": [
                CampaignFilterDetailsCriteriaListInner.from_dict(_item)
                for _item in obj.get("criteriaList")
            ] if obj.get("criteriaList") is not None else None
        })
        return _obj
