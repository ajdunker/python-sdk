# coding: utf-8

"""
    IdentityNow V3 API

    Use these APIs to interact with the IdentityNow platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

    The version of the OpenAPI document: 3.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from typing import Dict, List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist
from v3.models.base_reference_dto import BaseReferenceDto


class IdentityWithNewAccess1(BaseModel):
    """
    An identity with a set of access to be added  # noqa: E501
    """
    identity_id: StrictStr = Field(
        ...,
        alias="identityId",
        description="Set of identity id's to be checked.")
    access_refs: conlist(BaseReferenceDto) = Field(
        ...,
        alias="accessRefs",
        description=
        "The bundle of access profiles to be added to the identities specified. All references must be ENTITLEMENT type."
    )
    client_metadata: Optional[Dict[str, StrictStr]] = Field(
        None,
        alias="clientMetadata",
        description=
        "Arbitrary key-value pairs. They will never be processed by the IdentityNow system but will be returned on completion of the violation check."
    )
    __properties = ["identityId", "accessRefs", "clientMetadata"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> IdentityWithNewAccess1:
        """Create an instance of IdentityWithNewAccess1 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in access_refs (list)
        _items = []
        if self.access_refs:
            for _item in self.access_refs:
                if _item:
                    _items.append(_item.to_dict())
            _dict['accessRefs'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> IdentityWithNewAccess1:
        """Create an instance of IdentityWithNewAccess1 from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return IdentityWithNewAccess1.parse_obj(obj)

        _obj = IdentityWithNewAccess1.parse_obj({
            "identity_id":
            obj.get("identityId"),
            "access_refs": [
                BaseReferenceDto.from_dict(_item)
                for _item in obj.get("accessRefs")
            ] if obj.get("accessRefs") is not None else None,
            "client_metadata":
            obj.get("clientMetadata")
        })
        return _obj
