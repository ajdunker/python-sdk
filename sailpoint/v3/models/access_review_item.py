# coding: utf-8

"""
    IdentityNow V3 API

    Use these APIs to interact with the IdentityNow platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

    The version of the OpenAPI document: 3.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr
from v3.models.access_summary import AccessSummary
from v3.models.certification_decision import CertificationDecision
from v3.models.certification_identity_summary import CertificationIdentitySummary


class AccessReviewItem(BaseModel):
    """
    AccessReviewItem
    """
    access_summary: Optional[AccessSummary] = Field(None,
                                                    alias="accessSummary")
    identity_summary: Optional[CertificationIdentitySummary] = Field(
        None, alias="identitySummary")
    id: Optional[StrictStr] = Field(None, description="The review item's id")
    completed: Optional[StrictBool] = Field(
        None, description="Whether the review item is complete")
    new_access: Optional[StrictBool] = Field(
        None,
        alias="newAccess",
        description=
        "Indicates whether the review item is for new access to a source")
    decision: Optional[CertificationDecision] = None
    comments: Optional[StrictStr] = Field(
        None, description="Comments for this review item")
    __properties = [
        "accessSummary", "identitySummary", "id", "completed", "newAccess",
        "decision", "comments"
    ]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> AccessReviewItem:
        """Create an instance of AccessReviewItem from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of access_summary
        if self.access_summary:
            _dict['accessSummary'] = self.access_summary.to_dict()
        # override the default output from pydantic by calling `to_dict()` of identity_summary
        if self.identity_summary:
            _dict['identitySummary'] = self.identity_summary.to_dict()
        # set to None if comments (nullable) is None
        # and __fields_set__ contains the field
        if self.comments is None and "comments" in self.__fields_set__:
            _dict['comments'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> AccessReviewItem:
        """Create an instance of AccessReviewItem from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return AccessReviewItem.parse_obj(obj)

        _obj = AccessReviewItem.parse_obj({
            "access_summary":
            AccessSummary.from_dict(obj.get("accessSummary"))
            if obj.get("accessSummary") is not None else None,
            "identity_summary":
            CertificationIdentitySummary.from_dict(obj.get("identitySummary"))
            if obj.get("identitySummary") is not None else None,
            "id":
            obj.get("id"),
            "completed":
            obj.get("completed"),
            "new_access":
            obj.get("newAccess"),
            "decision":
            obj.get("decision"),
            "comments":
            obj.get("comments")
        })
        return _obj
