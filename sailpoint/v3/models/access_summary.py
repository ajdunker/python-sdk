# coding: utf-8

"""
    IdentityNow V3 API

    Use these APIs to interact with the IdentityNow platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

    The version of the OpenAPI document: 3.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from typing import Optional
from pydantic import BaseModel, Field
from sailpoint.v3.models.access_summary_access import AccessSummaryAccess
from sailpoint.v3.models.reviewable_access_profile import ReviewableAccessProfile
from sailpoint.v3.models.reviewable_entitlement import ReviewableEntitlement
from sailpoint.v3.models.reviewable_role import ReviewableRole


class AccessSummary(BaseModel):
    """
    An object holding the access that is being reviewed  # noqa: E501
    """
    access: Optional[AccessSummaryAccess] = None
    entitlement: Optional[ReviewableEntitlement] = None
    access_profile: Optional[ReviewableAccessProfile] = Field(
        None, alias="accessProfile")
    role: Optional[ReviewableRole] = None
    __properties = ["access", "entitlement", "accessProfile", "role"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> AccessSummary:
        """Create an instance of AccessSummary from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of access
        if self.access:
            _dict['access'] = self.access.to_dict()
        # override the default output from pydantic by calling `to_dict()` of entitlement
        if self.entitlement:
            _dict['entitlement'] = self.entitlement.to_dict()
        # override the default output from pydantic by calling `to_dict()` of access_profile
        if self.access_profile:
            _dict['accessProfile'] = self.access_profile.to_dict()
        # override the default output from pydantic by calling `to_dict()` of role
        if self.role:
            _dict['role'] = self.role.to_dict()
        # set to None if entitlement (nullable) is None
        # and __fields_set__ contains the field
        if self.entitlement is None and "entitlement" in self.__fields_set__:
            _dict['entitlement'] = None

        # set to None if role (nullable) is None
        # and __fields_set__ contains the field
        if self.role is None and "role" in self.__fields_set__:
            _dict['role'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> AccessSummary:
        """Create an instance of AccessSummary from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return AccessSummary.parse_obj(obj)

        _obj = AccessSummary.parse_obj({
            "access":
            AccessSummaryAccess.from_dict(obj.get("access"))
            if obj.get("access") is not None else None,
            "entitlement":
            ReviewableEntitlement.from_dict(obj.get("entitlement"))
            if obj.get("entitlement") is not None else None,
            "access_profile":
            ReviewableAccessProfile.from_dict(obj.get("accessProfile"))
            if obj.get("accessProfile") is not None else None,
            "role":
            ReviewableRole.from_dict(obj.get("role"))
            if obj.get("role") is not None else None
        })
        return _obj
