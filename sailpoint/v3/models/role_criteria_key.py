# coding: utf-8

"""
    IdentityNow V3 API

    Use these APIs to interact with the IdentityNow platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

    The version of the OpenAPI document: 3.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from typing import Optional
from pydantic import BaseModel, Field, StrictStr
from v3.models.role_criteria_key_type import RoleCriteriaKeyType


class RoleCriteriaKey(BaseModel):
    """
    Refers to a specific Identity attribute, Account attibute, or Entitlement used in Role membership criteria  # noqa: E501
    """
    type: RoleCriteriaKeyType = Field(...)
    var_property: StrictStr = Field(
        ...,
        alias="property",
        description=
        "The name of the attribute or entitlement to which the associated criteria applies."
    )
    source_id: Optional[StrictStr] = Field(
        None,
        alias="sourceId",
        description=
        "ID of the Source from which an account attribute or entitlement is drawn. Required if type is ACCOUNT or ENTITLEMENT"
    )
    __properties = ["type", "property", "sourceId"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> RoleCriteriaKey:
        """Create an instance of RoleCriteriaKey from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # set to None if source_id (nullable) is None
        # and __fields_set__ contains the field
        if self.source_id is None and "source_id" in self.__fields_set__:
            _dict['sourceId'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> RoleCriteriaKey:
        """Create an instance of RoleCriteriaKey from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return RoleCriteriaKey.parse_obj(obj)

        _obj = RoleCriteriaKey.parse_obj({
            "type": obj.get("type"),
            "var_property": obj.get("property"),
            "source_id": obj.get("sourceId")
        })
        return _obj
