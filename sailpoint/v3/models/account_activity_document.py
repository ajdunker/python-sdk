# coding: utf-8

"""
    IdentityNow V3 API

    Use these APIs to interact with the IdentityNow platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

    The version of the OpenAPI document: 3.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist
from sailpoint.v3.models.account_request import AccountRequest
from sailpoint.v3.models.account_source import AccountSource
from sailpoint.v3.models.approval import Approval
from sailpoint.v3.models.document_type import DocumentType
from sailpoint.v3.models.expansion_item import ExpansionItem
from sailpoint.v3.models.original_request import OriginalRequest


class AccountActivityDocument(BaseModel):
    """
    AccountActivity  # noqa: E501
    """
    id: StrictStr = Field(...)
    name: StrictStr = Field(...)
    type: DocumentType = Field(..., alias="_type")
    action: Optional[StrictStr] = Field(
        None, description="The type of action that this activity performed")
    created: Optional[datetime] = Field(
        None, description="A date-time in ISO-8601 format")
    modified: Optional[datetime] = Field(
        None, description="A date-time in ISO-8601 format")
    stage: Optional[StrictStr] = Field(
        None, description="The current stage of the activity")
    origin: Optional[StrictStr] = None
    status: Optional[StrictStr] = Field(
        None, description="the current status of the activity")
    requester: Optional[AccountSource] = None
    recipient: Optional[AccountSource] = None
    tracking_number: Optional[StrictStr] = Field(None, alias="trackingNumber")
    errors: Optional[conlist(StrictStr)] = None
    warnings: Optional[conlist(StrictStr)] = None
    approvals: Optional[conlist(Approval)] = None
    original_requests: Optional[conlist(OriginalRequest)] = Field(
        None, alias="originalRequests")
    expansion_items: Optional[conlist(ExpansionItem)] = Field(
        None, alias="expansionItems")
    account_requests: Optional[conlist(AccountRequest)] = Field(
        None, alias="accountRequests")
    sources: Optional[StrictStr] = None
    __properties = [
        "id", "name", "_type", "action", "created", "modified", "stage",
        "origin", "status", "requester", "recipient", "trackingNumber",
        "errors", "warnings", "approvals", "originalRequests",
        "expansionItems", "accountRequests", "sources"
    ]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> AccountActivityDocument:
        """Create an instance of AccountActivityDocument from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of requester
        if self.requester:
            _dict['requester'] = self.requester.to_dict()
        # override the default output from pydantic by calling `to_dict()` of recipient
        if self.recipient:
            _dict['recipient'] = self.recipient.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in approvals (list)
        _items = []
        if self.approvals:
            for _item in self.approvals:
                if _item:
                    _items.append(_item.to_dict())
            _dict['approvals'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in original_requests (list)
        _items = []
        if self.original_requests:
            for _item in self.original_requests:
                if _item:
                    _items.append(_item.to_dict())
            _dict['originalRequests'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in expansion_items (list)
        _items = []
        if self.expansion_items:
            for _item in self.expansion_items:
                if _item:
                    _items.append(_item.to_dict())
            _dict['expansionItems'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in account_requests (list)
        _items = []
        if self.account_requests:
            for _item in self.account_requests:
                if _item:
                    _items.append(_item.to_dict())
            _dict['accountRequests'] = _items
        # set to None if created (nullable) is None
        # and __fields_set__ contains the field
        if self.created is None and "created" in self.__fields_set__:
            _dict['created'] = None

        # set to None if modified (nullable) is None
        # and __fields_set__ contains the field
        if self.modified is None and "modified" in self.__fields_set__:
            _dict['modified'] = None

        # set to None if origin (nullable) is None
        # and __fields_set__ contains the field
        if self.origin is None and "origin" in self.__fields_set__:
            _dict['origin'] = None

        # set to None if errors (nullable) is None
        # and __fields_set__ contains the field
        if self.errors is None and "errors" in self.__fields_set__:
            _dict['errors'] = None

        # set to None if warnings (nullable) is None
        # and __fields_set__ contains the field
        if self.warnings is None and "warnings" in self.__fields_set__:
            _dict['warnings'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> AccountActivityDocument:
        """Create an instance of AccountActivityDocument from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return AccountActivityDocument.parse_obj(obj)

        _obj = AccountActivityDocument.parse_obj({
            "id":
            obj.get("id"),
            "name":
            obj.get("name"),
            "type":
            obj.get("_type"),
            "action":
            obj.get("action"),
            "created":
            obj.get("created"),
            "modified":
            obj.get("modified"),
            "stage":
            obj.get("stage"),
            "origin":
            obj.get("origin"),
            "status":
            obj.get("status"),
            "requester":
            AccountSource.from_dict(obj.get("requester"))
            if obj.get("requester") is not None else None,
            "recipient":
            AccountSource.from_dict(obj.get("recipient"))
            if obj.get("recipient") is not None else None,
            "tracking_number":
            obj.get("trackingNumber"),
            "errors":
            obj.get("errors"),
            "warnings":
            obj.get("warnings"),
            "approvals":
            [Approval.from_dict(_item) for _item in obj.get("approvals")]
            if obj.get("approvals") is not None else None,
            "original_requests": [
                OriginalRequest.from_dict(_item)
                for _item in obj.get("originalRequests")
            ] if obj.get("originalRequests") is not None else None,
            "expansion_items": [
                ExpansionItem.from_dict(_item)
                for _item in obj.get("expansionItems")
            ] if obj.get("expansionItems") is not None else None,
            "account_requests": [
                AccountRequest.from_dict(_item)
                for _item in obj.get("accountRequests")
            ] if obj.get("accountRequests") is not None else None,
            "sources":
            obj.get("sources")
        })
        return _obj
