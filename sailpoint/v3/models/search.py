# coding: utf-8

"""
    IdentityNow V3 API

    Use these APIs to interact with the IdentityNow platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

    The version of the OpenAPI document: 3.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from typing import Any, Dict, List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, conlist
from sailpoint.v3.models.aggregation_type import AggregationType
from sailpoint.v3.models.filter import Filter
from sailpoint.v3.models.index import Index
from sailpoint.v3.models.query import Query
from sailpoint.v3.models.query_result_filter import QueryResultFilter
from sailpoint.v3.models.query_type import QueryType
from sailpoint.v3.models.search_aggregation_specification import SearchAggregationSpecification
from sailpoint.v3.models.text_query import TextQuery
from sailpoint.v3.models.type_ahead_query import TypeAheadQuery


class Search(BaseModel):
    """
    Search
    """
    indices: Optional[conlist(Index)] = Field(
        None,
        description=
        "The names of the Elasticsearch indices in which to search. If none are provided, then all indices will be searched."
    )
    query_type: Optional[QueryType] = Field(None, alias="queryType")
    query_version: Optional[Any] = Field(None, alias="queryVersion")
    query: Optional[Query] = None
    query_dsl: Optional[Dict[str, Any]] = Field(
        None,
        alias="queryDsl",
        description=
        "The search query using the Elasticsearch [Query DSL](https://www.elastic.co/guide/en/elasticsearch/reference/7.10/query-dsl.html) syntax."
    )
    text_query: Optional[TextQuery] = Field(None, alias="textQuery")
    type_ahead_query: Optional[TypeAheadQuery] = Field(None,
                                                       alias="typeAheadQuery")
    include_nested: Optional[StrictBool] = Field(
        True,
        alias="includeNested",
        description=
        "Indicates whether nested objects from returned search results should be included."
    )
    query_result_filter: Optional[QueryResultFilter] = Field(
        None, alias="queryResultFilter")
    aggregation_type: Optional[AggregationType] = Field(
        None, alias="aggregationType")
    aggregations_version: Optional[Any] = Field(None,
                                                alias="aggregationsVersion")
    aggregations_dsl: Optional[Dict[str, Any]] = Field(
        None,
        alias="aggregationsDsl",
        description=
        "The aggregation search query using Elasticsearch [Aggregations](https://www.elastic.co/guide/en/elasticsearch/reference/5.2/search-aggregations.html) syntax."
    )
    aggregations: Optional[SearchAggregationSpecification] = None
    sort: Optional[conlist(StrictStr)] = Field(
        None,
        description=
        "The fields to be used to sort the search results. Use + or - to specify the sort direction."
    )
    search_after: Optional[conlist(StrictStr)] = Field(
        None,
        alias="searchAfter",
        description=
        "Used to begin the search window at the values specified. This parameter consists of the last values of the sorted fields in the current record set. This is used to expand the Elasticsearch limit of 10K records by shifting the 10K window to begin at this value. It is recommended that you always include the ID of the object in addition to any other fields on this parameter in order to ensure you don't get duplicate results while paging. For example, when searching for identities, if you are sorting by displayName you will also want to include ID, for example [\"displayName\", \"id\"].  If the last identity ID in the search result is 2c91808375d8e80a0175e1f88a575221 and the last displayName is \"John Doe\", then using that displayName and ID will start a new search after this identity. The searchAfter value will look like [\"John Doe\",\"2c91808375d8e80a0175e1f88a575221\"]"
    )
    filters: Optional[Dict[str, Filter]] = Field(
        None,
        description="The filters to be applied for each filtered field name.")
    __properties = [
        "indices", "queryType", "queryVersion", "query", "queryDsl",
        "textQuery", "typeAheadQuery", "includeNested", "queryResultFilter",
        "aggregationType", "aggregationsVersion", "aggregationsDsl",
        "aggregations", "sort", "searchAfter", "filters"
    ]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Search:
        """Create an instance of Search from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of query
        if self.query:
            _dict['query'] = self.query.to_dict()
        # override the default output from pydantic by calling `to_dict()` of text_query
        if self.text_query:
            _dict['textQuery'] = self.text_query.to_dict()
        # override the default output from pydantic by calling `to_dict()` of type_ahead_query
        if self.type_ahead_query:
            _dict['typeAheadQuery'] = self.type_ahead_query.to_dict()
        # override the default output from pydantic by calling `to_dict()` of query_result_filter
        if self.query_result_filter:
            _dict['queryResultFilter'] = self.query_result_filter.to_dict()
        # override the default output from pydantic by calling `to_dict()` of aggregations
        if self.aggregations:
            _dict['aggregations'] = self.aggregations.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each value in filters (dict)
        _field_dict = {}
        if self.filters:
            for _key in self.filters:
                if self.filters[_key]:
                    _field_dict[_key] = self.filters[_key].to_dict()
            _dict['filters'] = _field_dict
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Search:
        """Create an instance of Search from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Search.parse_obj(obj)

        _obj = Search.parse_obj({
            "indices":
            obj.get("indices"),
            "query_type":
            obj.get("queryType"),
            "query_version":
            obj.get("queryVersion"),
            "query":
            Query.from_dict(obj.get("query"))
            if obj.get("query") is not None else None,
            "query_dsl":
            obj.get("queryDsl"),
            "text_query":
            TextQuery.from_dict(obj.get("textQuery"))
            if obj.get("textQuery") is not None else None,
            "type_ahead_query":
            TypeAheadQuery.from_dict(obj.get("typeAheadQuery"))
            if obj.get("typeAheadQuery") is not None else None,
            "include_nested":
            obj.get("includeNested")
            if obj.get("includeNested") is not None else True,
            "query_result_filter":
            QueryResultFilter.from_dict(obj.get("queryResultFilter"))
            if obj.get("queryResultFilter") is not None else None,
            "aggregation_type":
            obj.get("aggregationType"),
            "aggregations_version":
            obj.get("aggregationsVersion"),
            "aggregations_dsl":
            obj.get("aggregationsDsl"),
            "aggregations":
            SearchAggregationSpecification.from_dict(obj.get("aggregations"))
            if obj.get("aggregations") is not None else None,
            "sort":
            obj.get("sort"),
            "search_after":
            obj.get("searchAfter"),
            "filters":
            dict((_k, Filter.from_dict(_v))
                 for _k, _v in obj.get("filters").items())
            if obj.get("filters") is not None else None
        })
        return _obj
