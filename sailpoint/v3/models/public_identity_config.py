# coding: utf-8

"""
    IdentityNow V3 API

    Use these APIs to interact with the IdentityNow platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

    The version of the OpenAPI document: 3.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import List, Optional
from pydantic import BaseModel, Field, conlist
from sailpoint.v3.models.identity_reference import IdentityReference
from sailpoint.v3.models.public_identity_attribute_config import PublicIdentityAttributeConfig


class PublicIdentityConfig(BaseModel):
    """
    Details of up to 5 Identity attributes that will be publicly accessible for all Identities to anyone in the org.  # noqa: E501
    """
    attributes: Optional[conlist(PublicIdentityAttributeConfig)] = Field(
        None,
        description=
        "Up to 5 identity attributes that will be available to everyone in the org for all users in the org."
    )
    modified: Optional[datetime] = Field(
        None, description="When this configuration was last modified.")
    modified_by: Optional[IdentityReference] = Field(None, alias="modifiedBy")
    __properties = ["attributes", "modified", "modifiedBy"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PublicIdentityConfig:
        """Create an instance of PublicIdentityConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in attributes (list)
        _items = []
        if self.attributes:
            for _item in self.attributes:
                if _item:
                    _items.append(_item.to_dict())
            _dict['attributes'] = _items
        # override the default output from pydantic by calling `to_dict()` of modified_by
        if self.modified_by:
            _dict['modifiedBy'] = self.modified_by.to_dict()
        # set to None if modified (nullable) is None
        # and __fields_set__ contains the field
        if self.modified is None and "modified" in self.__fields_set__:
            _dict['modified'] = None

        # set to None if modified_by (nullable) is None
        # and __fields_set__ contains the field
        if self.modified_by is None and "modified_by" in self.__fields_set__:
            _dict['modifiedBy'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PublicIdentityConfig:
        """Create an instance of PublicIdentityConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return PublicIdentityConfig.parse_obj(obj)

        _obj = PublicIdentityConfig.parse_obj({
            "attributes": [
                PublicIdentityAttributeConfig.from_dict(_item)
                for _item in obj.get("attributes")
            ] if obj.get("attributes") is not None else None,
            "modified":
            obj.get("modified"),
            "modified_by":
            IdentityReference.from_dict(obj.get("modifiedBy"))
            if obj.get("modifiedBy") is not None else None
        })
        return _obj
