# coding: utf-8

"""
    IdentityNow V3 API

    Use these APIs to interact with the IdentityNow platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

    The version of the OpenAPI document: 3.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr
from v3.models.dto_type import DtoType


class ReviewableEntitlementAccount(BaseModel):
    """
    Information about the status of the entitlement  # noqa: E501
    """
    native_identity: Optional[StrictStr] = Field(
        None,
        alias="nativeIdentity",
        description="The native identity for this account")
    disabled: Optional[StrictBool] = Field(
        None,
        description="Indicates whether this account is currently disabled")
    locked: Optional[StrictBool] = Field(
        None, description="Indicates whether this account is currently locked")
    type: Optional[DtoType] = None
    id: Optional[StrictStr] = Field(
        None, description="The id associated with the account")
    name: Optional[StrictStr] = Field(None, description="The account name")
    created: Optional[datetime] = Field(
        None, description="When the account was created")
    modified: Optional[datetime] = Field(
        None, description="When the account was last modified")
    __properties = [
        "nativeIdentity", "disabled", "locked", "type", "id", "name",
        "created", "modified"
    ]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ReviewableEntitlementAccount:
        """Create an instance of ReviewableEntitlementAccount from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # set to None if id (nullable) is None
        # and __fields_set__ contains the field
        if self.id is None and "id" in self.__fields_set__:
            _dict['id'] = None

        # set to None if name (nullable) is None
        # and __fields_set__ contains the field
        if self.name is None and "name" in self.__fields_set__:
            _dict['name'] = None

        # set to None if created (nullable) is None
        # and __fields_set__ contains the field
        if self.created is None and "created" in self.__fields_set__:
            _dict['created'] = None

        # set to None if modified (nullable) is None
        # and __fields_set__ contains the field
        if self.modified is None and "modified" in self.__fields_set__:
            _dict['modified'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ReviewableEntitlementAccount:
        """Create an instance of ReviewableEntitlementAccount from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ReviewableEntitlementAccount.parse_obj(obj)

        _obj = ReviewableEntitlementAccount.parse_obj({
            "native_identity":
            obj.get("nativeIdentity"),
            "disabled":
            obj.get("disabled"),
            "locked":
            obj.get("locked"),
            "type":
            obj.get("type"),
            "id":
            obj.get("id"),
            "name":
            obj.get("name"),
            "created":
            obj.get("created"),
            "modified":
            obj.get("modified")
        })
        return _obj
