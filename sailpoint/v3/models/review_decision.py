# coding: utf-8

"""
    IdentityNow V3 API

    Use these APIs to interact with the IdentityNow platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

    The version of the OpenAPI document: 3.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr
from v3.models.certification_decision import CertificationDecision
from v3.models.review_recommendation import ReviewRecommendation

class ReviewDecision(BaseModel):
    """
    ReviewDecision
    """
    id: StrictStr = Field(..., description="The id of the review decision")
    decision: CertificationDecision = Field(...)
    proposed_end_date: Optional[datetime] = Field(None, alias="proposedEndDate", description="The date at which a user's access should be taken away. Should only be set for `REVOKE` decisions.")
    bulk: StrictBool = Field(..., description="Indicates whether decision should be marked as part of a larger bulk decision")
    recommendation: Optional[ReviewRecommendation] = None
    comments: Optional[StrictStr] = Field(None, description="Comments recorded when the decision was made")
    __properties = ["id", "decision", "proposedEndDate", "bulk", "recommendation", "comments"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ReviewDecision:
        """Create an instance of ReviewDecision from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of recommendation
        if self.recommendation:
            _dict['recommendation'] = self.recommendation.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ReviewDecision:
        """Create an instance of ReviewDecision from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ReviewDecision.parse_obj(obj)

        _obj = ReviewDecision.parse_obj({
            "id": obj.get("id"),
            "decision": obj.get("decision"),
            "proposed_end_date": obj.get("proposedEndDate"),
            "bulk": obj.get("bulk"),
            "recommendation": ReviewRecommendation.from_dict(obj.get("recommendation")) if obj.get("recommendation") is not None else None,
            "comments": obj.get("comments")
        })
        return _obj


