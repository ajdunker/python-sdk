# coding: utf-8

"""
    IdentityNow V3 API

    Use these APIs to interact with the IdentityNow platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

    The version of the OpenAPI document: 3.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist, validator
from v3.models.access_constraint import AccessConstraint
from v3.models.campaign_all_of_search_campaign_info_reviewer import CampaignAllOfSearchCampaignInfoReviewer


class CampaignAllOfSearchCampaignInfo(BaseModel):
    """
    Must be set only if the campaign type is SEARCH.  # noqa: E501
    """
    type: StrictStr = Field(
        ..., description="The type of search campaign represented.")
    description: Optional[StrictStr] = Field(
        None,
        description=
        "Describes this search campaign. Intended for storing the query used, and possibly the number of identities selected/available."
    )
    reviewer: Optional[CampaignAllOfSearchCampaignInfoReviewer] = None
    query: Optional[StrictStr] = Field(
        None,
        description=
        "The scope for the campaign. The campaign will cover identities returned by the query and identities that have access items returned by the query. One of `query` or `identityIds` must be set."
    )
    identity_ids: Optional[conlist(StrictStr, max_items=1000)] = Field(
        None,
        alias="identityIds",
        description=
        "A direct list of identities to include in this campaign. One of `identityIds` or `query` must be set."
    )
    access_constraints: Optional[conlist(
        AccessConstraint, max_items=1000
    )] = Field(
        None,
        alias="accessConstraints",
        description=
        "Further reduces the scope of the campaign by excluding identities (from `query` or `identityIds`) that do not have this access."
    )
    __properties = [
        "type", "description", "reviewer", "query", "identityIds",
        "accessConstraints"
    ]

    @validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('IDENTITY', 'ACCESS'):
            raise ValueError(
                "must be one of enum values ('IDENTITY', 'ACCESS')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CampaignAllOfSearchCampaignInfo:
        """Create an instance of CampaignAllOfSearchCampaignInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of reviewer
        if self.reviewer:
            _dict['reviewer'] = self.reviewer.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in access_constraints (list)
        _items = []
        if self.access_constraints:
            for _item in self.access_constraints:
                if _item:
                    _items.append(_item.to_dict())
            _dict['accessConstraints'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CampaignAllOfSearchCampaignInfo:
        """Create an instance of CampaignAllOfSearchCampaignInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CampaignAllOfSearchCampaignInfo.parse_obj(obj)

        _obj = CampaignAllOfSearchCampaignInfo.parse_obj({
            "type":
            obj.get("type"),
            "description":
            obj.get("description"),
            "reviewer":
            CampaignAllOfSearchCampaignInfoReviewer.from_dict(
                obj.get("reviewer"))
            if obj.get("reviewer") is not None else None,
            "query":
            obj.get("query"),
            "identity_ids":
            obj.get("identityIds"),
            "access_constraints": [
                AccessConstraint.from_dict(_item)
                for _item in obj.get("accessConstraints")
            ] if obj.get("accessConstraints") is not None else None
        })
        return _obj
