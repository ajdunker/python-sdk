# coding: utf-8

"""
    IdentityNow V3 API

    Use these APIs to interact with the IdentityNow platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

    The version of the OpenAPI document: 3.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr, conlist, validator

class ScheduleMonths(BaseModel):
    """
    Specifies which months of a schedule are active. Only valid for ANNUALLY schedule types. Examples:  On February and March: * type LIST * values \"2\", \"3\"  Every 3 months, starting in January (quarterly): * type LIST * values \"1\" * interval 3  Every two months between July and December: * type RANGE * values \"7\", \"12\" * interval 2   # noqa: E501
    """
    type: StrictStr = Field(..., description="Enum type to specify months value")
    values: conlist(StrictStr) = Field(..., description="Values of the months based on the enum type mentioned above")
    interval: Optional[StrictInt] = Field(None, description="Interval between the cert generations")
    __properties = ["type", "values", "interval"]

    @validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('LIST', 'RANGE'):
            raise ValueError("must be one of enum values ('LIST', 'RANGE')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ScheduleMonths:
        """Create an instance of ScheduleMonths from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ScheduleMonths:
        """Create an instance of ScheduleMonths from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ScheduleMonths.parse_obj(obj)

        _obj = ScheduleMonths.parse_obj({
            "type": obj.get("type"),
            "values": obj.get("values"),
            "interval": obj.get("interval")
        })
        return _obj


