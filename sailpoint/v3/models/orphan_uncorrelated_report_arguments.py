# coding: utf-8

"""
    IdentityNow V3 API

    Use these APIs to interact with the IdentityNow platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

    The version of the OpenAPI document: 3.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, conlist, validator

class OrphanUncorrelatedReportArguments(BaseModel):
    """
    Arguments for Orphan Identities report (ORPHAN_IDENTITIES) and Uncorrelated Accounts report (UNCORRELATED_ACCOUNTS)  # noqa: E501
    """
    selected_formats: Optional[conlist(StrictStr)] = Field(None, alias="selectedFormats", description="Output report file formats. This are formats for calling get endpoint as a query parameter 'fileFormat'.  In case report won't have this argument there will be ['CSV', 'PDF'] as default.")
    default_s3_bucket: StrictBool = Field(..., alias="defaultS3Bucket", description="Use it to set default s3 bucket where generated report will be saved.  In case this argument is false and 's3Bucket' argument is null or absent there will be default s3Bucket assigned to the report.")
    s3_bucket: Optional[StrictStr] = Field(None, alias="s3Bucket", description="If you want to be specific you could use this argument with defaultS3Bucket = false.")
    __properties = ["selectedFormats", "defaultS3Bucket", "s3Bucket"]

    @validator('selected_formats')
    def selected_formats_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in ('CSV', 'PDF'):
                raise ValueError("each list item must be one of ('CSV', 'PDF')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> OrphanUncorrelatedReportArguments:
        """Create an instance of OrphanUncorrelatedReportArguments from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> OrphanUncorrelatedReportArguments:
        """Create an instance of OrphanUncorrelatedReportArguments from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return OrphanUncorrelatedReportArguments.parse_obj(obj)

        _obj = OrphanUncorrelatedReportArguments.parse_obj({
            "selected_formats": obj.get("selectedFormats"),
            "default_s3_bucket": obj.get("defaultS3Bucket"),
            "s3_bucket": obj.get("s3Bucket")
        })
        return _obj


