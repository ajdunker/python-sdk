# coding: utf-8

"""
    IdentityNow V3 API

    Use these APIs to interact with the IdentityNow platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

    The version of the OpenAPI document: 3.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Dict, List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist
from v3.models.approval_status import ApprovalStatus
from v3.models.non_employee_approval_item_base import NonEmployeeApprovalItemBase
from v3.models.non_employee_source_lite import NonEmployeeSourceLite


class NonEmployeeRequest(BaseModel):
    """
    NonEmployeeRequest
    """
    id: Optional[StrictStr] = Field(None,
                                    description="Non-Employee source id.")
    source_id: Optional[StrictStr] = Field(
        None,
        alias="sourceId",
        description="Source Id associated with this non-employee source.")
    name: Optional[StrictStr] = Field(
        None,
        description="Source name associated with this non-employee source.")
    description: Optional[StrictStr] = Field(
        None,
        description=
        "Source description associated with this non-employee source.")
    account_name: Optional[StrictStr] = Field(
        None,
        alias="accountName",
        description="Requested identity account name.")
    first_name: Optional[StrictStr] = Field(
        None, alias="firstName", description="Non-Employee's first name.")
    last_name: Optional[StrictStr] = Field(
        None, alias="lastName", description="Non-Employee's last name.")
    email: Optional[StrictStr] = Field(None,
                                       description="Non-Employee's email.")
    phone: Optional[StrictStr] = Field(None,
                                       description="Non-Employee's phone.")
    manager: Optional[StrictStr] = Field(
        None,
        description=
        "The account ID of a valid identity to serve as this non-employee's manager."
    )
    non_employee_source: Optional[NonEmployeeSourceLite] = Field(
        None, alias="nonEmployeeSource")
    data: Optional[Dict[str, StrictStr]] = Field(
        None, description="Attribute blob/bag for a non-employee.")
    approval_items: Optional[conlist(NonEmployeeApprovalItemBase)] = Field(
        None,
        alias="approvalItems",
        description="List of approval item for the request")
    approval_status: Optional[ApprovalStatus] = Field(None,
                                                      alias="approvalStatus")
    comment: Optional[StrictStr] = Field(None,
                                         description="comment of requester")
    completion_date: Optional[datetime] = Field(
        None,
        alias="completionDate",
        description="When the request was completely approved.")
    start_date: Optional[datetime] = Field(
        None,
        alias="startDate",
        description="Non-Employee employment start date.")
    end_date: Optional[datetime] = Field(
        None, alias="endDate", description="Non-Employee employment end date.")
    modified: Optional[datetime] = Field(
        None, description="When the request was last modified.")
    created: Optional[datetime] = Field(
        None, description="When the request was created.")
    __properties = [
        "id", "sourceId", "name", "description", "accountName", "firstName",
        "lastName", "email", "phone", "manager", "nonEmployeeSource", "data",
        "approvalItems", "approvalStatus", "comment", "completionDate",
        "startDate", "endDate", "modified", "created"
    ]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> NonEmployeeRequest:
        """Create an instance of NonEmployeeRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of non_employee_source
        if self.non_employee_source:
            _dict['nonEmployeeSource'] = self.non_employee_source.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in approval_items (list)
        _items = []
        if self.approval_items:
            for _item in self.approval_items:
                if _item:
                    _items.append(_item.to_dict())
            _dict['approvalItems'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> NonEmployeeRequest:
        """Create an instance of NonEmployeeRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return NonEmployeeRequest.parse_obj(obj)

        _obj = NonEmployeeRequest.parse_obj({
            "id":
            obj.get("id"),
            "source_id":
            obj.get("sourceId"),
            "name":
            obj.get("name"),
            "description":
            obj.get("description"),
            "account_name":
            obj.get("accountName"),
            "first_name":
            obj.get("firstName"),
            "last_name":
            obj.get("lastName"),
            "email":
            obj.get("email"),
            "phone":
            obj.get("phone"),
            "manager":
            obj.get("manager"),
            "non_employee_source":
            NonEmployeeSourceLite.from_dict(obj.get("nonEmployeeSource"))
            if obj.get("nonEmployeeSource") is not None else None,
            "data":
            obj.get("data"),
            "approval_items": [
                NonEmployeeApprovalItemBase.from_dict(_item)
                for _item in obj.get("approvalItems")
            ] if obj.get("approvalItems") is not None else None,
            "approval_status":
            obj.get("approvalStatus"),
            "comment":
            obj.get("comment"),
            "completion_date":
            obj.get("completionDate"),
            "start_date":
            obj.get("startDate"),
            "end_date":
            obj.get("endDate"),
            "modified":
            obj.get("modified"),
            "created":
            obj.get("created")
        })
        return _obj
