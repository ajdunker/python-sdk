# coding: utf-8

"""
    IdentityNow V3 API

    Use these APIs to interact with the IdentityNow platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

    The version of the OpenAPI document: 3.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, conlist
from v3.models.schedule1 import Schedule1
from v3.models.scheduled_search_all_of_owner import ScheduledSearchAllOfOwner
from v3.models.search_schedule_recipients_inner import SearchScheduleRecipientsInner


class ScheduledSearch(BaseModel):
    """
    ScheduledSearch
    """
    name: Optional[StrictStr] = Field(
        None, description="The name of the scheduled search. ")
    description: Optional[StrictStr] = Field(
        None, description="The description of the scheduled search. ")
    saved_search_id: StrictStr = Field(
        ...,
        alias="savedSearchId",
        description="The ID of the saved search that will be executed.")
    created: Optional[datetime] = Field(
        None, description="A date-time in ISO-8601 format")
    modified: Optional[datetime] = Field(
        None, description="A date-time in ISO-8601 format")
    schedule: Schedule1 = Field(...)
    recipients: conlist(SearchScheduleRecipientsInner) = Field(
        ...,
        description=
        "A list of identities that should receive the scheduled search report via email."
    )
    enabled: Optional[StrictBool] = Field(
        False, description="Indicates if the scheduled search is enabled. ")
    email_empty_results: Optional[StrictBool] = Field(
        False,
        alias="emailEmptyResults",
        description=
        "Indicates if email generation should not be suppressed if search returns no results. "
    )
    display_query_details: Optional[StrictBool] = Field(
        False,
        alias="displayQueryDetails",
        description=
        "Indicates if the generated email should include the query and search results preview (which could include PII). "
    )
    id: StrictStr = Field(..., description="The scheduled search ID.")
    owner: ScheduledSearchAllOfOwner = Field(...)
    owner_id: StrictStr = Field(
        ...,
        alias="ownerId",
        description=
        "The ID of the scheduled search owner.  Please use the `id` in the `owner` object instead. "
    )
    __properties = [
        "name", "description", "savedSearchId", "created", "modified",
        "schedule", "recipients", "enabled", "emailEmptyResults",
        "displayQueryDetails", "id", "owner", "ownerId"
    ]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ScheduledSearch:
        """Create an instance of ScheduledSearch from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                              "created",
                              "modified",
                              "id",
                              "owner_id",
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of schedule
        if self.schedule:
            _dict['schedule'] = self.schedule.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in recipients (list)
        _items = []
        if self.recipients:
            for _item in self.recipients:
                if _item:
                    _items.append(_item.to_dict())
            _dict['recipients'] = _items
        # override the default output from pydantic by calling `to_dict()` of owner
        if self.owner:
            _dict['owner'] = self.owner.to_dict()
        # set to None if name (nullable) is None
        # and __fields_set__ contains the field
        if self.name is None and "name" in self.__fields_set__:
            _dict['name'] = None

        # set to None if description (nullable) is None
        # and __fields_set__ contains the field
        if self.description is None and "description" in self.__fields_set__:
            _dict['description'] = None

        # set to None if created (nullable) is None
        # and __fields_set__ contains the field
        if self.created is None and "created" in self.__fields_set__:
            _dict['created'] = None

        # set to None if modified (nullable) is None
        # and __fields_set__ contains the field
        if self.modified is None and "modified" in self.__fields_set__:
            _dict['modified'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ScheduledSearch:
        """Create an instance of ScheduledSearch from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ScheduledSearch.parse_obj(obj)

        _obj = ScheduledSearch.parse_obj({
            "name":
            obj.get("name"),
            "description":
            obj.get("description"),
            "saved_search_id":
            obj.get("savedSearchId"),
            "created":
            obj.get("created"),
            "modified":
            obj.get("modified"),
            "schedule":
            Schedule1.from_dict(obj.get("schedule"))
            if obj.get("schedule") is not None else None,
            "recipients": [
                SearchScheduleRecipientsInner.from_dict(_item)
                for _item in obj.get("recipients")
            ] if obj.get("recipients") is not None else None,
            "enabled":
            obj.get("enabled") if obj.get("enabled") is not None else False,
            "email_empty_results":
            obj.get("emailEmptyResults")
            if obj.get("emailEmptyResults") is not None else False,
            "display_query_details":
            obj.get("displayQueryDetails")
            if obj.get("displayQueryDetails") is not None else False,
            "id":
            obj.get("id"),
            "owner":
            ScheduledSearchAllOfOwner.from_dict(obj.get("owner"))
            if obj.get("owner") is not None else None,
            "owner_id":
            obj.get("ownerId")
        })
        return _obj
