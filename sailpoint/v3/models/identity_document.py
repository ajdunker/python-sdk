# coding: utf-8

"""
    IdentityNow V3 API

    Use these APIs to interact with the IdentityNow platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

    The version of the OpenAPI document: 3.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictBool, StrictInt, StrictStr
from pydantic import Field
from sailpoint.v3.models.app import App
from sailpoint.v3.models.base_account import BaseAccount
from sailpoint.v3.models.display_reference import DisplayReference
from sailpoint.v3.models.document_type import DocumentType
from sailpoint.v3.models.identity_access import IdentityAccess
from sailpoint.v3.models.owns import Owns
from sailpoint.v3.models.processing_details import ProcessingDetails
from sailpoint.v3.models.reference import Reference
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self


class IdentityDocument(BaseModel):
    """
    Identity
    """

  # noqa: E501
    id: StrictStr = Field(
        description="The unique ID of the referenced object.")
    name: StrictStr = Field(
        description="The human readable name of the referenced object.")
    type: DocumentType = Field(alias="_type")
    display_name: Optional[StrictStr] = Field(
        default=None,
        description="The display name of the identity",
        alias="displayName")
    first_name: Optional[StrictStr] = Field(
        default=None,
        description="The first name of the identity",
        alias="firstName")
    last_name: Optional[StrictStr] = Field(
        default=None,
        description="The last name of the identity",
        alias="lastName")
    email: Optional[StrictStr] = Field(
        default=None, description="The identity's primary email address")
    created: Optional[datetime] = Field(
        default=None, description="A date-time in ISO-8601 format")
    modified: Optional[datetime] = Field(
        default=None, description="A date-time in ISO-8601 format")
    synced: Optional[datetime] = Field(
        default=None, description="A date-time in ISO-8601 format")
    phone: Optional[StrictStr] = Field(
        default=None, description="The phone number of the identity")
    inactive: Optional[StrictBool] = Field(
        default=None, description="Indicates if the identity is inactive")
    protected: Optional[StrictBool] = None
    status: Optional[StrictStr] = Field(
        default=None, description="The identity's status in SailPoint")
    employee_number: Optional[StrictStr] = Field(default=None,
                                                 alias="employeeNumber")
    manager: Optional[DisplayReference] = None
    is_manager: Optional[StrictBool] = Field(
        default=None,
        description=
        "Indicates if this identity is a manager of other identities",
        alias="isManager")
    identity_profile: Optional[Reference] = Field(default=None,
                                                  alias="identityProfile")
    source: Optional[Reference] = None
    attributes: Optional[Dict[str, Any]] = Field(
        default=None, description="a map or dictionary of key/value pairs")
    processing_state: Optional[StrictStr] = Field(default=None,
                                                  alias="processingState")
    processing_details: Optional[ProcessingDetails] = Field(
        default=None, alias="processingDetails")
    accounts: Optional[List[BaseAccount]] = Field(
        default=None,
        description="List of accounts associated with the identity")
    account_count: Optional[StrictInt] = Field(
        default=None,
        description="Number of accounts associated with the identity",
        alias="accountCount")
    apps: Optional[List[App]] = Field(
        default=None,
        description="The list of applications the identity has access to")
    app_count: Optional[StrictInt] = Field(
        default=None,
        description="The number of applications the identity has access to",
        alias="appCount")
    access: Optional[List[IdentityAccess]] = Field(
        default=None,
        description="The list of access items assigned to the identity")
    access_count: Optional[StrictInt] = Field(
        default=None,
        description="The number of access items assigned to the identity",
        alias="accessCount")
    access_profile_count: Optional[StrictInt] = Field(
        default=None,
        description="The number of access profiles assigned to the identity",
        alias="accessProfileCount")
    entitlement_count: Optional[StrictInt] = Field(
        default=None,
        description="The number of entitlements assigned to the identity",
        alias="entitlementCount")
    role_count: Optional[StrictInt] = Field(
        default=None,
        description="The number of roles assigned to the identity",
        alias="roleCount")
    owns: Optional[Owns] = None
    tags: Optional[List[StrictStr]] = None
    __properties: ClassVar[List[str]] = [
        "id", "name", "_type", "displayName", "firstName", "lastName", "email",
        "created", "modified", "synced", "phone", "inactive", "protected",
        "status", "employeeNumber", "manager", "isManager", "identityProfile",
        "source", "attributes", "processingState", "processingDetails",
        "accounts", "accountCount", "apps", "appCount", "access",
        "accessCount", "accessProfileCount", "entitlementCount", "roleCount",
        "owns", "tags"
    ]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of IdentityDocument from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={},
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of manager
        if self.manager:
            _dict['manager'] = self.manager.to_dict()
        # override the default output from pydantic by calling `to_dict()` of identity_profile
        if self.identity_profile:
            _dict['identityProfile'] = self.identity_profile.to_dict()
        # override the default output from pydantic by calling `to_dict()` of source
        if self.source:
            _dict['source'] = self.source.to_dict()
        # override the default output from pydantic by calling `to_dict()` of processing_details
        if self.processing_details:
            _dict['processingDetails'] = self.processing_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in accounts (list)
        _items = []
        if self.accounts:
            for _item in self.accounts:
                if _item:
                    _items.append(_item.to_dict())
            _dict['accounts'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in apps (list)
        _items = []
        if self.apps:
            for _item in self.apps:
                if _item:
                    _items.append(_item.to_dict())
            _dict['apps'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in access (list)
        _items = []
        if self.access:
            for _item in self.access:
                if _item:
                    _items.append(_item.to_dict())
            _dict['access'] = _items
        # override the default output from pydantic by calling `to_dict()` of owns
        if self.owns:
            _dict['owns'] = self.owns.to_dict()
        # set to None if created (nullable) is None
        # and model_fields_set contains the field
        if self.created is None and "created" in self.model_fields_set:
            _dict['created'] = None

        # set to None if modified (nullable) is None
        # and model_fields_set contains the field
        if self.modified is None and "modified" in self.model_fields_set:
            _dict['modified'] = None

        # set to None if synced (nullable) is None
        # and model_fields_set contains the field
        if self.synced is None and "synced" in self.model_fields_set:
            _dict['synced'] = None

        # set to None if processing_state (nullable) is None
        # and model_fields_set contains the field
        if self.processing_state is None and "processing_state" in self.model_fields_set:
            _dict['processingState'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of IdentityDocument from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id":
            obj.get("id"),
            "name":
            obj.get("name"),
            "_type":
            obj.get("_type"),
            "displayName":
            obj.get("displayName"),
            "firstName":
            obj.get("firstName"),
            "lastName":
            obj.get("lastName"),
            "email":
            obj.get("email"),
            "created":
            obj.get("created"),
            "modified":
            obj.get("modified"),
            "synced":
            obj.get("synced"),
            "phone":
            obj.get("phone"),
            "inactive":
            obj.get("inactive"),
            "protected":
            obj.get("protected"),
            "status":
            obj.get("status"),
            "employeeNumber":
            obj.get("employeeNumber"),
            "manager":
            DisplayReference.from_dict(obj.get("manager"))
            if obj.get("manager") is not None else None,
            "isManager":
            obj.get("isManager"),
            "identityProfile":
            Reference.from_dict(obj.get("identityProfile"))
            if obj.get("identityProfile") is not None else None,
            "source":
            Reference.from_dict(obj.get("source"))
            if obj.get("source") is not None else None,
            "attributes":
            obj.get("attributes"),
            "processingState":
            obj.get("processingState"),
            "processingDetails":
            ProcessingDetails.from_dict(obj.get("processingDetails"))
            if obj.get("processingDetails") is not None else None,
            "accounts":
            [BaseAccount.from_dict(_item) for _item in obj.get("accounts")]
            if obj.get("accounts") is not None else None,
            "accountCount":
            obj.get("accountCount"),
            "apps": [App.from_dict(_item) for _item in obj.get("apps")]
            if obj.get("apps") is not None else None,
            "appCount":
            obj.get("appCount"),
            "access":
            [IdentityAccess.from_dict(_item) for _item in obj.get("access")]
            if obj.get("access") is not None else None,
            "accessCount":
            obj.get("accessCount"),
            "accessProfileCount":
            obj.get("accessProfileCount"),
            "entitlementCount":
            obj.get("entitlementCount"),
            "roleCount":
            obj.get("roleCount"),
            "owns":
            Owns.from_dict(obj.get("owns"))
            if obj.get("owns") is not None else None,
            "tags":
            obj.get("tags")
        })
        return _obj
