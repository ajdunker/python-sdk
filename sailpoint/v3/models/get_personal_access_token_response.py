# coding: utf-8

"""
    IdentityNow V3 API

    Use these APIs to interact with the IdentityNow platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

    The version of the OpenAPI document: 3.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist
from v3.models.base_reference_dto import BaseReferenceDto


class GetPersonalAccessTokenResponse(BaseModel):
    """
    GetPersonalAccessTokenResponse
    """
    id: StrictStr = Field(
        ...,
        description=
        "The ID of the personal access token (to be used as the username for Basic Auth)."
    )
    name: StrictStr = Field(
        ...,
        description=
        "The name of the personal access token. Cannot be the same as other personal access tokens owned by a user."
    )
    scope: Optional[conlist(StrictStr)] = Field(
        ..., description="Scopes of the personal  access token.")
    owner: BaseReferenceDto = Field(...)
    created: datetime = Field(
        ...,
        description=
        "The date and time, down to the millisecond, when this personal access token was created."
    )
    last_used: Optional[datetime] = Field(
        None,
        alias="lastUsed",
        description=
        "The date and time, down to the millisecond, when this personal access token was last used to generate an access token. This timestamp does not get updated on every PAT usage, but only once a day. This property can be useful for identifying which PATs are no longer actively used and can be removed."
    )
    __properties = ["id", "name", "scope", "owner", "created", "lastUsed"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> GetPersonalAccessTokenResponse:
        """Create an instance of GetPersonalAccessTokenResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of owner
        if self.owner:
            _dict['owner'] = self.owner.to_dict()
        # set to None if scope (nullable) is None
        # and __fields_set__ contains the field
        if self.scope is None and "scope" in self.__fields_set__:
            _dict['scope'] = None

        # set to None if last_used (nullable) is None
        # and __fields_set__ contains the field
        if self.last_used is None and "last_used" in self.__fields_set__:
            _dict['lastUsed'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> GetPersonalAccessTokenResponse:
        """Create an instance of GetPersonalAccessTokenResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return GetPersonalAccessTokenResponse.parse_obj(obj)

        _obj = GetPersonalAccessTokenResponse.parse_obj({
            "id":
            obj.get("id"),
            "name":
            obj.get("name"),
            "scope":
            obj.get("scope"),
            "owner":
            BaseReferenceDto.from_dict(obj.get("owner"))
            if obj.get("owner") is not None else None,
            "created":
            obj.get("created"),
            "last_used":
            obj.get("lastUsed")
        })
        return _obj
