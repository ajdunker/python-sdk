# coding: utf-8

"""
    IdentityNow V3 API

    Use these APIs to interact with the IdentityNow platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

    The version of the OpenAPI document: 3.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist
from v3.models.identity_attribute import IdentityAttribute
from v3.models.identity_reference import IdentityReference


class PublicIdentity(BaseModel):
    """
    Details about a public identity  # noqa: E501
    """
    id: Optional[StrictStr] = Field(None, description="Identity id")
    name: Optional[StrictStr] = Field(
        None, description="Human-readable display name of identity.")
    alias: Optional[StrictStr] = Field(
        None, description="Alternate unique identifier for the identity.")
    email: Optional[StrictStr] = Field(
        None, description="Email address of identity.")
    status: Optional[StrictStr] = Field(
        None, description="The lifecycle status for the identity")
    manager: Optional[IdentityReference] = None
    attributes: Optional[conlist(IdentityAttribute)] = Field(
        None, description="The public identity attributes of the identity")
    __properties = [
        "id", "name", "alias", "email", "status", "manager", "attributes"
    ]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PublicIdentity:
        """Create an instance of PublicIdentity from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of manager
        if self.manager:
            _dict['manager'] = self.manager.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in attributes (list)
        _items = []
        if self.attributes:
            for _item in self.attributes:
                if _item:
                    _items.append(_item.to_dict())
            _dict['attributes'] = _items
        # set to None if email (nullable) is None
        # and __fields_set__ contains the field
        if self.email is None and "email" in self.__fields_set__:
            _dict['email'] = None

        # set to None if status (nullable) is None
        # and __fields_set__ contains the field
        if self.status is None and "status" in self.__fields_set__:
            _dict['status'] = None

        # set to None if manager (nullable) is None
        # and __fields_set__ contains the field
        if self.manager is None and "manager" in self.__fields_set__:
            _dict['manager'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PublicIdentity:
        """Create an instance of PublicIdentity from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return PublicIdentity.parse_obj(obj)

        _obj = PublicIdentity.parse_obj({
            "id":
            obj.get("id"),
            "name":
            obj.get("name"),
            "alias":
            obj.get("alias"),
            "email":
            obj.get("email"),
            "status":
            obj.get("status"),
            "manager":
            IdentityReference.from_dict(obj.get("manager"))
            if obj.get("manager") is not None else None,
            "attributes": [
                IdentityAttribute.from_dict(_item)
                for _item in obj.get("attributes")
            ] if obj.get("attributes") is not None else None
        })
        return _obj
