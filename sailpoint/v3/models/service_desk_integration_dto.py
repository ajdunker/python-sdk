# coding: utf-8

"""
    IdentityNow V3 API

    Use these APIs to interact with the IdentityNow platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

    The version of the OpenAPI document: 3.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, Dict, List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist
from v3.models.before_provisioning_rule_dto import BeforeProvisioningRuleDto
from v3.models.provisioning_config import ProvisioningConfig
from v3.models.service_desk_integration_dto_all_of_owner_ref import ServiceDeskIntegrationDtoAllOfOwnerRef
from v3.models.source_cluster_dto import SourceClusterDto

class ServiceDeskIntegrationDto(BaseModel):
    """
    ServiceDeskIntegrationDto
    """
    id: Optional[StrictStr] = Field(None, description="System-generated unique ID of the Object")
    name: StrictStr = Field(..., description="Name of the Object")
    created: Optional[datetime] = Field(None, description="Creation date of the Object")
    modified: Optional[datetime] = Field(None, description="Last modification date of the Object")
    description: StrictStr = Field(..., description="Description of the Service Desk integration")
    type: StrictStr = Field(..., description="Service Desk integration types  - ServiceNowSDIM - ServiceNow ")
    owner_ref: Optional[ServiceDeskIntegrationDtoAllOfOwnerRef] = Field(None, alias="ownerRef")
    cluster_ref: Optional[SourceClusterDto] = Field(None, alias="clusterRef")
    cluster: Optional[StrictStr] = Field(None, description="ID of the cluster for the Service Desk integration (replaced by clusterRef, retained for backward compatibility).")
    managed_sources: Optional[conlist(StrictStr)] = Field(None, alias="managedSources", description="Source IDs for the Service Desk integration (replaced by provisioningConfig.managedSResourceRefs, but retained here for backward compatibility).")
    provisioning_config: Optional[ProvisioningConfig] = Field(None, alias="provisioningConfig")
    attributes: Dict[str, Any] = Field(..., description="Attributes of the Service Desk integration.  Validation constraints enforced by the implementation.")
    before_provisioning_rule: Optional[BeforeProvisioningRuleDto] = Field(None, alias="beforeProvisioningRule")
    __properties = ["id", "name", "created", "modified", "description", "type", "ownerRef", "clusterRef", "cluster", "managedSources", "provisioningConfig", "attributes", "beforeProvisioningRule"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ServiceDeskIntegrationDto:
        """Create an instance of ServiceDeskIntegrationDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "id",
                            "created",
                            "modified",
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of owner_ref
        if self.owner_ref:
            _dict['ownerRef'] = self.owner_ref.to_dict()
        # override the default output from pydantic by calling `to_dict()` of cluster_ref
        if self.cluster_ref:
            _dict['clusterRef'] = self.cluster_ref.to_dict()
        # override the default output from pydantic by calling `to_dict()` of provisioning_config
        if self.provisioning_config:
            _dict['provisioningConfig'] = self.provisioning_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of before_provisioning_rule
        if self.before_provisioning_rule:
            _dict['beforeProvisioningRule'] = self.before_provisioning_rule.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ServiceDeskIntegrationDto:
        """Create an instance of ServiceDeskIntegrationDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ServiceDeskIntegrationDto.parse_obj(obj)

        _obj = ServiceDeskIntegrationDto.parse_obj({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "created": obj.get("created"),
            "modified": obj.get("modified"),
            "description": obj.get("description"),
            "type": obj.get("type") if obj.get("type") is not None else 'ServiceNowSDIM',
            "owner_ref": ServiceDeskIntegrationDtoAllOfOwnerRef.from_dict(obj.get("ownerRef")) if obj.get("ownerRef") is not None else None,
            "cluster_ref": SourceClusterDto.from_dict(obj.get("clusterRef")) if obj.get("clusterRef") is not None else None,
            "cluster": obj.get("cluster"),
            "managed_sources": obj.get("managedSources"),
            "provisioning_config": ProvisioningConfig.from_dict(obj.get("provisioningConfig")) if obj.get("provisioningConfig") is not None else None,
            "attributes": obj.get("attributes"),
            "before_provisioning_rule": BeforeProvisioningRuleDto.from_dict(obj.get("beforeProvisioningRule")) if obj.get("beforeProvisioningRule") is not None else None
        })
        return _obj


