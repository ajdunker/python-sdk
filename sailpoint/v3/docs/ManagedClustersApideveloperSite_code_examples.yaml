- path: /managed-clusters
  method: POST
  xCodeSample:
    - lang: Python
      label: SDK_tools/sdk/python/v3/methods/managed-clusters#create-managed-cluster
      source: |
        from sailpoint.v3.api.managed_clusters_api import ManagedClustersApi
        from sailpoint.v3.api_client import ApiClient
        from sailpoint.v3.models.managed_cluster import ManagedCluster
        from sailpoint.v3.models.managed_cluster_request import ManagedClusterRequest
        from pprint import pprint
        from sailpoint.configuration import Configuration
        configuration = Configuration()


        with ApiClient(configuration) as api_client:
        managed_cluster_request = '''{
          "configuration" : {
            "clusterExternalId" : "externalId",
            "ccgVersion" : "77.0.0"
          },
          "name" : "Managed Cluster Name",
          "description" : "A short description of the managed cluster.",
          "type" : "idn"
        }''' # ManagedClusterRequest | 
        try:
            # Create Create Managed Cluster
            new_managed_cluster_request = ManagedClusterRequest.from_json(managed_cluster_request)
            results = ManagedClustersApi(api_client).create_managed_cluster(managed_cluster_request=new_managed_cluster_request)
            # Below is a request that includes all optional parameters
            # results = ManagedClustersApi(api_client).create_managed_cluster(new_managed_cluster_request)
            print("The response of ManagedClustersApi->create_managed_cluster:\n")
            pprint(results)
        except Exception as e:
            print("Exception when calling ManagedClustersApi->create_managed_cluster: %s\n" % e)
- path: /managed-clusters/{id}
  method: DELETE
  xCodeSample:
    - lang: Python
      label: SDK_tools/sdk/python/v3/methods/managed-clusters#delete-managed-cluster
      source: |
        from sailpoint.v3.api.managed_clusters_api import ManagedClustersApi
        from sailpoint.v3.api_client import ApiClient
        from pprint import pprint
        from sailpoint.configuration import Configuration
        configuration = Configuration()


        with ApiClient(configuration) as api_client:
        id = '2c9180897de347a2017de8859e8c5039' # str | Managed cluster ID. # str | Managed cluster ID.
        remove_clients = False # bool | Flag to determine the need to delete a cluster with clients. (optional) (default to False) # bool | Flag to determine the need to delete a cluster with clients. (optional) (default to False)
        try:
            # Delete Managed Cluster
            
            ManagedClustersApi(api_client).delete_managed_cluster(id=id)
            # Below is a request that includes all optional parameters
            # ManagedClustersApi(api_client).delete_managed_cluster(id, remove_clients)
        except Exception as e:
            print("Exception when calling ManagedClustersApi->delete_managed_cluster: %s\n" % e)
- path: /managed-clusters/{id}/log-config
  method: GET
  xCodeSample:
    - lang: Python
      label: SDK_tools/sdk/python/v3/methods/managed-clusters#get-client-log-configuration
      source: |
        from sailpoint.v3.api.managed_clusters_api import ManagedClustersApi
        from sailpoint.v3.api_client import ApiClient
        from sailpoint.v3.models.client_log_configuration import ClientLogConfiguration
        from pprint import pprint
        from sailpoint.configuration import Configuration
        configuration = Configuration()


        with ApiClient(configuration) as api_client:
        id = '2b838de9-db9b-abcf-e646-d4f274ad4238' # str | ID of managed cluster to get log configuration for. # str | ID of managed cluster to get log configuration for.
        try:
            # Get Managed Cluster Log Configuration
            
            results = ManagedClustersApi(api_client).get_client_log_configuration(id=id)
            # Below is a request that includes all optional parameters
            # results = ManagedClustersApi(api_client).get_client_log_configuration(id)
            print("The response of ManagedClustersApi->get_client_log_configuration:\n")
            pprint(results)
        except Exception as e:
            print("Exception when calling ManagedClustersApi->get_client_log_configuration: %s\n" % e)
- path: /managed-clusters/{id}
  method: GET
  xCodeSample:
    - lang: Python
      label: SDK_tools/sdk/python/v3/methods/managed-clusters#get-managed-cluster
      source: |
        from sailpoint.v3.api.managed_clusters_api import ManagedClustersApi
        from sailpoint.v3.api_client import ApiClient
        from sailpoint.v3.models.managed_cluster import ManagedCluster
        from pprint import pprint
        from sailpoint.configuration import Configuration
        configuration = Configuration()


        with ApiClient(configuration) as api_client:
        id = '2c9180897de347a2017de8859e8c5039' # str | Managed cluster ID. # str | Managed cluster ID.
        try:
            # Get Managed Cluster
            
            results = ManagedClustersApi(api_client).get_managed_cluster(id=id)
            # Below is a request that includes all optional parameters
            # results = ManagedClustersApi(api_client).get_managed_cluster(id)
            print("The response of ManagedClustersApi->get_managed_cluster:\n")
            pprint(results)
        except Exception as e:
            print("Exception when calling ManagedClustersApi->get_managed_cluster: %s\n" % e)
- path: /managed-clusters
  method: GET
  xCodeSample:
    - lang: Python
      label: SDK_tools/sdk/python/v3/methods/managed-clusters#get-managed-clusters
      source: |
        from sailpoint.v3.api.managed_clusters_api import ManagedClustersApi
        from sailpoint.v3.api_client import ApiClient
        from sailpoint.v3.models.managed_cluster import ManagedCluster
        from pprint import pprint
        from sailpoint.configuration import Configuration
        configuration = Configuration()


        with ApiClient(configuration) as api_client:
        offset = 0 # int | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0) # int | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0)
        limit = 250 # int | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250) # int | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250)
        count = False # bool | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to False) # bool | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to False)
        filters = 'operational eq \"operation\"' # str | Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **operational**: *eq* (optional) # str | Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **operational**: *eq* (optional)
        try:
            # Get Managed Clusters
            
            results = ManagedClustersApi(api_client).get_managed_clusters()
            # Below is a request that includes all optional parameters
            # results = ManagedClustersApi(api_client).get_managed_clusters(offset, limit, count, filters)
            print("The response of ManagedClustersApi->get_managed_clusters:\n")
            pprint(results)
        except Exception as e:
            print("Exception when calling ManagedClustersApi->get_managed_clusters: %s\n" % e)
- path: /managed-clusters/{id}/log-config
  method: PUT
  xCodeSample:
    - lang: Python
      label: SDK_tools/sdk/python/v3/methods/managed-clusters#put-client-log-configuration
      source: |
        from sailpoint.v3.api.managed_clusters_api import ManagedClustersApi
        from sailpoint.v3.api_client import ApiClient
        from sailpoint.v3.models.client_log_configuration import ClientLogConfiguration
        from sailpoint.v3.models.put_client_log_configuration_request import PutClientLogConfigurationRequest
        from pprint import pprint
        from sailpoint.configuration import Configuration
        configuration = Configuration()


        with ApiClient(configuration) as api_client:
        id = '2b838de9-db9b-abcf-e646-d4f274ad4238' # str | ID of the managed cluster to update the log configuration for. # str | ID of the managed cluster to update the log configuration for.
        put_client_log_configuration_request = '''sailpoint.v3.PutClientLogConfigurationRequest()''' # PutClientLogConfigurationRequest | Client log configuration for the given managed cluster.
        try:
            # Update Managed Cluster Log Configuration
            new_put_client_log_configuration_request = PutClientLogConfigurationRequest.from_json(put_client_log_configuration_request)
            results = ManagedClustersApi(api_client).put_client_log_configuration(id=id, put_client_log_configuration_request=new_put_client_log_configuration_request)
            # Below is a request that includes all optional parameters
            # results = ManagedClustersApi(api_client).put_client_log_configuration(id, new_put_client_log_configuration_request)
            print("The response of ManagedClustersApi->put_client_log_configuration:\n")
            pprint(results)
        except Exception as e:
            print("Exception when calling ManagedClustersApi->put_client_log_configuration: %s\n" % e)
- path: /managed-clusters/{id}
  method: PATCH
  xCodeSample:
    - lang: Python
      label: SDK_tools/sdk/python/v3/methods/managed-clusters#update-managed-cluster
      source: |
        from sailpoint.v3.api.managed_clusters_api import ManagedClustersApi
        from sailpoint.v3.api_client import ApiClient
        from sailpoint.v3.models.json_patch_operation import JsonPatchOperation
        from sailpoint.v3.models.managed_cluster import ManagedCluster
        from pprint import pprint
        from sailpoint.configuration import Configuration
        configuration = Configuration()


        with ApiClient(configuration) as api_client:
        id = '2c9180897de347a2017de8859e8c5039' # str | Managed cluster ID. # str | Managed cluster ID.
        json_patch_operation = '''[sailpoint.v3.JsonPatchOperation()]''' # List[JsonPatchOperation] | JSONPatch payload used to update the object.
        try:
            # Update Managed Cluster
            new_json_patch_operation = JsonPatchOperation.from_json(json_patch_operation)
            results = ManagedClustersApi(api_client).update_managed_cluster(id=id, json_patch_operation=new_json_patch_operation)
            # Below is a request that includes all optional parameters
            # results = ManagedClustersApi(api_client).update_managed_cluster(id, new_json_patch_operation)
            print("The response of ManagedClustersApi->update_managed_cluster:\n")
            pprint(results)
        except Exception as e:
            print("Exception when calling ManagedClustersApi->update_managed_cluster: %s\n" % e)
