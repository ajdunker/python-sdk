- path: /reports/{id}/cancel
  method: POST
  xCodeSample:
    - lang: Python
      label: SDK_tools/sdk/python/v3/methods/reports-data-extraction#cancel-report
      source: |
        from sailpoint.v3.api.reports_data_extraction_api import ReportsDataExtractionApi
        from sailpoint.v3.api_client import ApiClient
        from sailpoint.configuration import Configuration
        configuration = Configuration()


        with ApiClient(configuration) as api_client:
          id = 'a1ed223247144cc29d23c632624b4767' # str | ID of the running Report to cancel # str | ID of the running Report to cancel
          try:
              # Cancel Report
              
              ReportsDataExtractionApi(api_client).cancel_report(id=id)
              # Below is a request that includes all optional parameters
              # ReportsDataExtractionApi(api_client).cancel_report(id)
          except Exception as e:
              print("Exception when calling ReportsDataExtractionApi->cancel_report: %s\n" % e)
- path: /reports/{taskResultId}
  method: GET
  xCodeSample:
    - lang: Python
      label: SDK_tools/sdk/python/v3/methods/reports-data-extraction#get-report
      source: |
        from sailpoint.v3.api.reports_data_extraction_api import ReportsDataExtractionApi
        from sailpoint.v3.api_client import ApiClient
        from sailpoint.configuration import Configuration
        configuration = Configuration()


        with ApiClient(configuration) as api_client:
          task_result_id = 'ef38f94347e94562b5bb8424a56397d8' # str | Unique identifier of the task result which handled report # str | Unique identifier of the task result which handled report
          file_format = 'csv' # str | Output format of the requested report file # str | Output format of the requested report file
          name = 'Identities Details Report' # str | preferred Report file name, by default will be used report name from task result. (optional) # str | preferred Report file name, by default will be used report name from task result. (optional)
          auditable = False # bool | Enables auditing for current report download. Will create an audit event and sent it to the REPORT cloud-audit kafka topic.  Event will be created if there is any result present by requested taskResultId. (optional) (default to False) # bool | Enables auditing for current report download. Will create an audit event and sent it to the REPORT cloud-audit kafka topic.  Event will be created if there is any result present by requested taskResultId. (optional) (default to False)
          try:
              # Get Report File
              
              results = ReportsDataExtractionApi(api_client).get_report(task_result_id=task_result_id, file_format=file_format)
              # Below is a request that includes all optional parameters
              # results = ReportsDataExtractionApi(api_client).get_report(task_result_id, file_format, name, auditable)
              print("The response of ReportsDataExtractionApi->get_report:\n")
              print(results.model_dump_json(by_alias=True, indent=4))
          except Exception as e:
              print("Exception when calling ReportsDataExtractionApi->get_report: %s\n" % e)
- path: /reports/{taskResultId}/result
  method: GET
  xCodeSample:
    - lang: Python
      label: SDK_tools/sdk/python/v3/methods/reports-data-extraction#get-report-result
      source: |
        from sailpoint.v3.api.reports_data_extraction_api import ReportsDataExtractionApi
        from sailpoint.v3.api_client import ApiClient
        from sailpoint.v3.models.report_results import ReportResults
        from sailpoint.configuration import Configuration
        configuration = Configuration()


        with ApiClient(configuration) as api_client:
          task_result_id = 'ef38f94347e94562b5bb8424a56397d8' # str | Unique identifier of the task result which handled report # str | Unique identifier of the task result which handled report
          completed = False # bool | state of task result to apply ordering when results are fetching from the DB (optional) (default to False) # bool | state of task result to apply ordering when results are fetching from the DB (optional) (default to False)
          try:
              # Get Report Result
              
              results = ReportsDataExtractionApi(api_client).get_report_result(task_result_id=task_result_id)
              # Below is a request that includes all optional parameters
              # results = ReportsDataExtractionApi(api_client).get_report_result(task_result_id, completed)
              print("The response of ReportsDataExtractionApi->get_report_result:\n")
              print(results.model_dump_json(by_alias=True, indent=4))
          except Exception as e:
              print("Exception when calling ReportsDataExtractionApi->get_report_result: %s\n" % e)
- path: /reports/run
  method: POST
  xCodeSample:
    - lang: Python
      label: SDK_tools/sdk/python/v3/methods/reports-data-extraction#start-report
      source: |
        from sailpoint.v3.api.reports_data_extraction_api import ReportsDataExtractionApi
        from sailpoint.v3.api_client import ApiClient
        from sailpoint.v3.models.report_details import ReportDetails
        from sailpoint.v3.models.task_result_details import TaskResultDetails
        from sailpoint.configuration import Configuration
        configuration = Configuration()


        with ApiClient(configuration) as api_client:
          report_details = '''{
          "reportType" : "ACCOUNTS",
          "arguments" : {
            "application" : "2c9180897e7742b2017e781782f705b9",
            "sourceName" : "Active Directory"
          }
        }''' # ReportDetails | 
          try:
              # Run Report
              new_report_details = ReportDetails.from_json(report_details)
              results = ReportsDataExtractionApi(api_client).start_report(report_details=new_report_details)
              # Below is a request that includes all optional parameters
              # results = ReportsDataExtractionApi(api_client).start_report(new_report_details)
              print("The response of ReportsDataExtractionApi->start_report:\n")
              print(results.model_dump_json(by_alias=True, indent=4))
          except Exception as e:
              print("Exception when calling ReportsDataExtractionApi->start_report: %s\n" % e)
