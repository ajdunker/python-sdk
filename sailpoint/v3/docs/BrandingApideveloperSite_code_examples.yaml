- path: /brandings
  method: POST
  xCodeSample:
    - lang: Python
      label: SDK_tools/sdk/python/v3/methods/branding#create-branding-item
      source: |
        from sailpoint.v3.api.branding_api import BrandingApi
        from sailpoint.v3.api_client import ApiClient
        from sailpoint.v3.models.branding_item import BrandingItem
        from sailpoint.configuration import Configuration
        configuration = Configuration()


        with ApiClient(configuration) as api_client:
          name = 'name_example' # str | name of branding item # str | name of branding item
          product_name = 'product_name_example' # str | product name # str | product name
          action_button_color = 'action_button_color_example' # str | hex value of color for action button (optional) # str | hex value of color for action button (optional)
          active_link_color = 'active_link_color_example' # str | hex value of color for link (optional) # str | hex value of color for link (optional)
          navigation_color = 'navigation_color_example' # str | hex value of color for navigation bar (optional) # str | hex value of color for navigation bar (optional)
          email_from_address = 'email_from_address_example' # str | email from address (optional) # str | email from address (optional)
          login_informational_message = 'login_informational_message_example' # str | login information message (optional) # str | login information message (optional)
          file_standard = None # bytearray | png file with logo (optional) # bytearray | png file with logo (optional)
          try:
              # Create a branding item
              
              results = BrandingApi(api_client).create_branding_item(name=name, product_name=product_name)
              # Below is a request that includes all optional parameters
              # results = BrandingApi(api_client).create_branding_item(name, product_name, action_button_color, active_link_color, navigation_color, email_from_address, login_informational_message, file_standard)
              print("The response of BrandingApi->create_branding_item:\n")
              print(results.model_dump_json(by_alias=True, indent=4))
          except Exception as e:
              print("Exception when calling BrandingApi->create_branding_item: %s\n" % e)
- path: /brandings/{name}
  method: DELETE
  xCodeSample:
    - lang: Python
      label: SDK_tools/sdk/python/v3/methods/branding#delete-branding
      source: |
        from sailpoint.v3.api.branding_api import BrandingApi
        from sailpoint.v3.api_client import ApiClient
        from sailpoint.configuration import Configuration
        configuration = Configuration()


        with ApiClient(configuration) as api_client:
          name = 'default' # str | The name of the branding item to be deleted # str | The name of the branding item to be deleted
          try:
              # Delete a branding item
              
              BrandingApi(api_client).delete_branding(name=name)
              # Below is a request that includes all optional parameters
              # BrandingApi(api_client).delete_branding(name)
          except Exception as e:
              print("Exception when calling BrandingApi->delete_branding: %s\n" % e)
- path: /brandings/{name}
  method: GET
  xCodeSample:
    - lang: Python
      label: SDK_tools/sdk/python/v3/methods/branding#get-branding
      source: |
        from sailpoint.v3.api.branding_api import BrandingApi
        from sailpoint.v3.api_client import ApiClient
        from sailpoint.v3.models.branding_item import BrandingItem
        from sailpoint.configuration import Configuration
        configuration = Configuration()


        with ApiClient(configuration) as api_client:
          name = 'default' # str | The name of the branding item to be retrieved # str | The name of the branding item to be retrieved
          try:
              # Get a branding item
              
              results = BrandingApi(api_client).get_branding(name=name)
              # Below is a request that includes all optional parameters
              # results = BrandingApi(api_client).get_branding(name)
              print("The response of BrandingApi->get_branding:\n")
              print(results.model_dump_json(by_alias=True, indent=4))
          except Exception as e:
              print("Exception when calling BrandingApi->get_branding: %s\n" % e)
- path: /brandings
  method: GET
  xCodeSample:
    - lang: Python
      label: SDK_tools/sdk/python/v3/methods/branding#get-branding-list
      source: |
        from sailpoint.v3.api.branding_api import BrandingApi
        from sailpoint.v3.api_client import ApiClient
        from sailpoint.v3.models.branding_item import BrandingItem
        from sailpoint.configuration import Configuration
        configuration = Configuration()


        with ApiClient(configuration) as api_client:
          try:
              # List of branding items
              
              results = BrandingApi(api_client).get_branding_list()
              # Below is a request that includes all optional parameters
              # results = BrandingApi(api_client).get_branding_list()
              print("The response of BrandingApi->get_branding_list:\n")
              print(results.model_dump_json(by_alias=True, indent=4))
          except Exception as e:
              print("Exception when calling BrandingApi->get_branding_list: %s\n" % e)
- path: /brandings/{name}
  method: PUT
  xCodeSample:
    - lang: Python
      label: SDK_tools/sdk/python/v3/methods/branding#set-branding-item
      source: |
        from sailpoint.v3.api.branding_api import BrandingApi
        from sailpoint.v3.api_client import ApiClient
        from sailpoint.v3.models.branding_item import BrandingItem
        from sailpoint.configuration import Configuration
        configuration = Configuration()


        with ApiClient(configuration) as api_client:
          name = 'default' # str | The name of the branding item to be retrieved # str | The name of the branding item to be retrieved
          name2 = 'name_example' # str | name of branding item # str | name of branding item
          product_name = 'product_name_example' # str | product name # str | product name
          action_button_color = 'action_button_color_example' # str | hex value of color for action button (optional) # str | hex value of color for action button (optional)
          active_link_color = 'active_link_color_example' # str | hex value of color for link (optional) # str | hex value of color for link (optional)
          navigation_color = 'navigation_color_example' # str | hex value of color for navigation bar (optional) # str | hex value of color for navigation bar (optional)
          email_from_address = 'email_from_address_example' # str | email from address (optional) # str | email from address (optional)
          login_informational_message = 'login_informational_message_example' # str | login information message (optional) # str | login information message (optional)
          file_standard = None # bytearray | png file with logo (optional) # bytearray | png file with logo (optional)
          try:
              # Update a branding item
              
              results = BrandingApi(api_client).set_branding_item(name=name, name2=name2, product_name=product_name)
              # Below is a request that includes all optional parameters
              # results = BrandingApi(api_client).set_branding_item(name, name2, product_name, action_button_color, active_link_color, navigation_color, email_from_address, login_informational_message, file_standard)
              print("The response of BrandingApi->set_branding_item:\n")
              print(results.model_dump_json(by_alias=True, indent=4))
          except Exception as e:
              print("Exception when calling BrandingApi->set_branding_item: %s\n" % e)
