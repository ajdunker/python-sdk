- path: /sources/{sourceId}/provisioning-policies
  method: POST
  xCodeSample:
    - lang: Python
      label: SDK_tools/sdk/python/v3/methods/sources#create-provisioning-policy
      source: |
        from sailpoint.v3.api.sources_api import SourcesApi
        from sailpoint.v3.api_client import ApiClient
        from sailpoint.v3.models.provisioning_policy_dto import ProvisioningPolicyDto
        from pprint import pprint
        from sailpoint.configuration import Configuration
        configuration = Configuration()


        with ApiClient(configuration) as api_client:
        source_id = '2c9180835d191a86015d28455b4a2329' # str | The Source id # str | The Source id
        provisioning_policy_dto = '''{
          "name" : "example provisioning policy for inactive identities",
          "description" : "this provisioning policy creates access based on an identity going inactive",
          "fields" : [ {
            "isRequired" : false,
            "transform" : {
              "type" : "rule",
              "attributes" : {
                "name" : "Create Unique LDAP Attribute"
              }
            },
            "isMultiValued" : false,
            "name" : "userName",
            "attributes" : {
              "template" : "${firstname}.${lastname}${uniqueCounter}",
              "cloudMaxUniqueChecks" : "50",
              "cloudMaxSize" : "20",
              "cloudRequired" : "true"
            },
            "type" : "string"
          }, {
            "isRequired" : false,
            "transform" : {
              "type" : "rule",
              "attributes" : {
                "name" : "Create Unique LDAP Attribute"
              }
            },
            "isMultiValued" : false,
            "name" : "userName",
            "attributes" : {
              "template" : "${firstname}.${lastname}${uniqueCounter}",
              "cloudMaxUniqueChecks" : "50",
              "cloudMaxSize" : "20",
              "cloudRequired" : "true"
            },
            "type" : "string"
          } ],
          "usageType" : "CREATE"
        }''' # ProvisioningPolicyDto | 
        try:
            # Create Provisioning Policy
            new_provisioning_policy_dto = ProvisioningPolicyDto.from_json(provisioning_policy_dto)
            results = SourcesApi(api_client).create_provisioning_policy(source_id=source_id, provisioning_policy_dto=new_provisioning_policy_dto)
            # Below is a request that includes all optional parameters
            # results = SourcesApi(api_client).create_provisioning_policy(source_id, new_provisioning_policy_dto)
            print("The response of SourcesApi->create_provisioning_policy:\n")
            pprint(results)
        except Exception as e:
            print("Exception when calling SourcesApi->create_provisioning_policy: %s\n" % e)
- path: /sources
  method: POST
  xCodeSample:
    - lang: Python
      label: SDK_tools/sdk/python/v3/methods/sources#create-source
      source: |
        from sailpoint.v3.api.sources_api import SourcesApi
        from sailpoint.v3.api_client import ApiClient
        from sailpoint.v3.models.source import Source
        from pprint import pprint
        from sailpoint.configuration import Configuration
        configuration = Configuration()


        with ApiClient(configuration) as api_client:
        source = '''{
          "cluster" : {
            "name" : "Corporate Cluster",
            "id" : "2c9180866166b5b0016167c32ef31a66",
            "type" : "CLUSTER"
          },
          "deleteThreshold" : 10,
          "connectorId" : "active-directory",
          "description" : "This is the corporate directory.",
          "type" : "OpenLDAP - Direct",
          "connectorClass" : "sailpoint.connector.LDAPConnector",
          "connectionType" : "file",
          "features" : [ "PROVISIONING", "NO_PERMISSIONS_PROVISIONING", "GROUPS_HAVE_MEMBERS" ],
          "passwordPolicies" : [ {
            "type" : "PASSWORD_POLICY",
            "id" : "2c9180855d191c59015d291ceb053980",
            "name" : "Corporate Password Policy"
          }, {
            "type" : "PASSWORD_POLICY",
            "id" : "2c9180855d191c59015d291ceb057777",
            "name" : "Vendor Password Policy"
          } ],
          "modified" : "2024-01-23T18:08:50.897Z",
          "id" : "2c91808568c529c60168cca6f90c1324",
          "connectorImplementationId" : "delimited-file",
          "managerCorrelationRule" : {
            "name" : "Example Rule",
            "id" : "2c918085708c274401708c2a8a760001",
            "type" : "RULE"
          },
          "owner" : {
            "name" : "MyName",
            "id" : "2c91808568c529c60168cca6f90c1313",
            "type" : "IDENTITY"
          },
          "managementWorkgroup" : {
            "name" : "My Management Workgroup",
            "id" : "2c91808568c529c60168cca6f90c2222",
            "type" : "GOVERNANCE_GROUP"
          },
          "accountCorrelationRule" : {
            "name" : "Example Rule",
            "id" : "2c918085708c274401708c2a8a760001",
            "type" : "RULE"
          },
          "authoritative" : false,
          "connectorAttributes" : {
            "healthCheckTimeout" : 30,
            "authSearchAttributes" : [ "cn", "uid", "mail" ]
          },
          "created" : "2022-02-08T14:50:03.827Z",
          "managerCorrelationMapping" : {
            "accountAttributeName" : "manager",
            "identityAttributeName" : "manager"
          },
          "credentialProviderEnabled" : false,
          "accountCorrelationConfig" : {
            "name" : "Directory [source-62867] Account Correlation",
            "id" : "2c9180855d191c59015d28583727245a",
            "type" : "ACCOUNT_CORRELATION_CONFIG"
          },
          "connector" : "active-directory",
          "healthy" : true,
          "schemas" : [ {
            "type" : "CONNECTOR_SCHEMA",
            "id" : "2c9180835d191a86015d28455b4b232a",
            "name" : "account"
          }, {
            "type" : "CONNECTOR_SCHEMA",
            "id" : "2c9180835d191a86015d28455b4b232b",
            "name" : "group"
          } ],
          "name" : "My Source",
          "connectorName" : "Active Directory",
          "category" : "CredentialProvider",
          "beforeProvisioningRule" : {
            "name" : "Example Rule",
            "id" : "2c918085708c274401708c2a8a760001",
            "type" : "RULE"
          },
          "status" : "SOURCE_STATE_HEALTHY",
          "since" : "2021-09-28T15:48:29.3801666300Z"
        }''' # Source | 
        provision_as_csv = false # bool | If this parameter is `true`, it configures the source as a Delimited File (CSV) source. Setting this to `true` will automatically set the `type` of the source to `DelimitedFile`.  You must use this query parameter to create a Delimited File source as you would in the UI.  If you don't set this query parameter and you attempt to set the `type` attribute directly, the request won't correctly generate the source.   (optional) # bool | If this parameter is `true`, it configures the source as a Delimited File (CSV) source. Setting this to `true` will automatically set the `type` of the source to `DelimitedFile`.  You must use this query parameter to create a Delimited File source as you would in the UI.  If you don't set this query parameter and you attempt to set the `type` attribute directly, the request won't correctly generate the source.   (optional)
        try:
            # Creates a source in IdentityNow.
            new_source = Source.from_json(source)
            results = SourcesApi(api_client).create_source(source=new_source)
            # Below is a request that includes all optional parameters
            # results = SourcesApi(api_client).create_source(new_source, provision_as_csv)
            print("The response of SourcesApi->create_source:\n")
            pprint(results)
        except Exception as e:
            print("Exception when calling SourcesApi->create_source: %s\n" % e)
- path: /sources/{sourceId}/schemas
  method: POST
  xCodeSample:
    - lang: Python
      label: SDK_tools/sdk/python/v3/methods/sources#create-source-schema
      source: |
        from sailpoint.v3.api.sources_api import SourcesApi
        from sailpoint.v3.api_client import ApiClient
        from sailpoint.v3.models.model_schema import ModelSchema
        from pprint import pprint
        from sailpoint.configuration import Configuration
        configuration = Configuration()


        with ApiClient(configuration) as api_client:
        source_id = '2c9180835d191a86015d28455b4a2329' # str | Source ID. # str | Source ID.
        model_schema = '''sailpoint.v3.ModelSchema()''' # ModelSchema | 
        try:
            # Create Schema on Source
            new_model_schema = ModelSchema.from_json(model_schema)
            results = SourcesApi(api_client).create_source_schema(source_id=source_id, model_schema=new_model_schema)
            # Below is a request that includes all optional parameters
            # results = SourcesApi(api_client).create_source_schema(source_id, new_model_schema)
            print("The response of SourcesApi->create_source_schema:\n")
            pprint(results)
        except Exception as e:
            print("Exception when calling SourcesApi->create_source_schema: %s\n" % e)
- path: /sources/{sourceId}/provisioning-policies/{usageType}
  method: DELETE
  xCodeSample:
    - lang: Python
      label: SDK_tools/sdk/python/v3/methods/sources#delete-provisioning-policy
      source: |
        from sailpoint.v3.api.sources_api import SourcesApi
        from sailpoint.v3.api_client import ApiClient
        from sailpoint.v3.models.usage_type import UsageType
        from pprint import pprint
        from sailpoint.configuration import Configuration
        configuration = Configuration()


        with ApiClient(configuration) as api_client:
        source_id = '2c9180835d191a86015d28455b4a2329' # str | The Source ID. # str | The Source ID.
        usage_type = sailpoint.v3.UsageType() # UsageType | The type of provisioning policy usage.  In IdentityNow, a source can support various provisioning operations. For example, when a joiner is added to a source, this may trigger both CREATE and UPDATE provisioning operations.  Each usage type is considered a provisioning policy.  A source can have any number of these provisioning policies defined.  These are the common usage types:  CREATE - This usage type relates to 'Create Account Profile', the provisioning template for the account to be created. For example, this would be used for a joiner on a source.   UPDATE - This usage type relates to 'Update Account Profile', the provisioning template for the 'Update' connector operations. For example, this would be used for an attribute sync on a source. ENABLE - This usage type relates to 'Enable Account Profile', the provisioning template for the account to be enabled. For example, this could be used for a joiner on a source once the joiner's account is created.  DISABLE - This usage type relates to 'Disable Account Profile', the provisioning template for the account to be disabled. For example, this could be used when a leaver is removed temporarily from a source.  You can use these four usage types for all your provisioning policy needs.  # UsageType | The type of provisioning policy usage.  In IdentityNow, a source can support various provisioning operations. For example, when a joiner is added to a source, this may trigger both CREATE and UPDATE provisioning operations.  Each usage type is considered a provisioning policy.  A source can have any number of these provisioning policies defined.  These are the common usage types:  CREATE - This usage type relates to 'Create Account Profile', the provisioning template for the account to be created. For example, this would be used for a joiner on a source.   UPDATE - This usage type relates to 'Update Account Profile', the provisioning template for the 'Update' connector operations. For example, this would be used for an attribute sync on a source. ENABLE - This usage type relates to 'Enable Account Profile', the provisioning template for the account to be enabled. For example, this could be used for a joiner on a source once the joiner's account is created.  DISABLE - This usage type relates to 'Disable Account Profile', the provisioning template for the account to be disabled. For example, this could be used when a leaver is removed temporarily from a source.  You can use these four usage types for all your provisioning policy needs. 
        try:
            # Delete Provisioning Policy by UsageType
            
            SourcesApi(api_client).delete_provisioning_policy(source_id=source_id, usage_type=usage_type)
            # Below is a request that includes all optional parameters
            # SourcesApi(api_client).delete_provisioning_policy(source_id, usage_type)
        except Exception as e:
            print("Exception when calling SourcesApi->delete_provisioning_policy: %s\n" % e)
- path: /sources/{id}
  method: DELETE
  xCodeSample:
    - lang: Python
      label: SDK_tools/sdk/python/v3/methods/sources#delete-source
      source: |
        from sailpoint.v3.api.sources_api import SourcesApi
        from sailpoint.v3.api_client import ApiClient
        from sailpoint.v3.models.delete_source202_response import DeleteSource202Response
        from pprint import pprint
        from sailpoint.configuration import Configuration
        configuration = Configuration()


        with ApiClient(configuration) as api_client:
        id = '2c9180835d191a86015d28455b4a2329' # str | Source ID. # str | Source ID.
        try:
            # Delete Source by ID
            
            results = SourcesApi(api_client).delete_source(id=id)
            # Below is a request that includes all optional parameters
            # results = SourcesApi(api_client).delete_source(id)
            print("The response of SourcesApi->delete_source:\n")
            pprint(results)
        except Exception as e:
            print("Exception when calling SourcesApi->delete_source: %s\n" % e)
- path: /sources/{sourceId}/schemas/{schemaId}
  method: DELETE
  xCodeSample:
    - lang: Python
      label: SDK_tools/sdk/python/v3/methods/sources#delete-source-schema
      source: |
        from sailpoint.v3.api.sources_api import SourcesApi
        from sailpoint.v3.api_client import ApiClient
        from pprint import pprint
        from sailpoint.configuration import Configuration
        configuration = Configuration()


        with ApiClient(configuration) as api_client:
        source_id = '2c9180835d191a86015d28455b4a2329' # str | The Source id. # str | The Source id.
        schema_id = '2c9180835d191a86015d28455b4a2329' # str | The Schema id. # str | The Schema id.
        try:
            # Delete Source Schema by ID
            
            SourcesApi(api_client).delete_source_schema(source_id=source_id, schema_id=schema_id)
            # Below is a request that includes all optional parameters
            # SourcesApi(api_client).delete_source_schema(source_id, schema_id)
        except Exception as e:
            print("Exception when calling SourcesApi->delete_source_schema: %s\n" % e)
- path: /sources/{id}/schemas/accounts
  method: GET
  xCodeSample:
    - lang: Python
      label: SDK_tools/sdk/python/v3/methods/sources#get-accounts-schema
      source: |
        from sailpoint.v3.api.sources_api import SourcesApi
        from sailpoint.v3.api_client import ApiClient
        from pprint import pprint
        from sailpoint.configuration import Configuration
        configuration = Configuration()


        with ApiClient(configuration) as api_client:
        id = '8c190e6787aa4ed9a90bd9d5344523fb' # str | The Source id # str | The Source id
        try:
            # Downloads source accounts schema template
            
            SourcesApi(api_client).get_accounts_schema(id=id)
            # Below is a request that includes all optional parameters
            # SourcesApi(api_client).get_accounts_schema(id)
        except Exception as e:
            print("Exception when calling SourcesApi->get_accounts_schema: %s\n" % e)
- path: /sources/{id}/schemas/entitlements
  method: GET
  xCodeSample:
    - lang: Python
      label: SDK_tools/sdk/python/v3/methods/sources#get-entitlements-schema
      source: |
        from sailpoint.v3.api.sources_api import SourcesApi
        from sailpoint.v3.api_client import ApiClient
        from pprint import pprint
        from sailpoint.configuration import Configuration
        configuration = Configuration()


        with ApiClient(configuration) as api_client:
        id = '8c190e6787aa4ed9a90bd9d5344523fb' # str | The Source id # str | The Source id
        schema_name = '?schemaName=group' # str | Name of entitlement schema (optional) # str | Name of entitlement schema (optional)
        try:
            # Downloads source entitlements schema template
            
            SourcesApi(api_client).get_entitlements_schema(id=id)
            # Below is a request that includes all optional parameters
            # SourcesApi(api_client).get_entitlements_schema(id, schema_name)
        except Exception as e:
            print("Exception when calling SourcesApi->get_entitlements_schema: %s\n" % e)
- path: /sources/{sourceId}/provisioning-policies/{usageType}
  method: GET
  xCodeSample:
    - lang: Python
      label: SDK_tools/sdk/python/v3/methods/sources#get-provisioning-policy
      source: |
        from sailpoint.v3.api.sources_api import SourcesApi
        from sailpoint.v3.api_client import ApiClient
        from sailpoint.v3.models.provisioning_policy_dto import ProvisioningPolicyDto
        from sailpoint.v3.models.usage_type import UsageType
        from pprint import pprint
        from sailpoint.configuration import Configuration
        configuration = Configuration()


        with ApiClient(configuration) as api_client:
        source_id = '2c9180835d191a86015d28455b4a2329' # str | The Source ID. # str | The Source ID.
        usage_type = sailpoint.v3.UsageType() # UsageType | The type of provisioning policy usage.  In IdentityNow, a source can support various provisioning operations. For example, when a joiner is added to a source, this may trigger both CREATE and UPDATE provisioning operations.  Each usage type is considered a provisioning policy.  A source can have any number of these provisioning policies defined.  These are the common usage types:  CREATE - This usage type relates to 'Create Account Profile', the provisioning template for the account to be created. For example, this would be used for a joiner on a source.   UPDATE - This usage type relates to 'Update Account Profile', the provisioning template for the 'Update' connector operations. For example, this would be used for an attribute sync on a source. ENABLE - This usage type relates to 'Enable Account Profile', the provisioning template for the account to be enabled. For example, this could be used for a joiner on a source once the joiner's account is created.  DISABLE - This usage type relates to 'Disable Account Profile', the provisioning template for the account to be disabled. For example, this could be used when a leaver is removed temporarily from a source.  You can use these four usage types for all your provisioning policy needs.  # UsageType | The type of provisioning policy usage.  In IdentityNow, a source can support various provisioning operations. For example, when a joiner is added to a source, this may trigger both CREATE and UPDATE provisioning operations.  Each usage type is considered a provisioning policy.  A source can have any number of these provisioning policies defined.  These are the common usage types:  CREATE - This usage type relates to 'Create Account Profile', the provisioning template for the account to be created. For example, this would be used for a joiner on a source.   UPDATE - This usage type relates to 'Update Account Profile', the provisioning template for the 'Update' connector operations. For example, this would be used for an attribute sync on a source. ENABLE - This usage type relates to 'Enable Account Profile', the provisioning template for the account to be enabled. For example, this could be used for a joiner on a source once the joiner's account is created.  DISABLE - This usage type relates to 'Disable Account Profile', the provisioning template for the account to be disabled. For example, this could be used when a leaver is removed temporarily from a source.  You can use these four usage types for all your provisioning policy needs. 
        try:
            # Get Provisioning Policy by UsageType
            
            results = SourcesApi(api_client).get_provisioning_policy(source_id=source_id, usage_type=usage_type)
            # Below is a request that includes all optional parameters
            # results = SourcesApi(api_client).get_provisioning_policy(source_id, usage_type)
            print("The response of SourcesApi->get_provisioning_policy:\n")
            pprint(results)
        except Exception as e:
            print("Exception when calling SourcesApi->get_provisioning_policy: %s\n" % e)
- path: /sources/{id}
  method: GET
  xCodeSample:
    - lang: Python
      label: SDK_tools/sdk/python/v3/methods/sources#get-source
      source: |
        from sailpoint.v3.api.sources_api import SourcesApi
        from sailpoint.v3.api_client import ApiClient
        from sailpoint.v3.models.source import Source
        from pprint import pprint
        from sailpoint.configuration import Configuration
        configuration = Configuration()


        with ApiClient(configuration) as api_client:
        id = '2c9180835d191a86015d28455b4a2329' # str | Source ID. # str | Source ID.
        try:
            # Get Source by ID
            
            results = SourcesApi(api_client).get_source(id=id)
            # Below is a request that includes all optional parameters
            # results = SourcesApi(api_client).get_source(id)
            print("The response of SourcesApi->get_source:\n")
            pprint(results)
        except Exception as e:
            print("Exception when calling SourcesApi->get_source: %s\n" % e)
- path: /sources/{sourceId}/connections
  method: GET
  xCodeSample:
    - lang: Python
      label: SDK_tools/sdk/python/v3/methods/sources#get-source-connections
      source: |
        from sailpoint.v3.api.sources_api import SourcesApi
        from sailpoint.v3.api_client import ApiClient
        from sailpoint.v3.models.source_connections_dto import SourceConnectionsDto
        from pprint import pprint
        from sailpoint.configuration import Configuration
        configuration = Configuration()


        with ApiClient(configuration) as api_client:
        id = '2c9180835d191a86015d28455b4a2329' # str | Source ID. # str | Source ID.
        try:
            # Get Source Connections by ID
            
            results = SourcesApi(api_client).get_source_connections(id=id)
            # Below is a request that includes all optional parameters
            # results = SourcesApi(api_client).get_source_connections(id)
            print("The response of SourcesApi->get_source_connections:\n")
            pprint(results)
        except Exception as e:
            print("Exception when calling SourcesApi->get_source_connections: %s\n" % e)
- path: /sources/{sourceId}/source-health
  method: GET
  xCodeSample:
    - lang: Python
      label: SDK_tools/sdk/python/v3/methods/sources#get-source-health
      source: |
        from sailpoint.v3.api.sources_api import SourcesApi
        from sailpoint.v3.api_client import ApiClient
        from sailpoint.v3.models.source_health_dto import SourceHealthDto
        from pprint import pprint
        from sailpoint.configuration import Configuration
        configuration = Configuration()


        with ApiClient(configuration) as api_client:
        source_id = '2c9180835d191a86015d28455b4a2329' # str | The Source id. # str | The Source id.
        try:
            # Fetches source health by id
            
            results = SourcesApi(api_client).get_source_health(source_id=source_id)
            # Below is a request that includes all optional parameters
            # results = SourcesApi(api_client).get_source_health(source_id)
            print("The response of SourcesApi->get_source_health:\n")
            pprint(results)
        except Exception as e:
            print("Exception when calling SourcesApi->get_source_health: %s\n" % e)
- path: /sources/{sourceId}/schemas/{schemaId}
  method: GET
  xCodeSample:
    - lang: Python
      label: SDK_tools/sdk/python/v3/methods/sources#get-source-schema
      source: |
        from sailpoint.v3.api.sources_api import SourcesApi
        from sailpoint.v3.api_client import ApiClient
        from sailpoint.v3.models.model_schema import ModelSchema
        from pprint import pprint
        from sailpoint.configuration import Configuration
        configuration = Configuration()


        with ApiClient(configuration) as api_client:
        source_id = '2c9180835d191a86015d28455b4a2329' # str | The Source id. # str | The Source id.
        schema_id = '2c9180835d191a86015d28455b4a2329' # str | The Schema id. # str | The Schema id.
        try:
            # Get Source Schema by ID
            
            results = SourcesApi(api_client).get_source_schema(source_id=source_id, schema_id=schema_id)
            # Below is a request that includes all optional parameters
            # results = SourcesApi(api_client).get_source_schema(source_id, schema_id)
            print("The response of SourcesApi->get_source_schema:\n")
            pprint(results)
        except Exception as e:
            print("Exception when calling SourcesApi->get_source_schema: %s\n" % e)
- path: /sources/{sourceId}/schemas
  method: GET
  xCodeSample:
    - lang: Python
      label: SDK_tools/sdk/python/v3/methods/sources#get-source-schemas
      source: |
        from sailpoint.v3.api.sources_api import SourcesApi
        from sailpoint.v3.api_client import ApiClient
        from sailpoint.v3.models.model_schema import ModelSchema
        from pprint import pprint
        from sailpoint.configuration import Configuration
        configuration = Configuration()


        with ApiClient(configuration) as api_client:
        source_id = '2c9180835d191a86015d28455b4a2329' # str | Source ID. # str | Source ID.
        include_types = 'group' # str | If set to 'group', then the account schema is filtered and only group schemas are returned. Only a value of 'group' is recognized presently.  Note: The API will check whether include-types is group or not, if not, it will list schemas based on include-names, if include-names is not provided, it will list all schemas. (optional) # str | If set to 'group', then the account schema is filtered and only group schemas are returned. Only a value of 'group' is recognized presently.  Note: The API will check whether include-types is group or not, if not, it will list schemas based on include-names, if include-names is not provided, it will list all schemas. (optional)
        include_names = 'account' # str | A comma-separated list of schema names to filter result. (optional) # str | A comma-separated list of schema names to filter result. (optional)
        try:
            # List Schemas on Source
            
            results = SourcesApi(api_client).get_source_schemas(source_id=source_id)
            # Below is a request that includes all optional parameters
            # results = SourcesApi(api_client).get_source_schemas(source_id, include_types, include_names)
            print("The response of SourcesApi->get_source_schemas:\n")
            pprint(results)
        except Exception as e:
            print("Exception when calling SourcesApi->get_source_schemas: %s\n" % e)
- path: /sources/{id}/schemas/accounts
  method: POST
  xCodeSample:
    - lang: Python
      label: SDK_tools/sdk/python/v3/methods/sources#import-accounts-schema
      source: |
        from sailpoint.v3.api.sources_api import SourcesApi
        from sailpoint.v3.api_client import ApiClient
        from sailpoint.v3.models.model_schema import ModelSchema
        from pprint import pprint
        from sailpoint.configuration import Configuration
        configuration = Configuration()


        with ApiClient(configuration) as api_client:
        id = '8c190e6787aa4ed9a90bd9d5344523fb' # str | The Source id # str | The Source id
        file = None # bytearray |  (optional) # bytearray |  (optional)
        try:
            # Uploads source accounts schema template
            
            results = SourcesApi(api_client).import_accounts_schema(id=id)
            # Below is a request that includes all optional parameters
            # results = SourcesApi(api_client).import_accounts_schema(id, file)
            print("The response of SourcesApi->import_accounts_schema:\n")
            pprint(results)
        except Exception as e:
            print("Exception when calling SourcesApi->import_accounts_schema: %s\n" % e)
- path: /sources/{sourceId}/upload-connector-file
  method: POST
  xCodeSample:
    - lang: Python
      label: SDK_tools/sdk/python/v3/methods/sources#import-connector-file
      source: |
        from sailpoint.v3.api.sources_api import SourcesApi
        from sailpoint.v3.api_client import ApiClient
        from sailpoint.v3.models.source import Source
        from pprint import pprint
        from sailpoint.configuration import Configuration
        configuration = Configuration()


        with ApiClient(configuration) as api_client:
        source_id = '2c9180835d191a86015d28455b4a2329' # str | The Source id. # str | The Source id.
        file = None # bytearray |  (optional) # bytearray |  (optional)
        try:
            # Upload connector file to source
            
            results = SourcesApi(api_client).import_connector_file(source_id=source_id)
            # Below is a request that includes all optional parameters
            # results = SourcesApi(api_client).import_connector_file(source_id, file)
            print("The response of SourcesApi->import_connector_file:\n")
            pprint(results)
        except Exception as e:
            print("Exception when calling SourcesApi->import_connector_file: %s\n" % e)
- path: /sources/{id}/schemas/entitlements
  method: POST
  xCodeSample:
    - lang: Python
      label: SDK_tools/sdk/python/v3/methods/sources#import-entitlements-schema
      source: |
        from sailpoint.v3.api.sources_api import SourcesApi
        from sailpoint.v3.api_client import ApiClient
        from sailpoint.v3.models.model_schema import ModelSchema
        from pprint import pprint
        from sailpoint.configuration import Configuration
        configuration = Configuration()


        with ApiClient(configuration) as api_client:
        id = '8c190e6787aa4ed9a90bd9d5344523fb' # str | The Source id # str | The Source id
        schema_name = '?schemaName=group' # str | Name of entitlement schema (optional) # str | Name of entitlement schema (optional)
        file = None # bytearray |  (optional) # bytearray |  (optional)
        try:
            # Uploads source entitlements schema template
            
            results = SourcesApi(api_client).import_entitlements_schema(id=id)
            # Below is a request that includes all optional parameters
            # results = SourcesApi(api_client).import_entitlements_schema(id, schema_name, file)
            print("The response of SourcesApi->import_entitlements_schema:\n")
            pprint(results)
        except Exception as e:
            print("Exception when calling SourcesApi->import_entitlements_schema: %s\n" % e)
- path: /sources/{sourceId}/provisioning-policies
  method: GET
  xCodeSample:
    - lang: Python
      label: SDK_tools/sdk/python/v3/methods/sources#list-provisioning-policies
      source: |
        from sailpoint.v3.api.sources_api import SourcesApi
        from sailpoint.v3.api_client import ApiClient
        from sailpoint.v3.models.provisioning_policy_dto import ProvisioningPolicyDto
        from pprint import pprint
        from sailpoint.configuration import Configuration
        configuration = Configuration()


        with ApiClient(configuration) as api_client:
        source_id = '2c9180835d191a86015d28455b4a2329' # str | The Source id # str | The Source id
        try:
            # Lists ProvisioningPolicies
            
            results = SourcesApi(api_client).list_provisioning_policies(source_id=source_id)
            # Below is a request that includes all optional parameters
            # results = SourcesApi(api_client).list_provisioning_policies(source_id)
            print("The response of SourcesApi->list_provisioning_policies:\n")
            pprint(results)
        except Exception as e:
            print("Exception when calling SourcesApi->list_provisioning_policies: %s\n" % e)
- path: /sources
  method: GET
  xCodeSample:
    - lang: Python
      label: SDK_tools/sdk/python/v3/methods/sources#list-sources
      source: |
        from sailpoint.v3.api.sources_api import SourcesApi
        from sailpoint.v3.api_client import ApiClient
        from sailpoint.v3.models.source import Source
        from pprint import pprint
        from sailpoint.configuration import Configuration
        configuration = Configuration()


        with ApiClient(configuration) as api_client:
        limit = 250 # int | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250) # int | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 250)
        offset = 0 # int | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0) # int | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to 0)
        count = False # bool | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to False) # bool | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information. (optional) (default to False)
        filters = 'name eq \"Employees\"' # str | Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in, ge, gt, le, lt, ne, isnull, sw*  **name**: *co, eq, in, sw, ge, gt, ne, isnull*  **type**: *eq, in, ge, gt, ne, isnull, sw*  **owner.id**: *eq, in, ge, gt, le, lt, ne, isnull, sw*  **features**: *ca, co*  **created**: *eq, ge, gt, in, le, lt, ne, isnull, sw*  **modified**: *eq, ge, gt, in, le, lt, ne, isnull, sw*  **managementWorkgroup.id**: *eq, ge, gt, in, le, lt, ne, isnull, sw*  **description**: *eq, sw*  **authoritative**: *eq, ne, isnull*  **healthy**: *isnull*  **status**: *eq, in, ge, gt, le, lt, ne, isnull, sw*  **connectionType**: *eq, ge, gt, in, le, lt, ne, isnull, sw*  **connectorName**: *eq, ge, gt, in, ne, isnull, sw*  **category**: *co, eq, ge, gt, in, le, lt, ne, sw* (optional) # str | Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in, ge, gt, le, lt, ne, isnull, sw*  **name**: *co, eq, in, sw, ge, gt, ne, isnull*  **type**: *eq, in, ge, gt, ne, isnull, sw*  **owner.id**: *eq, in, ge, gt, le, lt, ne, isnull, sw*  **features**: *ca, co*  **created**: *eq, ge, gt, in, le, lt, ne, isnull, sw*  **modified**: *eq, ge, gt, in, le, lt, ne, isnull, sw*  **managementWorkgroup.id**: *eq, ge, gt, in, le, lt, ne, isnull, sw*  **description**: *eq, sw*  **authoritative**: *eq, ne, isnull*  **healthy**: *isnull*  **status**: *eq, in, ge, gt, le, lt, ne, isnull, sw*  **connectionType**: *eq, ge, gt, in, le, lt, ne, isnull, sw*  **connectorName**: *eq, ge, gt, in, ne, isnull, sw*  **category**: *co, eq, ge, gt, in, le, lt, ne, sw* (optional)
        sorters = 'name' # str | Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **type, created, modified, name, owner.name, healthy, status, id, description, owner.id, accountCorrelationConfig.id, accountCorrelationConfig.name, managerCorrelationRule.type, managerCorrelationRule.id, managerCorrelationRule.name, authoritative, managementWorkgroup.id, connectorName, connectionType** (optional) # str | Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **type, created, modified, name, owner.name, healthy, status, id, description, owner.id, accountCorrelationConfig.id, accountCorrelationConfig.name, managerCorrelationRule.type, managerCorrelationRule.id, managerCorrelationRule.name, authoritative, managementWorkgroup.id, connectorName, connectionType** (optional)
        for_subadmin = 'name' # str | Filter the returned list of sources for the identity specified by the parameter, which is the id of an identity with the role SOURCE_SUBADMIN. By convention, the value **me** indicates the identity id of the current user. Subadmins may only view Sources which they are able to administer; all other Sources will be filtered out when this parameter is set. If the current user is a SOURCE_SUBADMIN but fails to pass a valid value for this parameter, a 403 Forbidden is returned. (optional) # str | Filter the returned list of sources for the identity specified by the parameter, which is the id of an identity with the role SOURCE_SUBADMIN. By convention, the value **me** indicates the identity id of the current user. Subadmins may only view Sources which they are able to administer; all other Sources will be filtered out when this parameter is set. If the current user is a SOURCE_SUBADMIN but fails to pass a valid value for this parameter, a 403 Forbidden is returned. (optional)
        include_idn_source = False # bool | Include the IdentityNow source in the response. (optional) (default to False) # bool | Include the IdentityNow source in the response. (optional) (default to False)
        try:
            # Lists all sources in IdentityNow.
            
            results = SourcesApi(api_client).list_sources()
            # Below is a request that includes all optional parameters
            # results = SourcesApi(api_client).list_sources(limit, offset, count, filters, sorters, for_subadmin, include_idn_source)
            print("The response of SourcesApi->list_sources:\n")
            pprint(results)
        except Exception as e:
            print("Exception when calling SourcesApi->list_sources: %s\n" % e)
- path: /sources/{sourceId}/provisioning-policies/{usageType}
  method: PUT
  xCodeSample:
    - lang: Python
      label: SDK_tools/sdk/python/v3/methods/sources#put-provisioning-policy
      source: |
        from sailpoint.v3.api.sources_api import SourcesApi
        from sailpoint.v3.api_client import ApiClient
        from sailpoint.v3.models.provisioning_policy_dto import ProvisioningPolicyDto
        from sailpoint.v3.models.usage_type import UsageType
        from pprint import pprint
        from sailpoint.configuration import Configuration
        configuration = Configuration()


        with ApiClient(configuration) as api_client:
        source_id = '2c9180835d191a86015d28455b4a2329' # str | The Source ID. # str | The Source ID.
        usage_type = sailpoint.v3.UsageType() # UsageType | The type of provisioning policy usage.  In IdentityNow, a source can support various provisioning operations. For example, when a joiner is added to a source, this may trigger both CREATE and UPDATE provisioning operations.  Each usage type is considered a provisioning policy.  A source can have any number of these provisioning policies defined.  These are the common usage types:  CREATE - This usage type relates to 'Create Account Profile', the provisioning template for the account to be created. For example, this would be used for a joiner on a source.   UPDATE - This usage type relates to 'Update Account Profile', the provisioning template for the 'Update' connector operations. For example, this would be used for an attribute sync on a source. ENABLE - This usage type relates to 'Enable Account Profile', the provisioning template for the account to be enabled. For example, this could be used for a joiner on a source once the joiner's account is created.  DISABLE - This usage type relates to 'Disable Account Profile', the provisioning template for the account to be disabled. For example, this could be used when a leaver is removed temporarily from a source.  You can use these four usage types for all your provisioning policy needs.  # UsageType | The type of provisioning policy usage.  In IdentityNow, a source can support various provisioning operations. For example, when a joiner is added to a source, this may trigger both CREATE and UPDATE provisioning operations.  Each usage type is considered a provisioning policy.  A source can have any number of these provisioning policies defined.  These are the common usage types:  CREATE - This usage type relates to 'Create Account Profile', the provisioning template for the account to be created. For example, this would be used for a joiner on a source.   UPDATE - This usage type relates to 'Update Account Profile', the provisioning template for the 'Update' connector operations. For example, this would be used for an attribute sync on a source. ENABLE - This usage type relates to 'Enable Account Profile', the provisioning template for the account to be enabled. For example, this could be used for a joiner on a source once the joiner's account is created.  DISABLE - This usage type relates to 'Disable Account Profile', the provisioning template for the account to be disabled. For example, this could be used when a leaver is removed temporarily from a source.  You can use these four usage types for all your provisioning policy needs. 
        provisioning_policy_dto = '''{
          "name" : "example provisioning policy for inactive identities",
          "description" : "this provisioning policy creates access based on an identity going inactive",
          "fields" : [ {
            "isRequired" : false,
            "transform" : {
              "type" : "rule",
              "attributes" : {
                "name" : "Create Unique LDAP Attribute"
              }
            },
            "isMultiValued" : false,
            "name" : "userName",
            "attributes" : {
              "template" : "${firstname}.${lastname}${uniqueCounter}",
              "cloudMaxUniqueChecks" : "50",
              "cloudMaxSize" : "20",
              "cloudRequired" : "true"
            },
            "type" : "string"
          }, {
            "isRequired" : false,
            "transform" : {
              "type" : "rule",
              "attributes" : {
                "name" : "Create Unique LDAP Attribute"
              }
            },
            "isMultiValued" : false,
            "name" : "userName",
            "attributes" : {
              "template" : "${firstname}.${lastname}${uniqueCounter}",
              "cloudMaxUniqueChecks" : "50",
              "cloudMaxSize" : "20",
              "cloudRequired" : "true"
            },
            "type" : "string"
          } ],
          "usageType" : "CREATE"
        }''' # ProvisioningPolicyDto | 
        try:
            # Update Provisioning Policy by UsageType
            new_provisioning_policy_dto = ProvisioningPolicyDto.from_json(provisioning_policy_dto)
            results = SourcesApi(api_client).put_provisioning_policy(source_id=source_id, usage_type=usage_type, provisioning_policy_dto=new_provisioning_policy_dto)
            # Below is a request that includes all optional parameters
            # results = SourcesApi(api_client).put_provisioning_policy(source_id, usage_type, new_provisioning_policy_dto)
            print("The response of SourcesApi->put_provisioning_policy:\n")
            pprint(results)
        except Exception as e:
            print("Exception when calling SourcesApi->put_provisioning_policy: %s\n" % e)
- path: /sources/{id}
  method: PUT
  xCodeSample:
    - lang: Python
      label: SDK_tools/sdk/python/v3/methods/sources#put-source
      source: |
        from sailpoint.v3.api.sources_api import SourcesApi
        from sailpoint.v3.api_client import ApiClient
        from sailpoint.v3.models.source import Source
        from pprint import pprint
        from sailpoint.configuration import Configuration
        configuration = Configuration()


        with ApiClient(configuration) as api_client:
        id = '2c9180835d191a86015d28455b4a2329' # str | Source ID. # str | Source ID.
        source = '''{
          "cluster" : {
            "name" : "Corporate Cluster",
            "id" : "2c9180866166b5b0016167c32ef31a66",
            "type" : "CLUSTER"
          },
          "deleteThreshold" : 10,
          "connectorId" : "active-directory",
          "description" : "This is the corporate directory.",
          "type" : "OpenLDAP - Direct",
          "connectorClass" : "sailpoint.connector.LDAPConnector",
          "connectionType" : "file",
          "features" : [ "PROVISIONING", "NO_PERMISSIONS_PROVISIONING", "GROUPS_HAVE_MEMBERS" ],
          "passwordPolicies" : [ {
            "type" : "PASSWORD_POLICY",
            "id" : "2c9180855d191c59015d291ceb053980",
            "name" : "Corporate Password Policy"
          }, {
            "type" : "PASSWORD_POLICY",
            "id" : "2c9180855d191c59015d291ceb057777",
            "name" : "Vendor Password Policy"
          } ],
          "modified" : "2024-01-23T18:08:50.897Z",
          "id" : "2c91808568c529c60168cca6f90c1324",
          "connectorImplementationId" : "delimited-file",
          "managerCorrelationRule" : {
            "name" : "Example Rule",
            "id" : "2c918085708c274401708c2a8a760001",
            "type" : "RULE"
          },
          "owner" : {
            "name" : "MyName",
            "id" : "2c91808568c529c60168cca6f90c1313",
            "type" : "IDENTITY"
          },
          "managementWorkgroup" : {
            "name" : "My Management Workgroup",
            "id" : "2c91808568c529c60168cca6f90c2222",
            "type" : "GOVERNANCE_GROUP"
          },
          "accountCorrelationRule" : {
            "name" : "Example Rule",
            "id" : "2c918085708c274401708c2a8a760001",
            "type" : "RULE"
          },
          "authoritative" : false,
          "connectorAttributes" : {
            "healthCheckTimeout" : 30,
            "authSearchAttributes" : [ "cn", "uid", "mail" ]
          },
          "created" : "2022-02-08T14:50:03.827Z",
          "managerCorrelationMapping" : {
            "accountAttributeName" : "manager",
            "identityAttributeName" : "manager"
          },
          "credentialProviderEnabled" : false,
          "accountCorrelationConfig" : {
            "name" : "Directory [source-62867] Account Correlation",
            "id" : "2c9180855d191c59015d28583727245a",
            "type" : "ACCOUNT_CORRELATION_CONFIG"
          },
          "connector" : "active-directory",
          "healthy" : true,
          "schemas" : [ {
            "type" : "CONNECTOR_SCHEMA",
            "id" : "2c9180835d191a86015d28455b4b232a",
            "name" : "account"
          }, {
            "type" : "CONNECTOR_SCHEMA",
            "id" : "2c9180835d191a86015d28455b4b232b",
            "name" : "group"
          } ],
          "name" : "My Source",
          "connectorName" : "Active Directory",
          "category" : "CredentialProvider",
          "beforeProvisioningRule" : {
            "name" : "Example Rule",
            "id" : "2c918085708c274401708c2a8a760001",
            "type" : "RULE"
          },
          "status" : "SOURCE_STATE_HEALTHY",
          "since" : "2021-09-28T15:48:29.3801666300Z"
        }''' # Source | 
        try:
            # Update Source (Full)
            new_source = Source.from_json(source)
            results = SourcesApi(api_client).put_source(id=id, source=new_source)
            # Below is a request that includes all optional parameters
            # results = SourcesApi(api_client).put_source(id, new_source)
            print("The response of SourcesApi->put_source:\n")
            pprint(results)
        except Exception as e:
            print("Exception when calling SourcesApi->put_source: %s\n" % e)
- path: /sources/{sourceId}/schemas/{schemaId}
  method: PUT
  xCodeSample:
    - lang: Python
      label: SDK_tools/sdk/python/v3/methods/sources#put-source-schema
      source: |
        from sailpoint.v3.api.sources_api import SourcesApi
        from sailpoint.v3.api_client import ApiClient
        from sailpoint.v3.models.model_schema import ModelSchema
        from pprint import pprint
        from sailpoint.configuration import Configuration
        configuration = Configuration()


        with ApiClient(configuration) as api_client:
        source_id = '2c9180835d191a86015d28455b4a2329' # str | The Source id. # str | The Source id.
        schema_id = '2c9180835d191a86015d28455b4a2329' # str | The Schema id. # str | The Schema id.
        model_schema = '''sailpoint.v3.ModelSchema()''' # ModelSchema | 
        try:
            # Update Source Schema (Full)
            new_model_schema = ModelSchema.from_json(model_schema)
            results = SourcesApi(api_client).put_source_schema(source_id=source_id, schema_id=schema_id, model_schema=new_model_schema)
            # Below is a request that includes all optional parameters
            # results = SourcesApi(api_client).put_source_schema(source_id, schema_id, new_model_schema)
            print("The response of SourcesApi->put_source_schema:\n")
            pprint(results)
        except Exception as e:
            print("Exception when calling SourcesApi->put_source_schema: %s\n" % e)
- path: /sources/{sourceId}/provisioning-policies/bulk-update
  method: POST
  xCodeSample:
    - lang: Python
      label: SDK_tools/sdk/python/v3/methods/sources#update-provisioning-policies-in-bulk
      source: |
        from sailpoint.v3.api.sources_api import SourcesApi
        from sailpoint.v3.api_client import ApiClient
        from sailpoint.v3.models.provisioning_policy_dto import ProvisioningPolicyDto
        from pprint import pprint
        from sailpoint.configuration import Configuration
        configuration = Configuration()


        with ApiClient(configuration) as api_client:
        source_id = '2c9180835d191a86015d28455b4a2329' # str | The Source id. # str | The Source id.
        provisioning_policy_dto = '''[sailpoint.v3.ProvisioningPolicyDto()]''' # List[ProvisioningPolicyDto] | 
        try:
            # Bulk Update Provisioning Policies
            new_provisioning_policy_dto = ProvisioningPolicyDto.from_json(provisioning_policy_dto)
            results = SourcesApi(api_client).update_provisioning_policies_in_bulk(source_id=source_id, provisioning_policy_dto=new_provisioning_policy_dto)
            # Below is a request that includes all optional parameters
            # results = SourcesApi(api_client).update_provisioning_policies_in_bulk(source_id, new_provisioning_policy_dto)
            print("The response of SourcesApi->update_provisioning_policies_in_bulk:\n")
            pprint(results)
        except Exception as e:
            print("Exception when calling SourcesApi->update_provisioning_policies_in_bulk: %s\n" % e)
- path: /sources/{sourceId}/provisioning-policies/{usageType}
  method: PATCH
  xCodeSample:
    - lang: Python
      label: SDK_tools/sdk/python/v3/methods/sources#update-provisioning-policy
      source: |
        from sailpoint.v3.api.sources_api import SourcesApi
        from sailpoint.v3.api_client import ApiClient
        from sailpoint.v3.models.json_patch_operation import JsonPatchOperation
        from sailpoint.v3.models.provisioning_policy_dto import ProvisioningPolicyDto
        from sailpoint.v3.models.usage_type import UsageType
        from pprint import pprint
        from sailpoint.configuration import Configuration
        configuration = Configuration()


        with ApiClient(configuration) as api_client:
        source_id = '2c9180835d191a86015d28455b4a2329' # str | The Source id. # str | The Source id.
        usage_type = sailpoint.v3.UsageType() # UsageType | The type of provisioning policy usage.  In IdentityNow, a source can support various provisioning operations. For example, when a joiner is added to a source, this may trigger both CREATE and UPDATE provisioning operations.  Each usage type is considered a provisioning policy.  A source can have any number of these provisioning policies defined.  These are the common usage types:  CREATE - This usage type relates to 'Create Account Profile', the provisioning template for the account to be created. For example, this would be used for a joiner on a source.   UPDATE - This usage type relates to 'Update Account Profile', the provisioning template for the 'Update' connector operations. For example, this would be used for an attribute sync on a source. ENABLE - This usage type relates to 'Enable Account Profile', the provisioning template for the account to be enabled. For example, this could be used for a joiner on a source once the joiner's account is created.  DISABLE - This usage type relates to 'Disable Account Profile', the provisioning template for the account to be disabled. For example, this could be used when a leaver is removed temporarily from a source.  You can use these four usage types for all your provisioning policy needs.  # UsageType | The type of provisioning policy usage.  In IdentityNow, a source can support various provisioning operations. For example, when a joiner is added to a source, this may trigger both CREATE and UPDATE provisioning operations.  Each usage type is considered a provisioning policy.  A source can have any number of these provisioning policies defined.  These are the common usage types:  CREATE - This usage type relates to 'Create Account Profile', the provisioning template for the account to be created. For example, this would be used for a joiner on a source.   UPDATE - This usage type relates to 'Update Account Profile', the provisioning template for the 'Update' connector operations. For example, this would be used for an attribute sync on a source. ENABLE - This usage type relates to 'Enable Account Profile', the provisioning template for the account to be enabled. For example, this could be used for a joiner on a source once the joiner's account is created.  DISABLE - This usage type relates to 'Disable Account Profile', the provisioning template for the account to be disabled. For example, this could be used when a leaver is removed temporarily from a source.  You can use these four usage types for all your provisioning policy needs. 
        json_patch_operation = '''[{op=add, path=/fields/0, value={name=email, transform={type=identityAttribute, attributes={name=email}}, attributes={}, isRequired=false, type=string, isMultiValued=false}}]''' # List[JsonPatchOperation] | The JSONPatch payload used to update the schema.
        try:
            # Partial update of Provisioning Policy
            new_json_patch_operation = JsonPatchOperation.from_json(json_patch_operation)
            results = SourcesApi(api_client).update_provisioning_policy(source_id=source_id, usage_type=usage_type, json_patch_operation=new_json_patch_operation)
            # Below is a request that includes all optional parameters
            # results = SourcesApi(api_client).update_provisioning_policy(source_id, usage_type, new_json_patch_operation)
            print("The response of SourcesApi->update_provisioning_policy:\n")
            pprint(results)
        except Exception as e:
            print("Exception when calling SourcesApi->update_provisioning_policy: %s\n" % e)
- path: /sources/{id}
  method: PATCH
  xCodeSample:
    - lang: Python
      label: SDK_tools/sdk/python/v3/methods/sources#update-source
      source: |
        from sailpoint.v3.api.sources_api import SourcesApi
        from sailpoint.v3.api_client import ApiClient
        from sailpoint.v3.models.json_patch_operation import JsonPatchOperation
        from sailpoint.v3.models.source import Source
        from pprint import pprint
        from sailpoint.configuration import Configuration
        configuration = Configuration()


        with ApiClient(configuration) as api_client:
        id = '2c9180835d191a86015d28455b4a2329' # str | Source ID. # str | Source ID.
        json_patch_operation = '''[{op=replace, path=/description, value=new description}]''' # List[JsonPatchOperation] | A list of account update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard. Any password changes are submitted as plain-text and encrypted upon receipt in Identity Security Cloud (ISC).
        try:
            # Update Source (Partial)
            new_json_patch_operation = JsonPatchOperation.from_json(json_patch_operation)
            results = SourcesApi(api_client).update_source(id=id, json_patch_operation=new_json_patch_operation)
            # Below is a request that includes all optional parameters
            # results = SourcesApi(api_client).update_source(id, new_json_patch_operation)
            print("The response of SourcesApi->update_source:\n")
            pprint(results)
        except Exception as e:
            print("Exception when calling SourcesApi->update_source: %s\n" % e)
- path: /sources/{sourceId}/schemas/{schemaId}
  method: PATCH
  xCodeSample:
    - lang: Python
      label: SDK_tools/sdk/python/v3/methods/sources#update-source-schema
      source: |
        from sailpoint.v3.api.sources_api import SourcesApi
        from sailpoint.v3.api_client import ApiClient
        from sailpoint.v3.models.json_patch_operation import JsonPatchOperation
        from sailpoint.v3.models.model_schema import ModelSchema
        from pprint import pprint
        from sailpoint.configuration import Configuration
        configuration = Configuration()


        with ApiClient(configuration) as api_client:
        source_id = '2c9180835d191a86015d28455b4a2329' # str | The Source id. # str | The Source id.
        schema_id = '2c9180835d191a86015d28455b4a2329' # str | The Schema id. # str | The Schema id.
        json_patch_operation = '''[{op=add, path=/attributes/-, value={name=location, type=STRING, schema=null, description=Employee location, isMulti=false, isEntitlement=false, isGroup=false}}]''' # List[JsonPatchOperation] | The JSONPatch payload used to update the schema.
        try:
            # Update Source Schema (Partial)
            new_json_patch_operation = JsonPatchOperation.from_json(json_patch_operation)
            results = SourcesApi(api_client).update_source_schema(source_id=source_id, schema_id=schema_id, json_patch_operation=new_json_patch_operation)
            # Below is a request that includes all optional parameters
            # results = SourcesApi(api_client).update_source_schema(source_id, schema_id, new_json_patch_operation)
            print("The response of SourcesApi->update_source_schema:\n")
            pprint(results)
        except Exception as e:
            print("Exception when calling SourcesApi->update_source_schema: %s\n" % e)
