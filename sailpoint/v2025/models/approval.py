# coding: utf-8

"""
    Identity Security Cloud V2025 API

    Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

    The version of the OpenAPI document: v2025
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json
import warnings

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from sailpoint.v2025.models.approval_approval_criteria import ApprovalApprovalCriteria
from sailpoint.v2025.models.approval_comment1 import ApprovalComment1
from sailpoint.v2025.models.approval_description import ApprovalDescription
from sailpoint.v2025.models.approval_identity import ApprovalIdentity
from sailpoint.v2025.models.approval_identity_record import ApprovalIdentityRecord
from sailpoint.v2025.models.approval_name import ApprovalName
from sailpoint.v2025.models.approval_reassignment_history import ApprovalReassignmentHistory
from sailpoint.v2025.models.approval_reference import ApprovalReference
from sailpoint.v2025.models.approval_requested_target import ApprovalRequestedTarget
from typing import Optional, Set
from typing_extensions import Self

class Approval(BaseModel):
    """
    Approval Object
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="The Approval ID")
    tenant_id: Optional[StrictStr] = Field(default=None, description="The Tenant ID of the Approval", alias="tenantId")
    type: Optional[StrictStr] = Field(default=None, description="The type of the approval, such as ENTITLEMENT_DESCRIPTIONS, CUSTOM_ACCESS_REQUEST_APPROVAL, GENERIC_APPROVAL")
    approvers: Optional[List[ApprovalIdentity]] = Field(default=None, description="Object representation of an approver of an approval")
    created_date: Optional[StrictStr] = Field(default=None, description="Date the approval was created", alias="createdDate")
    due_date: Optional[StrictStr] = Field(default=None, description="Date the approval is due", alias="dueDate")
    escalation_step: Optional[StrictStr] = Field(default=None, description="Step in the escalation process. If set to 0, the approval is not escalated. If set to 1, the approval is escalated to the first approver in the escalation chain.", alias="escalationStep")
    serial_step: Optional[StrictInt] = Field(default=None, description="The serial step of the approval in the approval chain. For example, serialStep 1 is the first approval to action in an approval request chain. Parallel approvals are set to 0.", alias="serialStep")
    is_escalated: Optional[StrictBool] = Field(default=False, description="Whether or not the approval has been escalated. Will reset to false when the approval is actioned on.", alias="isEscalated")
    name: Optional[List[ApprovalName]] = Field(default=None, description="The name of the approval for a given locale")
    batch_request: Optional[Dict[str, Any]] = Field(default=None, description="The name of the approval for a given locale", alias="batchRequest")
    approval_config: Optional[Dict[str, Any]] = Field(default=None, description="The configuration of the approval, such as the approval criteria and whether it is a parallel or serial approval", alias="approvalConfig")
    description: Optional[List[ApprovalDescription]] = Field(default=None, description="The description of the approval for a given locale")
    medium: Optional[StrictStr] = Field(default=None, description="Signifies what medium to use when sending notifications (currently only email is utilized)")
    priority: Optional[StrictStr] = Field(default=None, description="The priority of the approval")
    requester: Optional[Dict[str, Any]] = Field(default=None, description="Object representation of the requester of the approval")
    requestee: Optional[Dict[str, Any]] = Field(default=None, description="Object representation of the requestee of the approval")
    comments: Optional[List[ApprovalComment1]] = Field(default=None, description="Object representation of a comment on the approval")
    approved_by: Optional[List[ApprovalIdentityRecord]] = Field(default=None, description="Array of approvers who have approved the approval", alias="approvedBy")
    rejected_by: Optional[List[ApprovalIdentityRecord]] = Field(default=None, description="Array of approvers who have rejected the approval", alias="rejectedBy")
    assigned_to: Optional[List[ApprovalIdentity]] = Field(default=None, description="Array of identities that the approval request is currently assigned to/waiting on. For parallel approvals, this is set to all approvers left to approve.", alias="assignedTo")
    completed_date: Optional[StrictStr] = Field(default=None, description="Date the approval was completed", alias="completedDate")
    approval_criteria: Optional[ApprovalApprovalCriteria] = Field(default=None, alias="approvalCriteria")
    additional_attributes: Optional[StrictStr] = Field(default=None, description="Json string representing additional attributes known about the object to be approved.", alias="additionalAttributes")
    reference_data: Optional[List[ApprovalReference]] = Field(default=None, description="Reference data related to the approval", alias="referenceData")
    reassignment_history: Optional[List[ApprovalReassignmentHistory]] = Field(default=None, description="History of whom the approval request was assigned to", alias="reassignmentHistory")
    static_attributes: Optional[Dict[str, Dict[str, Any]]] = Field(default=None, description="Field that can include any static additional info that may be needed by the service that the approval request originated from", alias="staticAttributes")
    modified_date: Optional[datetime] = Field(default=None, description="Date/time that the approval request was last updated", alias="modifiedDate")
    requested_target: Optional[List[ApprovalRequestedTarget]] = Field(default=None, description="RequestedTarget used to specify the actual object or target the approval request is for", alias="requestedTarget")
    __properties: ClassVar[List[str]] = ["id", "tenantId", "type", "approvers", "createdDate", "dueDate", "escalationStep", "serialStep", "isEscalated", "name", "batchRequest", "approvalConfig", "description", "medium", "priority", "requester", "requestee", "comments", "approvedBy", "rejectedBy", "assignedTo", "completedDate", "approvalCriteria", "additionalAttributes", "referenceData", "reassignmentHistory", "staticAttributes", "modifiedDate", "requestedTarget"]

    @field_validator('medium')
    def medium_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EMAIL', 'SLACK', 'TEAMS']):
            warnings.warn(f"must be one of enum values ('EMAIL', 'SLACK', 'TEAMS') unknown value: {value}")
        return value

    @field_validator('priority')
    def priority_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['HIGH', 'MEDIUM', 'LOW']):
            warnings.warn(f"must be one of enum values ('HIGH', 'MEDIUM', 'LOW') unknown value: {value}")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Approval from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in approvers (list)
        _items = []
        if self.approvers:
            for _item_approvers in self.approvers:
                if _item_approvers:
                    _items.append(_item_approvers.to_dict())
            _dict['approvers'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in name (list)
        _items = []
        if self.name:
            for _item_name in self.name:
                if _item_name:
                    _items.append(_item_name.to_dict())
            _dict['name'] = _items
        # override the default output from pydantic by calling `to_dict()` of batch_request
        if self.batch_request:
            _dict['batchRequest'] = self.batch_request.to_dict()
        # override the default output from pydantic by calling `to_dict()` of approval_config
        if self.approval_config:
            _dict['approvalConfig'] = self.approval_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in description (list)
        _items = []
        if self.description:
            for _item_description in self.description:
                if _item_description:
                    _items.append(_item_description.to_dict())
            _dict['description'] = _items
        # override the default output from pydantic by calling `to_dict()` of requester
        if self.requester:
            _dict['requester'] = self.requester.to_dict()
        # override the default output from pydantic by calling `to_dict()` of requestee
        if self.requestee:
            _dict['requestee'] = self.requestee.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in comments (list)
        _items = []
        if self.comments:
            for _item_comments in self.comments:
                if _item_comments:
                    _items.append(_item_comments.to_dict())
            _dict['comments'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in approved_by (list)
        _items = []
        if self.approved_by:
            for _item_approved_by in self.approved_by:
                if _item_approved_by:
                    _items.append(_item_approved_by.to_dict())
            _dict['approvedBy'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in rejected_by (list)
        _items = []
        if self.rejected_by:
            for _item_rejected_by in self.rejected_by:
                if _item_rejected_by:
                    _items.append(_item_rejected_by.to_dict())
            _dict['rejectedBy'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in assigned_to (list)
        _items = []
        if self.assigned_to:
            for _item_assigned_to in self.assigned_to:
                if _item_assigned_to:
                    _items.append(_item_assigned_to.to_dict())
            _dict['assignedTo'] = _items
        # override the default output from pydantic by calling `to_dict()` of approval_criteria
        if self.approval_criteria:
            _dict['approvalCriteria'] = self.approval_criteria.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in reference_data (list)
        _items = []
        if self.reference_data:
            for _item_reference_data in self.reference_data:
                if _item_reference_data:
                    _items.append(_item_reference_data.to_dict())
            _dict['referenceData'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in reassignment_history (list)
        _items = []
        if self.reassignment_history:
            for _item_reassignment_history in self.reassignment_history:
                if _item_reassignment_history:
                    _items.append(_item_reassignment_history.to_dict())
            _dict['reassignmentHistory'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in requested_target (list)
        _items = []
        if self.requested_target:
            for _item_requested_target in self.requested_target:
                if _item_requested_target:
                    _items.append(_item_requested_target.to_dict())
            _dict['requestedTarget'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Approval from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "tenantId": obj.get("tenantId"),
            "type": obj.get("type"),
            "approvers": [ApprovalIdentity.from_dict(_item) for _item in obj["approvers"]] if obj.get("approvers") is not None else None,
            "createdDate": obj.get("createdDate"),
            "dueDate": obj.get("dueDate"),
            "escalationStep": obj.get("escalationStep"),
            "serialStep": obj.get("serialStep"),
            "isEscalated": obj.get("isEscalated") if obj.get("isEscalated") is not None else False,
            "name": [ApprovalName.from_dict(_item) for _item in obj["name"]] if obj.get("name") is not None else None,
            "batchRequest": ApprovalBatch.from_dict(obj["batchRequest"]) if obj.get("batchRequest") is not None else None,
            "approvalConfig": ApprovalConfig.from_dict(obj["approvalConfig"]) if obj.get("approvalConfig") is not None else None,
            "description": [ApprovalDescription.from_dict(_item) for _item in obj["description"]] if obj.get("description") is not None else None,
            "medium": obj.get("medium"),
            "priority": obj.get("priority"),
            "requester": ApprovalIdentity.from_dict(obj["requester"]) if obj.get("requester") is not None else None,
            "requestee": ApprovalIdentity.from_dict(obj["requestee"]) if obj.get("requestee") is not None else None,
            "comments": [ApprovalComment1.from_dict(_item) for _item in obj["comments"]] if obj.get("comments") is not None else None,
            "approvedBy": [ApprovalIdentityRecord.from_dict(_item) for _item in obj["approvedBy"]] if obj.get("approvedBy") is not None else None,
            "rejectedBy": [ApprovalIdentityRecord.from_dict(_item) for _item in obj["rejectedBy"]] if obj.get("rejectedBy") is not None else None,
            "assignedTo": [ApprovalIdentity.from_dict(_item) for _item in obj["assignedTo"]] if obj.get("assignedTo") is not None else None,
            "completedDate": obj.get("completedDate"),
            "approvalCriteria": ApprovalApprovalCriteria.from_dict(obj["approvalCriteria"]) if obj.get("approvalCriteria") is not None else None,
            "additionalAttributes": obj.get("additionalAttributes"),
            "referenceData": [ApprovalReference.from_dict(_item) for _item in obj["referenceData"]] if obj.get("referenceData") is not None else None,
            "reassignmentHistory": [ApprovalReassignmentHistory.from_dict(_item) for _item in obj["reassignmentHistory"]] if obj.get("reassignmentHistory") is not None else None,
            "staticAttributes": obj.get("staticAttributes"),
            "modifiedDate": obj.get("modifiedDate"),
            "requestedTarget": [ApprovalRequestedTarget.from_dict(_item) for _item in obj["requestedTarget"]] if obj.get("requestedTarget") is not None else None
        })
        return _obj


