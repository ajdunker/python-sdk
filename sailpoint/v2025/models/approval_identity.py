# coding: utf-8

"""
    Identity Security Cloud V2025 API

    Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

    The version of the OpenAPI document: v2025
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json
import warnings

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from sailpoint.v2025.models.approval_identity_members_inner import ApprovalIdentityMembersInner
from sailpoint.v2025.models.approval_identity_owner_of_inner import ApprovalIdentityOwnerOfInner
from typing import Optional, Set
from typing_extensions import Self

class ApprovalIdentity(BaseModel):
    """
    Approval Identity Object
    """ # noqa: E501
    email: Optional[StrictStr] = Field(default=None, description="Email address.")
    identity_id: Optional[StrictStr] = Field(default=None, description="Identity ID.", alias="identityID")
    members: Optional[List[ApprovalIdentityMembersInner]] = Field(default=None, description="List of members of a governance group. Will be omitted if the identity is not a governance group.")
    name: Optional[StrictStr] = Field(default=None, description="Name of the identity.")
    owner_of: Optional[List[ApprovalIdentityOwnerOfInner]] = Field(default=None, description="List of owned items. For example, will show the items in which a ROLE_OWNER owns. Omitted if not an owner of anything.", alias="ownerOf")
    serial_order: Optional[StrictInt] = Field(default=None, description="The serial step of the identity in the approval. For example serialOrder 1 is the first identity to action in an approval request chain. Parallel approvals are set to 0.", alias="serialOrder")
    type: Optional[StrictStr] = Field(default=None, description="Type of identity.")
    __properties: ClassVar[List[str]] = ["email", "identityID", "members", "name", "ownerOf", "serialOrder", "type"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['IDENTITY', 'MANAGER_OF', 'GOVERNANCE_GROUP', 'SOURCE_OWNER', 'ROLE_OWNER', 'ACCESS_PROFILE_OWNER', 'ENTITLEMENT_OWNER', 'APPLICATION_OWNER']):
            warnings.warn(f"must be one of enum values ('IDENTITY', 'MANAGER_OF', 'GOVERNANCE_GROUP', 'SOURCE_OWNER', 'ROLE_OWNER', 'ACCESS_PROFILE_OWNER', 'ENTITLEMENT_OWNER', 'APPLICATION_OWNER') unknown value: {value}")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ApprovalIdentity from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in members (list)
        _items = []
        if self.members:
            for _item_members in self.members:
                if _item_members:
                    _items.append(_item_members.to_dict())
            _dict['members'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in owner_of (list)
        _items = []
        if self.owner_of:
            for _item_owner_of in self.owner_of:
                if _item_owner_of:
                    _items.append(_item_owner_of.to_dict())
            _dict['ownerOf'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ApprovalIdentity from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "email": obj.get("email"),
            "identityID": obj.get("identityID"),
            "members": [ApprovalIdentityMembersInner.from_dict(_item) for _item in obj["members"]] if obj.get("members") is not None else None,
            "name": obj.get("name"),
            "ownerOf": [ApprovalIdentityOwnerOfInner.from_dict(_item) for _item in obj["ownerOf"]] if obj.get("ownerOf") is not None else None,
            "serialOrder": obj.get("serialOrder"),
            "type": obj.get("type")
        })
        return _obj


