# coding: utf-8

"""
    IdentityNow cc (private) APIs

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from typing import Any, ClassVar, Dict, List, Optional, Union
from pydantic import BaseModel, StrictBool, StrictFloat, StrictInt, StrictStr
from pydantic import Field
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self


class GetIdentity200ResponseOrg(BaseModel):
    """
    GetIdentity200ResponseOrg
    """

  # noqa: E501
    name: Optional[StrictStr] = None
    script_name: Optional[StrictStr] = Field(default=None, alias="scriptName")
    mode: Optional[StrictStr] = None
    num_questions: Optional[Union[StrictFloat,
                                  StrictInt]] = Field(default=None,
                                                      alias="numQuestions")
    status: Optional[StrictStr] = None
    max_registered_users: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None, alias="maxRegisteredUsers")
    pod: Optional[StrictStr] = None
    pwd_reset_personal_phone: Optional[StrictBool] = Field(
        default=None, alias="pwdResetPersonalPhone")
    pwd_reset_personal_email: Optional[StrictBool] = Field(
        default=None, alias="pwdResetPersonalEmail")
    pwd_reset_kba: Optional[StrictBool] = Field(default=None,
                                                alias="pwdResetKba")
    pwd_reset_email: Optional[StrictBool] = Field(default=None,
                                                  alias="pwdResetEmail")
    pwd_reset_duo: Optional[StrictBool] = Field(default=None,
                                                alias="pwdResetDuo")
    pwd_reset_phone_mask: Optional[StrictBool] = Field(
        default=None, alias="pwdResetPhoneMask")
    auth_error_text: Optional[Union[str, Any]] = Field(default=None,
                                                       alias="authErrorText")
    strong_auth_kba: Optional[StrictBool] = Field(default=None,
                                                  alias="strongAuthKba")
    strong_auth_personal_phone: Optional[StrictBool] = Field(
        default=None, alias="strongAuthPersonalPhone")
    strong_auth_personal_email: Optional[StrictBool] = Field(
        default=None, alias="strongAuthPersonalEmail")
    integrations: Optional[List[Union[str, Any]]] = None
    product_name: Optional[StrictStr] = Field(default=None,
                                              alias="productName")
    kba_req_for_authn: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None, alias="kbaReqForAuthn")
    kba_req_answers: Optional[Union[StrictFloat,
                                    StrictInt]] = Field(default=None,
                                                        alias="kbaReqAnswers")
    lockout_attempt_threshold: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None, alias="lockoutAttemptThreshold")
    lockout_time_minutes: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None, alias="lockoutTimeMinutes")
    usage_cert_required: Optional[StrictBool] = Field(
        default=None, alias="usageCertRequired")
    admin_strong_auth_required: Optional[StrictBool] = Field(
        default=None, alias="adminStrongAuthRequired")
    enable_external_password_change: Optional[StrictBool] = Field(
        default=None, alias="enableExternalPasswordChange")
    enable_password_replay: Optional[StrictBool] = Field(
        default=None, alias="enablePasswordReplay")
    enable_automatic_password_replay: Optional[StrictBool] = Field(
        default=None, alias="enableAutomaticPasswordReplay")
    notify_authentication_setting_change: Optional[StrictBool] = Field(
        default=None, alias="notifyAuthenticationSettingChange")
    netmasks: Optional[Union[str, Any]] = None
    country_codes: Optional[Union[str, Any]] = Field(default=None,
                                                     alias="countryCodes")
    white_list: Optional[StrictBool] = Field(default=None, alias="whiteList")
    username_empty_text: Optional[Union[str, Any]] = Field(
        default=None, alias="usernameEmptyText")
    username_label: Optional[Union[str, Any]] = Field(default=None,
                                                      alias="usernameLabel")
    enable_automation_generation: Optional[StrictBool] = Field(
        default=None, alias="enableAutomationGeneration")
    email_test_mode: Optional[StrictBool] = Field(default=None,
                                                  alias="emailTestMode")
    email_test_address: Optional[StrictStr] = Field(default=None,
                                                    alias="emailTestAddress")
    org_type: Optional[StrictStr] = Field(default=None, alias="orgType")
    password_replay_state: Optional[StrictStr] = Field(
        default=None, alias="passwordReplayState")
    system_notification_config: Optional[StrictStr] = Field(
        default=None, alias="systemNotificationConfig")
    redirect_patterns: Optional[StrictStr] = Field(default=None,
                                                   alias="redirectPatterns")
    max_cluster_debug_hours: Optional[StrictStr] = Field(
        default=None, alias="maxClusterDebugHours")
    brand_name: Optional[StrictStr] = Field(default=None, alias="brandName")
    logo: Optional[Union[str, Any]] = None
    email_from_address: Optional[Union[str,
                                       Any]] = Field(default=None,
                                                     alias="emailFromAddress")
    standard_logo_url: Optional[Union[str,
                                      Any]] = Field(default=None,
                                                    alias="standardLogoUrl")
    narrow_logo_url: Optional[Union[str, Any]] = Field(default=None,
                                                       alias="narrowLogoUrl")
    action_button_color: Optional[StrictStr] = Field(default=None,
                                                     alias="actionButtonColor")
    active_link_color: Optional[StrictStr] = Field(default=None,
                                                   alias="activeLinkColor")
    navigation_color: Optional[StrictStr] = Field(default=None,
                                                  alias="navigationColor")
    __properties: ClassVar[List[str]] = [
        "name", "scriptName", "mode", "numQuestions", "status",
        "maxRegisteredUsers", "pod", "pwdResetPersonalPhone",
        "pwdResetPersonalEmail", "pwdResetKba", "pwdResetEmail", "pwdResetDuo",
        "pwdResetPhoneMask", "authErrorText", "strongAuthKba",
        "strongAuthPersonalPhone", "strongAuthPersonalEmail", "integrations",
        "productName", "kbaReqForAuthn", "kbaReqAnswers",
        "lockoutAttemptThreshold", "lockoutTimeMinutes", "usageCertRequired",
        "adminStrongAuthRequired", "enableExternalPasswordChange",
        "enablePasswordReplay", "enableAutomaticPasswordReplay",
        "notifyAuthenticationSettingChange", "netmasks", "countryCodes",
        "whiteList", "usernameEmptyText", "usernameLabel",
        "enableAutomationGeneration", "emailTestMode", "emailTestAddress",
        "orgType", "passwordReplayState", "systemNotificationConfig",
        "redirectPatterns", "maxClusterDebugHours", "brandName", "logo",
        "emailFromAddress", "standardLogoUrl", "narrowLogoUrl",
        "actionButtonColor", "activeLinkColor", "navigationColor"
    ]

    model_config = {"populate_by_name": True, "validate_assignment": True}

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of GetIdentity200ResponseOrg from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={},
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of GetIdentity200ResponseOrg from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name":
            obj.get("name"),
            "scriptName":
            obj.get("scriptName"),
            "mode":
            obj.get("mode"),
            "numQuestions":
            obj.get("numQuestions"),
            "status":
            obj.get("status"),
            "maxRegisteredUsers":
            obj.get("maxRegisteredUsers"),
            "pod":
            obj.get("pod"),
            "pwdResetPersonalPhone":
            obj.get("pwdResetPersonalPhone"),
            "pwdResetPersonalEmail":
            obj.get("pwdResetPersonalEmail"),
            "pwdResetKba":
            obj.get("pwdResetKba"),
            "pwdResetEmail":
            obj.get("pwdResetEmail"),
            "pwdResetDuo":
            obj.get("pwdResetDuo"),
            "pwdResetPhoneMask":
            obj.get("pwdResetPhoneMask"),
            "authErrorText":
            obj.get("authErrorText"),
            "strongAuthKba":
            obj.get("strongAuthKba"),
            "strongAuthPersonalPhone":
            obj.get("strongAuthPersonalPhone"),
            "strongAuthPersonalEmail":
            obj.get("strongAuthPersonalEmail"),
            "integrations":
            obj.get("integrations"),
            "productName":
            obj.get("productName"),
            "kbaReqForAuthn":
            obj.get("kbaReqForAuthn"),
            "kbaReqAnswers":
            obj.get("kbaReqAnswers"),
            "lockoutAttemptThreshold":
            obj.get("lockoutAttemptThreshold"),
            "lockoutTimeMinutes":
            obj.get("lockoutTimeMinutes"),
            "usageCertRequired":
            obj.get("usageCertRequired"),
            "adminStrongAuthRequired":
            obj.get("adminStrongAuthRequired"),
            "enableExternalPasswordChange":
            obj.get("enableExternalPasswordChange"),
            "enablePasswordReplay":
            obj.get("enablePasswordReplay"),
            "enableAutomaticPasswordReplay":
            obj.get("enableAutomaticPasswordReplay"),
            "notifyAuthenticationSettingChange":
            obj.get("notifyAuthenticationSettingChange"),
            "netmasks":
            obj.get("netmasks"),
            "countryCodes":
            obj.get("countryCodes"),
            "whiteList":
            obj.get("whiteList"),
            "usernameEmptyText":
            obj.get("usernameEmptyText"),
            "usernameLabel":
            obj.get("usernameLabel"),
            "enableAutomationGeneration":
            obj.get("enableAutomationGeneration"),
            "emailTestMode":
            obj.get("emailTestMode"),
            "emailTestAddress":
            obj.get("emailTestAddress"),
            "orgType":
            obj.get("orgType"),
            "passwordReplayState":
            obj.get("passwordReplayState"),
            "systemNotificationConfig":
            obj.get("systemNotificationConfig"),
            "redirectPatterns":
            obj.get("redirectPatterns"),
            "maxClusterDebugHours":
            obj.get("maxClusterDebugHours"),
            "brandName":
            obj.get("brandName"),
            "logo":
            obj.get("logo"),
            "emailFromAddress":
            obj.get("emailFromAddress"),
            "standardLogoUrl":
            obj.get("standardLogoUrl"),
            "narrowLogoUrl":
            obj.get("narrowLogoUrl"),
            "actionButtonColor":
            obj.get("actionButtonColor"),
            "activeLinkColor":
            obj.get("activeLinkColor"),
            "navigationColor":
            obj.get("navigationColor")
        })
        return _obj
