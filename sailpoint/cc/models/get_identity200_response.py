# coding: utf-8

"""
    IdentityNow cc (private) APIs

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from typing import Any, ClassVar, Dict, List, Optional, Union
from pydantic import BaseModel, StrictBool, StrictFloat, StrictInt, StrictStr
from pydantic import Field
from sailpoint.cc.models.get_identity200_response_auth import GetIdentity200ResponseAuth
from sailpoint.cc.models.get_identity200_response_org import GetIdentity200ResponseOrg
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self


class GetIdentity200Response(BaseModel):
    """
    GetIdentity200Response
    """

  # noqa: E501
    id: Optional[StrictStr] = None
    alias: Optional[StrictStr] = None
    uid: Optional[StrictStr] = None
    name: Optional[StrictStr] = None
    display_name: Optional[StrictStr] = Field(default=None,
                                              alias="displayName")
    uuid: Optional[StrictStr] = None
    encryption_key: Optional[Union[str, Any]] = Field(default=None,
                                                      alias="encryptionKey")
    encryption_check: Optional[Union[str,
                                     Any]] = Field(default=None,
                                                   alias="encryptionCheck")
    status: Optional[StrictStr] = None
    pending: Optional[StrictBool] = None
    password_reset_since_last_login: Optional[StrictBool] = Field(
        default=None, alias="passwordResetSinceLastLogin")
    usage_cert_attested: Optional[Union[str, Any]] = Field(
        default=None, alias="usageCertAttested")
    user_flags: Optional[Union[str, Any]] = Field(default=None,
                                                  alias="userFlags")
    enabled: Optional[StrictBool] = None
    alt_auth_via: Optional[StrictStr] = Field(default=None, alias="altAuthVia")
    alt_auth_via_integration_data: Optional[Union[str, Any]] = Field(
        default=None, alias="altAuthViaIntegrationData")
    kba_answers: Optional[Union[StrictFloat,
                                StrictInt]] = Field(default=None,
                                                    alias="kbaAnswers")
    disable_password_reset: Optional[StrictBool] = Field(
        default=None, alias="disablePasswordReset")
    pta_source_id: Optional[Union[str, Any]] = Field(default=None,
                                                     alias="ptaSourceId")
    supports_password_push: Optional[StrictBool] = Field(
        default=None, alias="supportsPasswordPush")
    attributes: Optional[Union[str, Any]] = None
    external_id: Optional[StrictStr] = Field(default=None, alias="externalId")
    role: Optional[List[Union[str, Any]]] = None
    phone: Optional[Union[str, Any]] = None
    email: Optional[StrictStr] = None
    personal_email: Optional[Union[str, Any]] = Field(default=None,
                                                      alias="personalEmail")
    employee_number: Optional[Union[str, Any]] = Field(default=None,
                                                       alias="employeeNumber")
    risk_score: Optional[Union[StrictFloat,
                               StrictInt]] = Field(default=None,
                                                   alias="riskScore")
    feature_flags: Optional[Union[str, Any]] = Field(default=None,
                                                     alias="featureFlags")
    feature: Optional[List[StrictStr]] = None
    org_encryption_key: Optional[StrictStr] = Field(default=None,
                                                    alias="orgEncryptionKey")
    org_encryption_key_id: Optional[StrictStr] = Field(
        default=None, alias="orgEncryptionKeyId")
    meta: Optional[Union[str, Any]] = None
    org: Optional[GetIdentity200ResponseOrg] = None
    step_up_auth: Optional[StrictBool] = Field(default=None,
                                               alias="stepUpAuth")
    bx_install_prompted: Optional[StrictBool] = Field(
        default=None, alias="bxInstallPrompted")
    federated_login: Optional[StrictBool] = Field(default=None,
                                                  alias="federatedLogin")
    auth: Optional[GetIdentity200ResponseAuth] = None
    on_network: Optional[StrictBool] = Field(default=None, alias="onNetwork")
    on_trusted_geo: Optional[StrictBool] = Field(default=None,
                                                 alias="onTrustedGeo")
    login_url: Optional[StrictStr] = Field(default=None, alias="loginUrl")
    __properties: ClassVar[List[str]] = [
        "id", "alias", "uid", "name", "displayName", "uuid", "encryptionKey",
        "encryptionCheck", "status", "pending", "passwordResetSinceLastLogin",
        "usageCertAttested", "userFlags", "enabled", "altAuthVia",
        "altAuthViaIntegrationData", "kbaAnswers", "disablePasswordReset",
        "ptaSourceId", "supportsPasswordPush", "attributes", "externalId",
        "role", "phone", "email", "personalEmail", "employeeNumber",
        "riskScore", "featureFlags", "feature", "orgEncryptionKey",
        "orgEncryptionKeyId", "meta", "org", "stepUpAuth", "bxInstallPrompted",
        "federatedLogin", "auth", "onNetwork", "onTrustedGeo", "loginUrl"
    ]

    model_config = {"populate_by_name": True, "validate_assignment": True}

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of GetIdentity200Response from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={},
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of org
        if self.org:
            _dict['org'] = self.org.to_dict()
        # override the default output from pydantic by calling `to_dict()` of auth
        if self.auth:
            _dict['auth'] = self.auth.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of GetIdentity200Response from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id":
            obj.get("id"),
            "alias":
            obj.get("alias"),
            "uid":
            obj.get("uid"),
            "name":
            obj.get("name"),
            "displayName":
            obj.get("displayName"),
            "uuid":
            obj.get("uuid"),
            "encryptionKey":
            obj.get("encryptionKey"),
            "encryptionCheck":
            obj.get("encryptionCheck"),
            "status":
            obj.get("status"),
            "pending":
            obj.get("pending"),
            "passwordResetSinceLastLogin":
            obj.get("passwordResetSinceLastLogin"),
            "usageCertAttested":
            obj.get("usageCertAttested"),
            "userFlags":
            obj.get("userFlags"),
            "enabled":
            obj.get("enabled"),
            "altAuthVia":
            obj.get("altAuthVia"),
            "altAuthViaIntegrationData":
            obj.get("altAuthViaIntegrationData"),
            "kbaAnswers":
            obj.get("kbaAnswers"),
            "disablePasswordReset":
            obj.get("disablePasswordReset"),
            "ptaSourceId":
            obj.get("ptaSourceId"),
            "supportsPasswordPush":
            obj.get("supportsPasswordPush"),
            "attributes":
            obj.get("attributes"),
            "externalId":
            obj.get("externalId"),
            "role":
            obj.get("role"),
            "phone":
            obj.get("phone"),
            "email":
            obj.get("email"),
            "personalEmail":
            obj.get("personalEmail"),
            "employeeNumber":
            obj.get("employeeNumber"),
            "riskScore":
            obj.get("riskScore"),
            "featureFlags":
            obj.get("featureFlags"),
            "feature":
            obj.get("feature"),
            "orgEncryptionKey":
            obj.get("orgEncryptionKey"),
            "orgEncryptionKeyId":
            obj.get("orgEncryptionKeyId"),
            "meta":
            obj.get("meta"),
            "org":
            GetIdentity200ResponseOrg.from_dict(obj.get("org"))
            if obj.get("org") is not None else None,
            "stepUpAuth":
            obj.get("stepUpAuth"),
            "bxInstallPrompted":
            obj.get("bxInstallPrompted"),
            "federatedLogin":
            obj.get("federatedLogin"),
            "auth":
            GetIdentity200ResponseAuth.from_dict(obj.get("auth"))
            if obj.get("auth") is not None else None,
            "onNetwork":
            obj.get("onNetwork"),
            "onTrustedGeo":
            obj.get("onTrustedGeo"),
            "loginUrl":
            obj.get("loginUrl")
        })
        return _obj
