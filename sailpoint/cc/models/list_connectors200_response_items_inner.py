# coding: utf-8

"""
    IdentityNow cc (private) APIs

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from typing import Any, Dict, List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr, conlist


class ListConnectors200ResponseItemsInner(BaseModel):
    """
    ListConnectors200ResponseItemsInner
    """
    application_xml: Optional[StrictStr] = Field(None, alias="applicationXml")
    class_name: Optional[StrictStr] = Field(None, alias="className")
    connector_metadata: Optional[Dict[str,
                                      Any]] = Field(None,
                                                    alias="connectorMetadata")
    correlation_config_xml: Optional[StrictStr] = Field(
        None, alias="correlationConfigXml")
    direct_connect: Optional[StrictBool] = Field(None, alias="directConnect")
    file_upload: Optional[StrictBool] = Field(None, alias="fileUpload")
    id: Optional[StrictInt] = None
    name: Optional[StrictStr] = None
    s3_location: Optional[StrictStr] = Field(None, alias="s3Location")
    scope: Optional[StrictStr] = None
    script_name: Optional[StrictStr] = Field(None, alias="scriptName")
    source_config: Optional[StrictStr] = Field(None, alias="sourceConfig")
    source_config_from: Optional[StrictStr] = Field(None,
                                                    alias="sourceConfigFrom")
    source_config_xml: Optional[StrictStr] = Field(None,
                                                   alias="sourceConfigXml")
    status: Optional[StrictStr] = None
    translation_properties: Optional[Dict[str, Any]] = Field(
        None, alias="translationProperties")
    type: Optional[StrictStr] = None
    uploaded_files: Optional[conlist(Dict[str,
                                          Any])] = Field(None,
                                                         alias="uploadedFiles")
    __properties = [
        "applicationXml", "className", "connectorMetadata",
        "correlationConfigXml", "directConnect", "fileUpload", "id", "name",
        "s3Location", "scope", "scriptName", "sourceConfig",
        "sourceConfigFrom", "sourceConfigXml", "status",
        "translationProperties", "type", "uploadedFiles"
    ]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ListConnectors200ResponseItemsInner:
        """Create an instance of ListConnectors200ResponseItemsInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # set to None if application_xml (nullable) is None
        # and __fields_set__ contains the field
        if self.application_xml is None and "application_xml" in self.__fields_set__:
            _dict['applicationXml'] = None

        # set to None if class_name (nullable) is None
        # and __fields_set__ contains the field
        if self.class_name is None and "class_name" in self.__fields_set__:
            _dict['className'] = None

        # set to None if correlation_config_xml (nullable) is None
        # and __fields_set__ contains the field
        if self.correlation_config_xml is None and "correlation_config_xml" in self.__fields_set__:
            _dict['correlationConfigXml'] = None

        # set to None if s3_location (nullable) is None
        # and __fields_set__ contains the field
        if self.s3_location is None and "s3_location" in self.__fields_set__:
            _dict['s3Location'] = None

        # set to None if source_config (nullable) is None
        # and __fields_set__ contains the field
        if self.source_config is None and "source_config" in self.__fields_set__:
            _dict['sourceConfig'] = None

        # set to None if source_config_from (nullable) is None
        # and __fields_set__ contains the field
        if self.source_config_from is None and "source_config_from" in self.__fields_set__:
            _dict['sourceConfigFrom'] = None

        # set to None if source_config_xml (nullable) is None
        # and __fields_set__ contains the field
        if self.source_config_xml is None and "source_config_xml" in self.__fields_set__:
            _dict['sourceConfigXml'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ListConnectors200ResponseItemsInner:
        """Create an instance of ListConnectors200ResponseItemsInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ListConnectors200ResponseItemsInner.parse_obj(obj)

        _obj = ListConnectors200ResponseItemsInner.parse_obj({
            "application_xml":
            obj.get("applicationXml"),
            "class_name":
            obj.get("className"),
            "connector_metadata":
            obj.get("connectorMetadata"),
            "correlation_config_xml":
            obj.get("correlationConfigXml"),
            "direct_connect":
            obj.get("directConnect"),
            "file_upload":
            obj.get("fileUpload"),
            "id":
            obj.get("id"),
            "name":
            obj.get("name"),
            "s3_location":
            obj.get("s3Location"),
            "scope":
            obj.get("scope"),
            "script_name":
            obj.get("scriptName"),
            "source_config":
            obj.get("sourceConfig"),
            "source_config_from":
            obj.get("sourceConfigFrom"),
            "source_config_xml":
            obj.get("sourceConfigXml"),
            "status":
            obj.get("status"),
            "translation_properties":
            obj.get("translationProperties"),
            "type":
            obj.get("type"),
            "uploaded_files":
            obj.get("uploadedFiles")
        })
        return _obj
