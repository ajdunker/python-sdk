# coding: utf-8

"""
    IdentityNow cc (private) APIs

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr, validator

class UpdateUserPermissionsRequest(BaseModel):
    """
    UpdateUserPermissionsRequest
    """
    ids: Optional[StrictStr] = None
    is_admin: Optional[StrictStr] = Field(None, alias="isAdmin", description="Indicates if user should be an IDN Admin.  \"0\" for false, \"1\" for true.")
    admin_type: Optional[StrictStr] = Field(None, alias="adminType")
    __properties = ["ids", "isAdmin", "adminType"]

    @validator('admin_type')
    def admin_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('ADMIN', 'CERT_ADMIN', 'HELPDESK', 'REPORT_ADMIN', 'ROLE_ADMIN', 'ROLE_SUBADMIN', 'SOURCE_ADMIN', 'SOURCE_SUBADMIN'):
            raise ValueError("must be one of enum values ('ADMIN', 'CERT_ADMIN', 'HELPDESK', 'REPORT_ADMIN', 'ROLE_ADMIN', 'ROLE_SUBADMIN', 'SOURCE_ADMIN', 'SOURCE_SUBADMIN')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> UpdateUserPermissionsRequest:
        """Create an instance of UpdateUserPermissionsRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> UpdateUserPermissionsRequest:
        """Create an instance of UpdateUserPermissionsRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return UpdateUserPermissionsRequest.parse_obj(obj)

        _obj = UpdateUserPermissionsRequest.parse_obj({
            "ids": obj.get("ids"),
            "is_admin": obj.get("isAdmin"),
            "admin_type": obj.get("adminType")
        })
        return _obj


