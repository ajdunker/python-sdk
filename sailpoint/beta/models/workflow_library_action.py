# coding: utf-8

"""
    IdentityNow Beta API

    Use these APIs to interact with the IdentityNow platform to achieve repeatable, automated processes with greater scalability. These APIs are in beta and are subject to change. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

    The version of the OpenAPI document: 3.1.0-beta
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from typing import Any, Dict, List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, conlist
from beta.models.workflow_library_form_fields import WorkflowLibraryFormFields


class WorkflowLibraryAction(BaseModel):
    """
    WorkflowLibraryAction
    """
    id: Optional[StrictStr] = Field(
        None,
        description="Action ID. This is a static namespaced ID for the action")
    name: Optional[StrictStr] = Field(None, description="Action Name")
    type: Optional[StrictStr] = Field(None, description="Action type")
    description: Optional[StrictStr] = Field(None,
                                             description="Action Description")
    form_fields: Optional[conlist(WorkflowLibraryFormFields)] = Field(
        None,
        alias="formFields",
        description="One or more inputs that the action accepts")
    is_dynamic_schema: Optional[StrictBool] = Field(
        None,
        alias="isDynamicSchema",
        description=
        "Determines whether the dynamic output schema is returned in place of the action's output schema. The dynamic schema lists non-static properties, like properties of a workflow form where each form has different fields. These will be provided dynamically based on available form fields."
    )
    output_schema: Optional[Dict[str, Any]] = Field(
        None,
        alias="outputSchema",
        description=
        "Defines the output schema, if any, that this action produces.")
    __properties = [
        "id", "name", "type", "description", "formFields", "isDynamicSchema",
        "outputSchema"
    ]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> WorkflowLibraryAction:
        """Create an instance of WorkflowLibraryAction from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in form_fields (list)
        _items = []
        if self.form_fields:
            for _item in self.form_fields:
                if _item:
                    _items.append(_item.to_dict())
            _dict['formFields'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> WorkflowLibraryAction:
        """Create an instance of WorkflowLibraryAction from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return WorkflowLibraryAction.parse_obj(obj)

        _obj = WorkflowLibraryAction.parse_obj({
            "id":
            obj.get("id"),
            "name":
            obj.get("name"),
            "type":
            obj.get("type"),
            "description":
            obj.get("description"),
            "form_fields": [
                WorkflowLibraryFormFields.from_dict(_item)
                for _item in obj.get("formFields")
            ] if obj.get("formFields") is not None else None,
            "is_dynamic_schema":
            obj.get("isDynamicSchema"),
            "output_schema":
            obj.get("outputSchema")
        })
        return _obj
