# coding: utf-8

"""
    IdentityNow Beta API

    Use these APIs to interact with the IdentityNow platform to achieve repeatable, automated processes with greater scalability. These APIs are in beta and are subject to change. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

    The version of the OpenAPI document: 3.1.0-beta
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr, validator


class AccountAggregationStatus(BaseModel):
    """
    AccountAggregationStatus
    """
    start: Optional[datetime] = Field(
        None, description="When the aggregation started.")
    status: Optional[StrictStr] = Field(
        None,
        description=
        "STARTED - Aggregation started, but source account iteration has not completed.  ACCOUNTS_COLLECTED - Source account iteration completed, but all accounts have not yet been processed.  COMPLETED - Aggregation completed (*possibly with errors*).  CANCELLED - Aggregation cancelled by user.  RETRIED - Aggregation retried because of connectivity issues with the Virtual Appliance.  TERMINATED - Aggregation marked as failed after 3 tries after connectivity issues with the Virtual Appliance. "
    )
    total_accounts: Optional[StrictInt] = Field(
        None,
        alias="totalAccounts",
        description=
        "The total number of *NEW, CHANGED and DELETED* accounts that need to be processed for this aggregation. This does not include accounts that were unchanged since the previous aggregation. This can be zero if there were no new, changed or deleted accounts since the previous aggregation. *Only available when status is ACCOUNTS_COLLECTED or COMPLETED.*"
    )
    processed_accounts: Optional[StrictInt] = Field(
        None,
        alias="processedAccounts",
        description=
        "The number of *NEW, CHANGED and DELETED* accounts that have been processed so far. This reflects the number of accounts that have been processed at the time of the API call, and may increase on subsequent API calls while the status is ACCOUNTS_COLLECTED. *Only available when status is ACCOUNTS_COLLECTED or COMPLETED.*"
    )
    __properties = ["start", "status", "totalAccounts", "processedAccounts"]

    @validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('STARTED', 'ACCOUNTS_COLLECTED', 'COMPLETED',
                         'CANCELLED', 'RETRIED', 'TERMINATED'):
            raise ValueError(
                "must be one of enum values ('STARTED', 'ACCOUNTS_COLLECTED', 'COMPLETED', 'CANCELLED', 'RETRIED', 'TERMINATED')"
            )
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> AccountAggregationStatus:
        """Create an instance of AccountAggregationStatus from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> AccountAggregationStatus:
        """Create an instance of AccountAggregationStatus from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return AccountAggregationStatus.parse_obj(obj)

        _obj = AccountAggregationStatus.parse_obj({
            "start":
            obj.get("start"),
            "status":
            obj.get("status"),
            "total_accounts":
            obj.get("totalAccounts"),
            "processed_accounts":
            obj.get("processedAccounts")
        })
        return _obj
