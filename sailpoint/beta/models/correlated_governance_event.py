# coding: utf-8

"""
    IdentityNow Beta API

    Use these APIs to interact with the IdentityNow platform to achieve repeatable, automated processes with greater scalability. These APIs are in beta and are subject to change. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

    The version of the OpenAPI document: 3.1.0-beta
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist, validator
from sailpoint.beta.models.certifier_response import CertifierResponse


class CorrelatedGovernanceEvent(BaseModel):
    """
    CorrelatedGovernanceEvent
    """
    name: Optional[StrictStr] = Field(
        None,
        description=
        "The name of the governance event, such as the certification name or access request ID."
    )
    dt: Optional[StrictStr] = Field(
        None,
        description=
        "The date that the certification or access request was completed.")
    type: Optional[StrictStr] = Field(
        None, description="The type of governance event.")
    governance_id: Optional[StrictStr] = Field(
        None,
        alias="governanceId",
        description=
        "The ID of the instance that caused the event - either the certification ID or access request ID."
    )
    owners: Optional[conlist(CertifierResponse)] = Field(
        None,
        description=
        "The owners of the governance event (the certifiers or approvers)")
    reviewers: Optional[conlist(CertifierResponse)] = Field(
        None,
        description=
        "The owners of the governance event (the certifiers or approvers), this field should be preferred over owners"
    )
    decision_maker: Optional[CertifierResponse] = Field(None,
                                                        alias="decisionMaker")
    __properties = [
        "name", "dt", "type", "governanceId", "owners", "reviewers",
        "decisionMaker"
    ]

    @validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('certification', 'accessRequest'):
            raise ValueError(
                "must be one of enum values ('certification', 'accessRequest')"
            )
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CorrelatedGovernanceEvent:
        """Create an instance of CorrelatedGovernanceEvent from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in owners (list)
        _items = []
        if self.owners:
            for _item in self.owners:
                if _item:
                    _items.append(_item.to_dict())
            _dict['owners'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in reviewers (list)
        _items = []
        if self.reviewers:
            for _item in self.reviewers:
                if _item:
                    _items.append(_item.to_dict())
            _dict['reviewers'] = _items
        # override the default output from pydantic by calling `to_dict()` of decision_maker
        if self.decision_maker:
            _dict['decisionMaker'] = self.decision_maker.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CorrelatedGovernanceEvent:
        """Create an instance of CorrelatedGovernanceEvent from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CorrelatedGovernanceEvent.parse_obj(obj)

        _obj = CorrelatedGovernanceEvent.parse_obj({
            "name":
            obj.get("name"),
            "dt":
            obj.get("dt"),
            "type":
            obj.get("type"),
            "governance_id":
            obj.get("governanceId"),
            "owners": [
                CertifierResponse.from_dict(_item)
                for _item in obj.get("owners")
            ] if obj.get("owners") is not None else None,
            "reviewers": [
                CertifierResponse.from_dict(_item)
                for _item in obj.get("reviewers")
            ] if obj.get("reviewers") is not None else None,
            "decision_maker":
            CertifierResponse.from_dict(obj.get("decisionMaker"))
            if obj.get("decisionMaker") is not None else None
        })
        return _obj
