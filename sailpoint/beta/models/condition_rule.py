# coding: utf-8

"""
    IdentityNow Beta API

    Use these APIs to interact with the IdentityNow platform to achieve repeatable, automated processes with greater scalability. These APIs are in beta and are subject to change. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

    The version of the OpenAPI document: 3.1.0-beta
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from typing import Any, Dict, Optional
from pydantic import BaseModel, Field, StrictStr, validator


class ConditionRule(BaseModel):
    """
    ConditionRule
    """
    operator: Optional[StrictStr] = Field(
        None,
        description=
        "Operator is a ConditionRuleComparisonOperatorType value EQ ConditionRuleComparisonOperatorTypeEquals  ConditionRuleComparisonOperatorTypeEquals is a comparison operator, the source and target are compared for equality NE ConditionRuleComparisonOperatorTypeNotEquals  ConditionRuleComparisonOperatorTypeNotEquals is a comparison operator, the source and target are compared for the opposite of equality CO ConditionRuleComparisonOperatorTypeContains  ConditionRuleComparisonOperatorTypeContains is a comparison operator, the source is searched to see if it contains the value NOT_CO ConditionRuleComparisonOperatorTypeNotContains IN ConditionRuleComparisonOperatorTypeIncludes  ConditionRuleComparisonOperatorTypeIncludes is a comparison operator, the source will be searched if it equals any of the values NOT_IN ConditionRuleComparisonOperatorTypeNotIncludes EM ConditionRuleComparisonOperatorTypeEmpty NOT_EM ConditionRuleComparisonOperatorTypeNotEmpty SW ConditionRuleComparisonOperatorTypeStartsWith  ConditionRuleComparisonOperatorTypeStartsWith checks if a string starts with another substring of the same string, this operator is case-sensitive NOT_SW ConditionRuleComparisonOperatorTypeNotStartsWith EW ConditionRuleComparisonOperatorTypeEndsWith  ConditionRuleComparisonOperatorTypeEndsWith checks if a string ends with another substring of the same string, this operator is case-sensitive NOT_EW ConditionRuleComparisonOperatorTypeNotEndsWith"
    )
    source: Optional[StrictStr] = Field(
        None,
        description=
        "Source, if the sourceType is ConditionRuleSourceTypeInput then the source type is the name of the form input to accept. While if the sourceType is ConditionRuleSourceTypeElement then source is the name of a technical key of an element to retrieve its value"
    )
    source_type: Optional[StrictStr] = Field(
        None,
        alias="sourceType",
        description=
        "SourceType defines what type of object is being selected. Either a reference to a form input (by input name), or a form element (by technical key) INPUT ConditionRuleSourceTypeInput ELEMENT ConditionRuleSourceTypeElement"
    )
    value: Optional[Dict[str, Any]] = Field(
        None, description="Value is the value based on the ValueType")
    value_type: Optional[StrictStr] = Field(
        None,
        alias="valueType",
        description=
        "ValueType is a ConditionRuleValueType type STRING ConditionRuleValueTypeString  ConditionRuleValueTypeString the value field is a static string STRING_LIST ConditionRuleValueTypeStringList  ConditionRuleValueTypeStringList the value field is an array of string values INPUT ConditionRuleValueTypeInput  ConditionRuleValueTypeInput the value field is a reference to a form input by ELEMENT ConditionRuleValueTypeElement  ConditionRuleValueTypeElement the value field is a reference to form element (by technical key) LIST ConditionRuleValueTypeList BOOLEAN ConditionRuleValueTypeBoolean"
    )
    __properties = ["operator", "source", "sourceType", "value", "valueType"]

    @validator('operator')
    def operator_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('EQ', 'NE', 'CO', 'NOT_CO', 'IN', 'NOT_IN', 'EM',
                         'NOT_EM', 'SW', 'NOT_SW', 'EW', 'NOT_EW'):
            raise ValueError(
                "must be one of enum values ('EQ', 'NE', 'CO', 'NOT_CO', 'IN', 'NOT_IN', 'EM', 'NOT_EM', 'SW', 'NOT_SW', 'EW', 'NOT_EW')"
            )
        return value

    @validator('source_type')
    def source_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('INPUT', 'ELEMENT'):
            raise ValueError("must be one of enum values ('INPUT', 'ELEMENT')")
        return value

    @validator('value_type')
    def value_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('STRING', 'STRING_LIST', 'INPUT', 'ELEMENT', 'LIST',
                         'BOOLEAN'):
            raise ValueError(
                "must be one of enum values ('STRING', 'STRING_LIST', 'INPUT', 'ELEMENT', 'LIST', 'BOOLEAN')"
            )
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ConditionRule:
        """Create an instance of ConditionRule from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ConditionRule:
        """Create an instance of ConditionRule from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ConditionRule.parse_obj(obj)

        _obj = ConditionRule.parse_obj({
            "operator": obj.get("operator"),
            "source": obj.get("source"),
            "source_type": obj.get("sourceType"),
            "value": obj.get("value"),
            "value_type": obj.get("valueType")
        })
        return _obj
