# coding: utf-8

"""
    IdentityNow Beta API

    Use these APIs to interact with the IdentityNow platform to achieve repeatable, automated processes with greater scalability. These APIs are in beta and are subject to change. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

    The version of the OpenAPI document: 3.1.0-beta
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Dict, List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, conlist, validator
from beta.models.base_reference_dto import BaseReferenceDto
from beta.models.object_export_import_options import ObjectExportImportOptions

class ImportOptions(BaseModel):
    """
    ImportOptions
    """
    exclude_types: Optional[conlist(StrictStr)] = Field(None, alias="excludeTypes", description="Object type names to be excluded from an sp-config export command.")
    include_types: Optional[conlist(StrictStr)] = Field(None, alias="includeTypes", description="Object type names to be included in an sp-config export command. IncludeTypes takes precedence over excludeTypes.")
    object_options: Optional[Dict[str, ObjectExportImportOptions]] = Field(None, alias="objectOptions", description="Additional options targeting specific objects related to each item in the includeTypes field")
    default_references: Optional[conlist(BaseReferenceDto)] = Field(None, alias="defaultReferences", description="List of BaseRefenceDtos that can be used to resolve references on import.")
    exclude_backup: Optional[StrictBool] = Field(False, alias="excludeBackup", description="By default, every import will first export all existing objects supported by sp-config as a backup before the import is attempted. If excludeBackup is true, the backup will not be performed.")
    __properties = ["excludeTypes", "includeTypes", "objectOptions", "defaultReferences", "excludeBackup"]

    @validator('exclude_types')
    def exclude_types_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in ('IDENTITY_OBJECT_CONFIG', 'IDENTITY_PROFILE', 'RULE', 'SOURCE', 'TRANSFORM', 'TRIGGER_SUBSCRIPTION'):
                raise ValueError("each list item must be one of ('IDENTITY_OBJECT_CONFIG', 'IDENTITY_PROFILE', 'RULE', 'SOURCE', 'TRANSFORM', 'TRIGGER_SUBSCRIPTION')")
        return value

    @validator('include_types')
    def include_types_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in ('IDENTITY_OBJECT_CONFIG', 'IDENTITY_PROFILE', 'RULE', 'SOURCE', 'TRANSFORM', 'TRIGGER_SUBSCRIPTION'):
                raise ValueError("each list item must be one of ('IDENTITY_OBJECT_CONFIG', 'IDENTITY_PROFILE', 'RULE', 'SOURCE', 'TRANSFORM', 'TRIGGER_SUBSCRIPTION')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ImportOptions:
        """Create an instance of ImportOptions from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each value in object_options (dict)
        _field_dict = {}
        if self.object_options:
            for _key in self.object_options:
                if self.object_options[_key]:
                    _field_dict[_key] = self.object_options[_key].to_dict()
            _dict['objectOptions'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of each item in default_references (list)
        _items = []
        if self.default_references:
            for _item in self.default_references:
                if _item:
                    _items.append(_item.to_dict())
            _dict['defaultReferences'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ImportOptions:
        """Create an instance of ImportOptions from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ImportOptions.parse_obj(obj)

        _obj = ImportOptions.parse_obj({
            "exclude_types": obj.get("excludeTypes"),
            "include_types": obj.get("includeTypes"),
            "object_options": dict(
                (_k, ObjectExportImportOptions.from_dict(_v))
                for _k, _v in obj.get("objectOptions").items()
            )
            if obj.get("objectOptions") is not None
            else None,
            "default_references": [BaseReferenceDto.from_dict(_item) for _item in obj.get("defaultReferences")] if obj.get("defaultReferences") is not None else None,
            "exclude_backup": obj.get("excludeBackup") if obj.get("excludeBackup") is not None else False
        })
        return _obj


