# coding: utf-8

"""
    IdentityNow Beta API

    Use these APIs to interact with the IdentityNow platform to achieve repeatable, automated processes with greater scalability. These APIs are in beta and are subject to change. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

    The version of the OpenAPI document: 3.1.0-beta
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr, conlist
from beta.models.access_type import AccessType
from beta.models.client_type import ClientType
from beta.models.grant_type import GrantType


class CreateOAuthClientResponse(BaseModel):
    """
    CreateOAuthClientResponse
    """
    id: StrictStr = Field(..., description="ID of the OAuth client")
    secret: StrictStr = Field(
        ...,
        description=
        "Secret of the OAuth client (This field is only returned on the intial create call.)"
    )
    business_name: StrictStr = Field(
        ...,
        alias="businessName",
        description="The name of the business the API Client should belong to")
    homepage_url: StrictStr = Field(
        ...,
        alias="homepageUrl",
        description=
        "The homepage URL associated with the owner of the API Client")
    name: StrictStr = Field(
        ..., description="A human-readable name for the API Client")
    description: StrictStr = Field(
        ..., description="A description of the API Client")
    access_token_validity_seconds: StrictInt = Field(
        ...,
        alias="accessTokenValiditySeconds",
        description=
        "The number of seconds an access token generated for this API Client is valid for"
    )
    refresh_token_validity_seconds: StrictInt = Field(
        ...,
        alias="refreshTokenValiditySeconds",
        description=
        "The number of seconds a refresh token generated for this API Client is valid for"
    )
    redirect_uris: conlist(StrictStr) = Field(
        ...,
        alias="redirectUris",
        description=
        "A list of the approved redirect URIs used with the authorization_code flow"
    )
    grant_types: conlist(GrantType) = Field(
        ...,
        alias="grantTypes",
        description=
        "A list of OAuth 2.0 grant types this API Client can be used with")
    access_type: AccessType = Field(..., alias="accessType")
    type: ClientType = Field(...)
    internal: StrictBool = Field(
        ...,
        description=
        "An indicator of whether the API Client can be used for requests internal to IDN"
    )
    enabled: StrictBool = Field(
        ...,
        description="An indicator of whether the API Client is enabled for use"
    )
    strong_auth_supported: StrictBool = Field(
        ...,
        alias="strongAuthSupported",
        description=
        "An indicator of whether the API Client supports strong authentication"
    )
    claims_supported: StrictBool = Field(
        ...,
        alias="claimsSupported",
        description=
        "An indicator of whether the API Client supports the serialization of SAML claims when used with the authorization_code flow"
    )
    created: datetime = Field(
        ...,
        description=
        "The date and time, down to the millisecond, when the API Client was created"
    )
    modified: datetime = Field(
        ...,
        description=
        "The date and time, down to the millisecond, when the API Client was last updated"
    )
    scope: Optional[conlist(StrictStr)] = Field(
        ..., description="Scopes of the API Client.")
    __properties = [
        "id", "secret", "businessName", "homepageUrl", "name", "description",
        "accessTokenValiditySeconds", "refreshTokenValiditySeconds",
        "redirectUris", "grantTypes", "accessType", "type", "internal",
        "enabled", "strongAuthSupported", "claimsSupported", "created",
        "modified", "scope"
    ]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CreateOAuthClientResponse:
        """Create an instance of CreateOAuthClientResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # set to None if scope (nullable) is None
        # and __fields_set__ contains the field
        if self.scope is None and "scope" in self.__fields_set__:
            _dict['scope'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CreateOAuthClientResponse:
        """Create an instance of CreateOAuthClientResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CreateOAuthClientResponse.parse_obj(obj)

        _obj = CreateOAuthClientResponse.parse_obj({
            "id":
            obj.get("id"),
            "secret":
            obj.get("secret"),
            "business_name":
            obj.get("businessName"),
            "homepage_url":
            obj.get("homepageUrl"),
            "name":
            obj.get("name"),
            "description":
            obj.get("description"),
            "access_token_validity_seconds":
            obj.get("accessTokenValiditySeconds"),
            "refresh_token_validity_seconds":
            obj.get("refreshTokenValiditySeconds"),
            "redirect_uris":
            obj.get("redirectUris"),
            "grant_types":
            obj.get("grantTypes"),
            "access_type":
            obj.get("accessType"),
            "type":
            obj.get("type"),
            "internal":
            obj.get("internal"),
            "enabled":
            obj.get("enabled"),
            "strong_auth_supported":
            obj.get("strongAuthSupported"),
            "claims_supported":
            obj.get("claimsSupported"),
            "created":
            obj.get("created"),
            "modified":
            obj.get("modified"),
            "scope":
            obj.get("scope")
        })
        return _obj
