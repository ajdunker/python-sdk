# coding: utf-8

"""
    IdentityNow Beta API

    Use these APIs to interact with the IdentityNow platform to achieve repeatable, automated processes with greater scalability. These APIs are in beta and are subject to change. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

    The version of the OpenAPI document: 3.1.0-beta
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from typing import Any, Dict, Optional
from pydantic import BaseModel, Field, StrictStr, validator


class AccountAttributesChangedAccount(BaseModel):
    """
    Details of the account where the attributes changed.  # noqa: E501
    """
    id: StrictStr = Field(...,
                          description="SailPoint generated unique identifier.")
    uuid: Optional[StrictStr] = Field(
        ...,
        description=
        "The source's unique identifier for the account. UUID is generated by the source system."
    )
    name: StrictStr = Field(..., description="Name of the account.")
    native_identity: StrictStr = Field(
        ...,
        alias="nativeIdentity",
        description="Unique ID of the account on the source.")
    type: Dict[str, Any] = Field(..., description="The type of the account")
    __properties = ["id", "uuid", "name", "nativeIdentity", "type"]

    @validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('ACCOUNT'):
            raise ValueError("must be one of enum values ('ACCOUNT')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> AccountAttributesChangedAccount:
        """Create an instance of AccountAttributesChangedAccount from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # set to None if uuid (nullable) is None
        # and __fields_set__ contains the field
        if self.uuid is None and "uuid" in self.__fields_set__:
            _dict['uuid'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> AccountAttributesChangedAccount:
        """Create an instance of AccountAttributesChangedAccount from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return AccountAttributesChangedAccount.parse_obj(obj)

        _obj = AccountAttributesChangedAccount.parse_obj({
            "id":
            obj.get("id"),
            "uuid":
            obj.get("uuid"),
            "name":
            obj.get("name"),
            "native_identity":
            obj.get("nativeIdentity"),
            "type":
            obj.get("type")
        })
        return _obj
