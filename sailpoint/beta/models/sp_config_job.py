# coding: utf-8

"""
    IdentityNow Beta API

    Use these APIs to interact with the IdentityNow platform to achieve repeatable, automated processes with greater scalability. These APIs are in beta and are subject to change. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

    The version of the OpenAPI document: 3.1.0-beta
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime

from pydantic import BaseModel, Field, StrictStr, validator

class SpConfigJob(BaseModel):
    """
    SpConfigJob
    """
    job_id: StrictStr = Field(..., alias="jobId", description="Unique id assigned to this job.")
    status: StrictStr = Field(..., description="Status of the job.")
    type: StrictStr = Field(..., description="Type of the job, either export or import.")
    message: StrictStr = Field(..., description="This message contains additional information about the overall status of the job.")
    description: StrictStr = Field(..., description="Optional user defined description/name for export job.")
    expiration: datetime = Field(..., description="The time until which the artifacts will be available for download.")
    created: datetime = Field(..., description="The time the job was started.")
    modified: datetime = Field(..., description="The time of the last update to the job.")
    completed: datetime = Field(..., description="The time the job was completed.")
    __properties = ["jobId", "status", "type", "message", "description", "expiration", "created", "modified", "completed"]

    @validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('NOT_STARTED', 'IN_PROGRESS', 'COMPLETE', 'CANCELLED', 'FAILED'):
            raise ValueError("must be one of enum values ('NOT_STARTED', 'IN_PROGRESS', 'COMPLETE', 'CANCELLED', 'FAILED')")
        return value

    @validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('EXPORT', 'IMPORT'):
            raise ValueError("must be one of enum values ('EXPORT', 'IMPORT')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> SpConfigJob:
        """Create an instance of SpConfigJob from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> SpConfigJob:
        """Create an instance of SpConfigJob from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return SpConfigJob.parse_obj(obj)

        _obj = SpConfigJob.parse_obj({
            "job_id": obj.get("jobId"),
            "status": obj.get("status"),
            "type": obj.get("type"),
            "message": obj.get("message"),
            "description": obj.get("description"),
            "expiration": obj.get("expiration"),
            "created": obj.get("created"),
            "modified": obj.get("modified"),
            "completed": obj.get("completed")
        })
        return _obj


