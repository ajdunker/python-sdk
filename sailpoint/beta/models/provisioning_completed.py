# coding: utf-8

"""
    IdentityNow Beta API

    Use these APIs to interact with the IdentityNow platform to achieve repeatable, automated processes with greater scalability. These APIs are in beta and are subject to change. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

    The version of the OpenAPI document: 3.1.0-beta
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist
from sailpoint.beta.models.provisioning_completed_account_requests_inner import ProvisioningCompletedAccountRequestsInner
from sailpoint.beta.models.provisioning_completed_recipient import ProvisioningCompletedRecipient
from sailpoint.beta.models.provisioning_completed_requester import ProvisioningCompletedRequester


class ProvisioningCompleted(BaseModel):
    """
    ProvisioningCompleted
    """
    tracking_number: StrictStr = Field(
        ...,
        alias="trackingNumber",
        description=
        "The reference number of the provisioning request. Useful for tracking status in the Account Activity search interface."
    )
    sources: StrictStr = Field(
        ...,
        description=
        "One or more sources that the provisioning transaction(s) were done against.  Sources are comma separated."
    )
    action: Optional[StrictStr] = Field(
        None,
        description="Origin of where the provisioning request came from.")
    errors: Optional[conlist(StrictStr)] = Field(
        None,
        description=
        "A list of any accumulated error messages that occurred during provisioning."
    )
    warnings: Optional[conlist(StrictStr)] = Field(
        None,
        description=
        "A list of any accumulated warning messages that occurred during provisioning."
    )
    recipient: ProvisioningCompletedRecipient = Field(...)
    requester: Optional[ProvisioningCompletedRequester] = None
    account_requests: conlist(
        ProvisioningCompletedAccountRequestsInner
    ) = Field(
        ...,
        alias="accountRequests",
        description=
        "A list of provisioning instructions to perform on an account-by-account basis."
    )
    __properties = [
        "trackingNumber", "sources", "action", "errors", "warnings",
        "recipient", "requester", "accountRequests"
    ]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ProvisioningCompleted:
        """Create an instance of ProvisioningCompleted from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of recipient
        if self.recipient:
            _dict['recipient'] = self.recipient.to_dict()
        # override the default output from pydantic by calling `to_dict()` of requester
        if self.requester:
            _dict['requester'] = self.requester.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in account_requests (list)
        _items = []
        if self.account_requests:
            for _item in self.account_requests:
                if _item:
                    _items.append(_item.to_dict())
            _dict['accountRequests'] = _items
        # set to None if action (nullable) is None
        # and __fields_set__ contains the field
        if self.action is None and "action" in self.__fields_set__:
            _dict['action'] = None

        # set to None if errors (nullable) is None
        # and __fields_set__ contains the field
        if self.errors is None and "errors" in self.__fields_set__:
            _dict['errors'] = None

        # set to None if warnings (nullable) is None
        # and __fields_set__ contains the field
        if self.warnings is None and "warnings" in self.__fields_set__:
            _dict['warnings'] = None

        # set to None if requester (nullable) is None
        # and __fields_set__ contains the field
        if self.requester is None and "requester" in self.__fields_set__:
            _dict['requester'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ProvisioningCompleted:
        """Create an instance of ProvisioningCompleted from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ProvisioningCompleted.parse_obj(obj)

        _obj = ProvisioningCompleted.parse_obj({
            "tracking_number":
            obj.get("trackingNumber"),
            "sources":
            obj.get("sources"),
            "action":
            obj.get("action"),
            "errors":
            obj.get("errors"),
            "warnings":
            obj.get("warnings"),
            "recipient":
            ProvisioningCompletedRecipient.from_dict(obj.get("recipient"))
            if obj.get("recipient") is not None else None,
            "requester":
            ProvisioningCompletedRequester.from_dict(obj.get("requester"))
            if obj.get("requester") is not None else None,
            "account_requests": [
                ProvisioningCompletedAccountRequestsInner.from_dict(_item)
                for _item in obj.get("accountRequests")
            ] if obj.get("accountRequests") is not None else None
        })
        return _obj
