# coding: utf-8

"""
    IdentityNow Beta API

    Use these APIs to interact with the IdentityNow platform to achieve repeatable, automated processes with greater scalability. These APIs are in beta and are subject to change. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

    The version of the OpenAPI document: 3.1.0-beta
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr
from beta.models.trigger_example_input import TriggerExampleInput
from beta.models.trigger_example_output import TriggerExampleOutput
from beta.models.trigger_type import TriggerType

class Trigger(BaseModel):
    """
    Trigger
    """
    id: StrictStr = Field(..., description="Unique identifier of the trigger.")
    name: StrictStr = Field(..., description="Trigger Name.")
    type: TriggerType = Field(...)
    description: Optional[StrictStr] = Field(None, description="Trigger Description.")
    input_schema: StrictStr = Field(..., alias="inputSchema", description="The JSON schema of the payload that will be sent by the trigger to the subscribed service.")
    example_input: TriggerExampleInput = Field(..., alias="exampleInput")
    output_schema: Optional[StrictStr] = Field(None, alias="outputSchema", description="The JSON schema of the response that will be sent by the subscribed service to the trigger in response to an event.  This only applies to a trigger type of `REQUEST_RESPONSE`.")
    example_output: Optional[TriggerExampleOutput] = Field(None, alias="exampleOutput")
    __properties = ["id", "name", "type", "description", "inputSchema", "exampleInput", "outputSchema", "exampleOutput"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Trigger:
        """Create an instance of Trigger from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of example_input
        if self.example_input:
            _dict['exampleInput'] = self.example_input.to_dict()
        # override the default output from pydantic by calling `to_dict()` of example_output
        if self.example_output:
            _dict['exampleOutput'] = self.example_output.to_dict()
        # set to None if output_schema (nullable) is None
        # and __fields_set__ contains the field
        if self.output_schema is None and "output_schema" in self.__fields_set__:
            _dict['outputSchema'] = None

        # set to None if example_output (nullable) is None
        # and __fields_set__ contains the field
        if self.example_output is None and "example_output" in self.__fields_set__:
            _dict['exampleOutput'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Trigger:
        """Create an instance of Trigger from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Trigger.parse_obj(obj)

        _obj = Trigger.parse_obj({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "type": obj.get("type"),
            "description": obj.get("description"),
            "input_schema": obj.get("inputSchema"),
            "example_input": TriggerExampleInput.from_dict(obj.get("exampleInput")) if obj.get("exampleInput") is not None else None,
            "output_schema": obj.get("outputSchema"),
            "example_output": TriggerExampleOutput.from_dict(obj.get("exampleOutput")) if obj.get("exampleOutput") is not None else None
        })
        return _obj


