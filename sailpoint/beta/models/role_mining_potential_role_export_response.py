# coding: utf-8

"""
    IdentityNow Beta API

    Use these APIs to interact with the IdentityNow platform to achieve repeatable, automated processes with greater scalability. These APIs are in beta and are subject to change. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

    The version of the OpenAPI document: 3.1.0-beta
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr
from sailpoint.beta.models.role_mining_potential_role_export_state import RoleMiningPotentialRoleExportState


class RoleMiningPotentialRoleExportResponse(BaseModel):
    """
    RoleMiningPotentialRoleExportResponse
    """
    min_entitlement_popularity: Optional[StrictInt] = Field(
        None,
        alias="minEntitlementPopularity",
        description=
        "The minimum popularity among identities in the role which an entitlement must have to be included in the report"
    )
    include_common_access: Optional[StrictBool] = Field(
        None,
        alias="includeCommonAccess",
        description=
        "If false, do not include entitlements that are highly popular among the entire orginization"
    )
    export_id: Optional[StrictStr] = Field(
        None, alias="exportId", description="ID used to reference this export")
    status: Optional[RoleMiningPotentialRoleExportState] = None
    __properties = [
        "minEntitlementPopularity", "includeCommonAccess", "exportId", "status"
    ]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> RoleMiningPotentialRoleExportResponse:
        """Create an instance of RoleMiningPotentialRoleExportResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> RoleMiningPotentialRoleExportResponse:
        """Create an instance of RoleMiningPotentialRoleExportResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return RoleMiningPotentialRoleExportResponse.parse_obj(obj)

        _obj = RoleMiningPotentialRoleExportResponse.parse_obj({
            "min_entitlement_popularity":
            obj.get("minEntitlementPopularity"),
            "include_common_access":
            obj.get("includeCommonAccess"),
            "export_id":
            obj.get("exportId"),
            "status":
            obj.get("status")
        })
        return _obj
