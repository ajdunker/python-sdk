# coding: utf-8

"""
    IdentityNow Beta API

    Use these APIs to interact with the IdentityNow platform to achieve repeatable, automated processes with greater scalability. These APIs are in beta and are subject to change. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

    The version of the OpenAPI document: 3.1.0-beta
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, Dict
from pydantic import BaseModel, Field, validator
from sailpoint.beta.models.va_cluster_status_change_event_application import VAClusterStatusChangeEventApplication
from sailpoint.beta.models.va_cluster_status_change_event_health_check_result import VAClusterStatusChangeEventHealthCheckResult
from sailpoint.beta.models.va_cluster_status_change_event_previous_health_check_result import VAClusterStatusChangeEventPreviousHealthCheckResult


class VAClusterStatusChangeEvent(BaseModel):
    """
    VAClusterStatusChangeEvent
    """
    created: datetime = Field(
        ..., description="The date and time the status change occurred.")
    type: Dict[str, Any] = Field(
        ..., description="The type of the object that initiated this event.")
    application: VAClusterStatusChangeEventApplication = Field(...)
    health_check_result: VAClusterStatusChangeEventHealthCheckResult = Field(
        ..., alias="healthCheckResult")
    previous_health_check_result: VAClusterStatusChangeEventPreviousHealthCheckResult = Field(
        ..., alias="previousHealthCheckResult")
    __properties = [
        "created", "type", "application", "healthCheckResult",
        "previousHealthCheckResult"
    ]

    @validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('SOURCE', 'CLUSTER'):
            raise ValueError(
                "must be one of enum values ('SOURCE', 'CLUSTER')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> VAClusterStatusChangeEvent:
        """Create an instance of VAClusterStatusChangeEvent from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of application
        if self.application:
            _dict['application'] = self.application.to_dict()
        # override the default output from pydantic by calling `to_dict()` of health_check_result
        if self.health_check_result:
            _dict['healthCheckResult'] = self.health_check_result.to_dict()
        # override the default output from pydantic by calling `to_dict()` of previous_health_check_result
        if self.previous_health_check_result:
            _dict[
                'previousHealthCheckResult'] = self.previous_health_check_result.to_dict(
                )
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> VAClusterStatusChangeEvent:
        """Create an instance of VAClusterStatusChangeEvent from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return VAClusterStatusChangeEvent.parse_obj(obj)

        _obj = VAClusterStatusChangeEvent.parse_obj({
            "created":
            obj.get("created"),
            "type":
            obj.get("type"),
            "application":
            VAClusterStatusChangeEventApplication.from_dict(
                obj.get("application"))
            if obj.get("application") is not None else None,
            "health_check_result":
            VAClusterStatusChangeEventHealthCheckResult.from_dict(
                obj.get("healthCheckResult"))
            if obj.get("healthCheckResult") is not None else None,
            "previous_health_check_result":
            VAClusterStatusChangeEventPreviousHealthCheckResult.from_dict(
                obj.get("previousHealthCheckResult"))
            if obj.get("previousHealthCheckResult") is not None else None
        })
        return _obj
