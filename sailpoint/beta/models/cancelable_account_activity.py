# coding: utf-8

"""
    IdentityNow Beta API

    Use these APIs to interact with the IdentityNow platform to achieve repeatable, automated processes with greater scalability. These APIs are in beta and are subject to change. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

    The version of the OpenAPI document: 3.1.0-beta
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Dict, List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, conlist
from beta.models.account_activity_item import AccountActivityItem
from beta.models.comment import Comment
from beta.models.completion_status import CompletionStatus
from beta.models.execution_status import ExecutionStatus
from beta.models.identity_summary import IdentitySummary

class CancelableAccountActivity(BaseModel):
    """
    CancelableAccountActivity
    """
    id: Optional[StrictStr] = Field(None, description="ID of the account activity itself")
    name: Optional[StrictStr] = None
    created: Optional[datetime] = None
    modified: Optional[datetime] = None
    completed: Optional[datetime] = None
    completion_status: Optional[CompletionStatus] = Field(None, alias="completionStatus")
    type: Optional[StrictStr] = None
    requester_identity_summary: Optional[IdentitySummary] = Field(None, alias="requesterIdentitySummary")
    target_identity_summary: Optional[IdentitySummary] = Field(None, alias="targetIdentitySummary")
    errors: Optional[conlist(StrictStr)] = None
    warnings: Optional[conlist(StrictStr)] = None
    items: Optional[conlist(AccountActivityItem)] = None
    execution_status: Optional[ExecutionStatus] = Field(None, alias="executionStatus")
    client_metadata: Optional[Dict[str, StrictStr]] = Field(None, alias="clientMetadata", description="Arbitrary key-value pairs, if any were included in the corresponding access request")
    cancelable: Optional[StrictBool] = Field(None, description="Whether the account activity can be canceled before completion")
    cancel_comment: Optional[Comment] = Field(None, alias="cancelComment")
    __properties = ["id", "name", "created", "modified", "completed", "completionStatus", "type", "requesterIdentitySummary", "targetIdentitySummary", "errors", "warnings", "items", "executionStatus", "clientMetadata", "cancelable", "cancelComment"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CancelableAccountActivity:
        """Create an instance of CancelableAccountActivity from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of requester_identity_summary
        if self.requester_identity_summary:
            _dict['requesterIdentitySummary'] = self.requester_identity_summary.to_dict()
        # override the default output from pydantic by calling `to_dict()` of target_identity_summary
        if self.target_identity_summary:
            _dict['targetIdentitySummary'] = self.target_identity_summary.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in items (list)
        _items = []
        if self.items:
            for _item in self.items:
                if _item:
                    _items.append(_item.to_dict())
            _dict['items'] = _items
        # override the default output from pydantic by calling `to_dict()` of cancel_comment
        if self.cancel_comment:
            _dict['cancelComment'] = self.cancel_comment.to_dict()
        # set to None if completion_status (nullable) is None
        # and __fields_set__ contains the field
        if self.completion_status is None and "completion_status" in self.__fields_set__:
            _dict['completionStatus'] = None

        # set to None if requester_identity_summary (nullable) is None
        # and __fields_set__ contains the field
        if self.requester_identity_summary is None and "requester_identity_summary" in self.__fields_set__:
            _dict['requesterIdentitySummary'] = None

        # set to None if target_identity_summary (nullable) is None
        # and __fields_set__ contains the field
        if self.target_identity_summary is None and "target_identity_summary" in self.__fields_set__:
            _dict['targetIdentitySummary'] = None

        # set to None if cancel_comment (nullable) is None
        # and __fields_set__ contains the field
        if self.cancel_comment is None and "cancel_comment" in self.__fields_set__:
            _dict['cancelComment'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CancelableAccountActivity:
        """Create an instance of CancelableAccountActivity from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CancelableAccountActivity.parse_obj(obj)

        _obj = CancelableAccountActivity.parse_obj({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "created": obj.get("created"),
            "modified": obj.get("modified"),
            "completed": obj.get("completed"),
            "completion_status": obj.get("completionStatus"),
            "type": obj.get("type"),
            "requester_identity_summary": IdentitySummary.from_dict(obj.get("requesterIdentitySummary")) if obj.get("requesterIdentitySummary") is not None else None,
            "target_identity_summary": IdentitySummary.from_dict(obj.get("targetIdentitySummary")) if obj.get("targetIdentitySummary") is not None else None,
            "errors": obj.get("errors"),
            "warnings": obj.get("warnings"),
            "items": [AccountActivityItem.from_dict(_item) for _item in obj.get("items")] if obj.get("items") is not None else None,
            "execution_status": obj.get("executionStatus"),
            "client_metadata": obj.get("clientMetadata"),
            "cancelable": obj.get("cancelable"),
            "cancel_comment": Comment.from_dict(obj.get("cancelComment")) if obj.get("cancelComment") is not None else None
        })
        return _obj


