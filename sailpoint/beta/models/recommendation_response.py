# coding: utf-8

"""
    IdentityNow Beta API

    Use these APIs to interact with the IdentityNow platform to achieve repeatable, automated processes with greater scalability. These APIs are in beta and are subject to change. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

    The version of the OpenAPI document: 3.1.0-beta
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist, validator
from sailpoint.beta.models.recommendation_request import RecommendationRequest
from sailpoint.beta.models.recommender_calculations import RecommenderCalculations
from sailpoint.beta.models.translation_message import TranslationMessage


class RecommendationResponse(BaseModel):
    """
    RecommendationResponse
    """
    request: Optional[RecommendationRequest] = None
    recommendation: Optional[StrictStr] = Field(
        None,
        description=
        "The recommendation - YES if the access is recommended, NO if not recommended, MAYBE if there is not enough information to make a recommendation, NOT_FOUND if the identity is not found in the system"
    )
    interpretations: Optional[conlist(StrictStr)] = Field(
        None,
        description=
        "The list of interpretations explaining the recommendation. The array is empty if includeInterpretations is false or not present in the request. e.g. - [ \"Not approved in the last 6 months.\" ]. Interpretations will be translated using the client's locale as found in the Accept-Language header. If a translation for the client's locale cannot be found, the US English translation will be returned."
    )
    translation_messages: Optional[conlist(TranslationMessage)] = Field(
        None,
        alias="translationMessages",
        description=
        "The list of translation messages, if they have been requested.")
    recommender_calculations: Optional[RecommenderCalculations] = Field(
        None, alias="recommenderCalculations")
    __properties = [
        "request", "recommendation", "interpretations", "translationMessages",
        "recommenderCalculations"
    ]

    @validator('recommendation')
    def recommendation_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('true', 'false', 'MAYBE', 'NOT_FOUND'):
            raise ValueError(
                "must be one of enum values ('true', 'false', 'MAYBE', 'NOT_FOUND')"
            )
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> RecommendationResponse:
        """Create an instance of RecommendationResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of request
        if self.request:
            _dict['request'] = self.request.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in translation_messages (list)
        _items = []
        if self.translation_messages:
            for _item in self.translation_messages:
                if _item:
                    _items.append(_item.to_dict())
            _dict['translationMessages'] = _items
        # override the default output from pydantic by calling `to_dict()` of recommender_calculations
        if self.recommender_calculations:
            _dict[
                'recommenderCalculations'] = self.recommender_calculations.to_dict(
                )
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> RecommendationResponse:
        """Create an instance of RecommendationResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return RecommendationResponse.parse_obj(obj)

        _obj = RecommendationResponse.parse_obj({
            "request":
            RecommendationRequest.from_dict(obj.get("request"))
            if obj.get("request") is not None else None,
            "recommendation":
            obj.get("recommendation"),
            "interpretations":
            obj.get("interpretations"),
            "translation_messages": [
                TranslationMessage.from_dict(_item)
                for _item in obj.get("translationMessages")
            ] if obj.get("translationMessages") is not None else None,
            "recommender_calculations":
            RecommenderCalculations.from_dict(
                obj.get("recommenderCalculations"))
            if obj.get("recommenderCalculations") is not None else None
        })
        return _obj
