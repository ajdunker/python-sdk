# coding: utf-8

"""
    IdentityNow Beta API

    Use these APIs to interact with the IdentityNow platform to achieve repeatable, automated processes with greater scalability. These APIs are in beta and are subject to change. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

    The version of the OpenAPI document: 3.1.0-beta
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Dict, Optional
from pydantic import BaseModel, Field, StrictStr
from beta.models.object_import_result import ObjectImportResult

class SpConfigImportResults(BaseModel):
    """
    Response Body for Config Import command.  # noqa: E501
    """
    results: Dict[str, ObjectImportResult] = Field(..., description="The results of an object configuration import job.")
    export_job_id: Optional[StrictStr] = Field(None, alias="exportJobId", description="If a backup was performed before the import, this will contain the jobId of the backup job. This id can be used to retrieve the json file of the backup export.")
    __properties = ["results", "exportJobId"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> SpConfigImportResults:
        """Create an instance of SpConfigImportResults from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each value in results (dict)
        _field_dict = {}
        if self.results:
            for _key in self.results:
                if self.results[_key]:
                    _field_dict[_key] = self.results[_key].to_dict()
            _dict['results'] = _field_dict
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> SpConfigImportResults:
        """Create an instance of SpConfigImportResults from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return SpConfigImportResults.parse_obj(obj)

        _obj = SpConfigImportResults.parse_obj({
            "results": dict(
                (_k, ObjectImportResult.from_dict(_v))
                for _k, _v in obj.get("results").items()
            )
            if obj.get("results") is not None
            else None,
            "export_job_id": obj.get("exportJobId")
        })
        return _obj


