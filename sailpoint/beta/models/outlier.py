# coding: utf-8

"""
    IdentityNow Beta API

    Use these APIs to interact with the IdentityNow platform to achieve repeatable, automated processes with greater scalability. These APIs are in beta and are subject to change. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

    The version of the OpenAPI document: 3.1.0-beta
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, Dict, Optional, Union
from pydantic import BaseModel, Field, StrictBool, StrictFloat, StrictInt, StrictStr, validator


class Outlier(BaseModel):
    """
    Outlier
    """
    id: Optional[StrictStr] = Field(
        None,
        description="The identity's unique identifier for the outlier record")
    identity_id: Optional[StrictStr] = Field(
        None,
        alias="identityId",
        description="The ID of the identity that is detected as an outlier")
    type: Optional[StrictStr] = Field(
        None, description="The type of outlier summary")
    first_detection_date: Optional[datetime] = Field(
        None,
        alias="firstDetectionDate",
        description="The first date the outlier was detected")
    latest_detection_date: Optional[datetime] = Field(
        None,
        alias="latestDetectionDate",
        description="The most recent date the outlier was detected")
    ignored: Optional[StrictBool] = Field(
        None, description="Flag whether or not the outlier has been ignored")
    attributes: Optional[Dict[str, Any]] = Field(
        None, description="Object containing mapped identity attributes")
    score: Optional[Union[StrictFloat, StrictInt]] = Field(
        None,
        description=
        "The outlier score determined by the detection engine ranging from 0..1"
    )
    unignore_type: Optional[StrictStr] = Field(
        None,
        alias="unignoreType",
        description=
        "Enum value of if the outlier manually or automatically un-ignored. Will be NULL if outlier is not ignored"
    )
    unignore_date: Optional[datetime] = Field(
        None,
        alias="unignoreDate",
        description="shows date when last time has been unignored outlier")
    ignore_date: Optional[datetime] = Field(
        None,
        alias="ignoreDate",
        description="shows date when last time has been ignored outlier")
    __properties = [
        "id", "identityId", "type", "firstDetectionDate",
        "latestDetectionDate", "ignored", "attributes", "score",
        "unignoreType", "unignoreDate", "ignoreDate"
    ]

    @validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('LOW_SIMILARITY', 'STRUCTURAL'):
            raise ValueError(
                "must be one of enum values ('LOW_SIMILARITY', 'STRUCTURAL')")
        return value

    @validator('unignore_type')
    def unignore_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('MANUAL', 'AUTOMATIC'):
            raise ValueError(
                "must be one of enum values ('MANUAL', 'AUTOMATIC')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Outlier:
        """Create an instance of Outlier from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Outlier:
        """Create an instance of Outlier from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Outlier.parse_obj(obj)

        _obj = Outlier.parse_obj({
            "id":
            obj.get("id"),
            "identity_id":
            obj.get("identityId"),
            "type":
            obj.get("type"),
            "first_detection_date":
            obj.get("firstDetectionDate"),
            "latest_detection_date":
            obj.get("latestDetectionDate"),
            "ignored":
            obj.get("ignored"),
            "attributes":
            obj.get("attributes"),
            "score":
            obj.get("score"),
            "unignore_type":
            obj.get("unignoreType"),
            "unignore_date":
            obj.get("unignoreDate"),
            "ignore_date":
            obj.get("ignoreDate")
        })
        return _obj
