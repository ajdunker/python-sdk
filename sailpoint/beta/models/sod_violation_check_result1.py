# coding: utf-8

"""
    IdentityNow Beta API

    Use these APIs to interact with the IdentityNow platform to achieve repeatable, automated processes with greater scalability. These APIs are in beta and are subject to change. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

    The version of the OpenAPI document: 3.1.0-beta
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from typing import Dict, List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist
from beta.models.base_reference_dto import BaseReferenceDto
from beta.models.error_message_dto import ErrorMessageDto
from beta.models.sod_violation_context1 import SodViolationContext1


class SodViolationCheckResult1(BaseModel):
    """
    The inner object representing the completed SOD Violation check  # noqa: E501
    """
    message: Optional[ErrorMessageDto] = None
    client_metadata: Optional[Dict[str, StrictStr]] = Field(
        None,
        alias="clientMetadata",
        description=
        "Arbitrary key-value pairs. They will never be processed by the IdentityNow system but will be returned on completion of the violation check."
    )
    violation_contexts: Optional[conlist(SodViolationContext1)] = Field(
        None, alias="violationContexts")
    violated_policies: Optional[conlist(BaseReferenceDto)] = Field(
        None,
        alias="violatedPolicies",
        description="A list of the Policies that were violated")
    __properties = [
        "message", "clientMetadata", "violationContexts", "violatedPolicies"
    ]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> SodViolationCheckResult1:
        """Create an instance of SodViolationCheckResult1 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of message
        if self.message:
            _dict['message'] = self.message.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in violation_contexts (list)
        _items = []
        if self.violation_contexts:
            for _item in self.violation_contexts:
                if _item:
                    _items.append(_item.to_dict())
            _dict['violationContexts'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in violated_policies (list)
        _items = []
        if self.violated_policies:
            for _item in self.violated_policies:
                if _item:
                    _items.append(_item.to_dict())
            _dict['violatedPolicies'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> SodViolationCheckResult1:
        """Create an instance of SodViolationCheckResult1 from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return SodViolationCheckResult1.parse_obj(obj)

        _obj = SodViolationCheckResult1.parse_obj({
            "message":
            ErrorMessageDto.from_dict(obj.get("message"))
            if obj.get("message") is not None else None,
            "client_metadata":
            obj.get("clientMetadata"),
            "violation_contexts": [
                SodViolationContext1.from_dict(_item)
                for _item in obj.get("violationContexts")
            ] if obj.get("violationContexts") is not None else None,
            "violated_policies": [
                BaseReferenceDto.from_dict(_item)
                for _item in obj.get("violatedPolicies")
            ] if obj.get("violatedPolicies") is not None else None
        })
        return _obj
