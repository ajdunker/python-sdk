# coding: utf-8

"""
    IdentityNow Beta API

    Use these APIs to interact with the IdentityNow platform to achieve repeatable, automated processes with greater scalability. These APIs are in beta and are subject to change. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

    The version of the OpenAPI document: 3.1.0-beta
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr

class ManagedClusterKeyPair(BaseModel):
    """
    Managed Cluster key pair for Cluster  # noqa: E501
    """
    public_key: Optional[StrictStr] = Field(None, alias="publicKey", description="ManagedCluster publicKey")
    public_key_thumbprint: Optional[StrictStr] = Field(None, alias="publicKeyThumbprint", description="ManagedCluster publicKeyThumbprint")
    public_key_certificate: Optional[StrictStr] = Field(None, alias="publicKeyCertificate", description="ManagedCluster publicKeyCertificate")
    __properties = ["publicKey", "publicKeyThumbprint", "publicKeyCertificate"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ManagedClusterKeyPair:
        """Create an instance of ManagedClusterKeyPair from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if public_key (nullable) is None
        # and __fields_set__ contains the field
        if self.public_key is None and "public_key" in self.__fields_set__:
            _dict['publicKey'] = None

        # set to None if public_key_thumbprint (nullable) is None
        # and __fields_set__ contains the field
        if self.public_key_thumbprint is None and "public_key_thumbprint" in self.__fields_set__:
            _dict['publicKeyThumbprint'] = None

        # set to None if public_key_certificate (nullable) is None
        # and __fields_set__ contains the field
        if self.public_key_certificate is None and "public_key_certificate" in self.__fields_set__:
            _dict['publicKeyCertificate'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ManagedClusterKeyPair:
        """Create an instance of ManagedClusterKeyPair from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ManagedClusterKeyPair.parse_obj(obj)

        _obj = ManagedClusterKeyPair.parse_obj({
            "public_key": obj.get("publicKey"),
            "public_key_thumbprint": obj.get("publicKeyThumbprint"),
            "public_key_certificate": obj.get("publicKeyCertificate")
        })
        return _obj


