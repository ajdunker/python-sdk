# coding: utf-8

"""
    IdentityNow Beta API

    Use these APIs to interact with the IdentityNow platform to achieve repeatable, automated processes with greater scalability. These APIs are in beta and are subject to change. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

    The version of the OpenAPI document: 3.1.0-beta
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, Dict, List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, conlist, constr
from beta.models.access_profile_ref import AccessProfileRef
from beta.models.owner_reference import OwnerReference
from beta.models.requestability_for_role import RequestabilityForRole
from beta.models.revocability import Revocability
from beta.models.role_membership_selector import RoleMembershipSelector


class Role(BaseModel):
    """
    A Role  # noqa: E501
    """
    id: Optional[StrictStr] = Field(
        None,
        description=
        "The id of the Role. This field must be left null when creating an Role, otherwise a 400 Bad Request error will result."
    )
    name: constr(strict=True, max_length=128) = Field(
        ..., description="The human-readable display name of the Role")
    created: Optional[datetime] = Field(
        None, description="Date the Role was created")
    modified: Optional[datetime] = Field(
        None, description="Date the Role was last modified.")
    description: Optional[StrictStr] = Field(
        None, description="A human-readable description of the Role")
    owner: OwnerReference = Field(...)
    access_profiles: Optional[conlist(AccessProfileRef)] = Field(
        None, alias="accessProfiles")
    membership: Optional[RoleMembershipSelector] = None
    legacy_membership_info: Optional[Dict[str, Any]] = Field(
        None,
        alias="legacyMembershipInfo",
        description=
        "This field is not directly modifiable and is generally expected to be *null*. In very rare instances, some Roles may have been created using membership selection criteria that are no longer fully supported. While these Roles will still work, they should be migrated to STANDARD or IDENTITY_LIST selection criteria. This field exists for informational purposes as an aid to such migration."
    )
    enabled: Optional[StrictBool] = Field(
        False, description="Whether the Role is enabled or not.")
    requestable: Optional[StrictBool] = Field(
        False,
        description="Whether the Role can be the target of access requests.")
    access_request_config: Optional[RequestabilityForRole] = Field(
        None, alias="accessRequestConfig")
    revocation_request_config: Optional[Revocability] = Field(
        None, alias="revocationRequestConfig")
    segments: Optional[conlist(StrictStr)] = Field(
        None,
        description=
        "List of IDs of segments, if any, to which this Role is assigned.")
    __properties = [
        "id", "name", "created", "modified", "description", "owner",
        "accessProfiles", "membership", "legacyMembershipInfo", "enabled",
        "requestable", "accessRequestConfig", "revocationRequestConfig",
        "segments"
    ]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Role:
        """Create an instance of Role from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                              "created",
                              "modified",
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of owner
        if self.owner:
            _dict['owner'] = self.owner.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in access_profiles (list)
        _items = []
        if self.access_profiles:
            for _item in self.access_profiles:
                if _item:
                    _items.append(_item.to_dict())
            _dict['accessProfiles'] = _items
        # override the default output from pydantic by calling `to_dict()` of membership
        if self.membership:
            _dict['membership'] = self.membership.to_dict()
        # override the default output from pydantic by calling `to_dict()` of access_request_config
        if self.access_request_config:
            _dict['accessRequestConfig'] = self.access_request_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of revocation_request_config
        if self.revocation_request_config:
            _dict[
                'revocationRequestConfig'] = self.revocation_request_config.to_dict(
                )
        # set to None if description (nullable) is None
        # and __fields_set__ contains the field
        if self.description is None and "description" in self.__fields_set__:
            _dict['description'] = None

        # set to None if access_profiles (nullable) is None
        # and __fields_set__ contains the field
        if self.access_profiles is None and "access_profiles" in self.__fields_set__:
            _dict['accessProfiles'] = None

        # set to None if membership (nullable) is None
        # and __fields_set__ contains the field
        if self.membership is None and "membership" in self.__fields_set__:
            _dict['membership'] = None

        # set to None if legacy_membership_info (nullable) is None
        # and __fields_set__ contains the field
        if self.legacy_membership_info is None and "legacy_membership_info" in self.__fields_set__:
            _dict['legacyMembershipInfo'] = None

        # set to None if segments (nullable) is None
        # and __fields_set__ contains the field
        if self.segments is None and "segments" in self.__fields_set__:
            _dict['segments'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Role:
        """Create an instance of Role from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Role.parse_obj(obj)

        _obj = Role.parse_obj({
            "id":
            obj.get("id"),
            "name":
            obj.get("name"),
            "created":
            obj.get("created"),
            "modified":
            obj.get("modified"),
            "description":
            obj.get("description"),
            "owner":
            OwnerReference.from_dict(obj.get("owner"))
            if obj.get("owner") is not None else None,
            "access_profiles": [
                AccessProfileRef.from_dict(_item)
                for _item in obj.get("accessProfiles")
            ] if obj.get("accessProfiles") is not None else None,
            "membership":
            RoleMembershipSelector.from_dict(obj.get("membership"))
            if obj.get("membership") is not None else None,
            "legacy_membership_info":
            obj.get("legacyMembershipInfo"),
            "enabled":
            obj.get("enabled") if obj.get("enabled") is not None else False,
            "requestable":
            obj.get("requestable")
            if obj.get("requestable") is not None else False,
            "access_request_config":
            RequestabilityForRole.from_dict(obj.get("accessRequestConfig"))
            if obj.get("accessRequestConfig") is not None else None,
            "revocation_request_config":
            Revocability.from_dict(obj.get("revocationRequestConfig"))
            if obj.get("revocationRequestConfig") is not None else None,
            "segments":
            obj.get("segments")
        })
        return _obj
