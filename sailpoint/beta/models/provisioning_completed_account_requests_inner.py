# coding: utf-8

"""
    IdentityNow Beta API

    Use these APIs to interact with the IdentityNow platform to achieve repeatable, automated processes with greater scalability. These APIs are in beta and are subject to change. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

    The version of the OpenAPI document: 3.1.0-beta
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from typing import Any, Dict, List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist, validator
from sailpoint.beta.models.provisioning_completed_account_requests_inner_attribute_requests_inner import ProvisioningCompletedAccountRequestsInnerAttributeRequestsInner
from sailpoint.beta.models.provisioning_completed_account_requests_inner_source import ProvisioningCompletedAccountRequestsInnerSource


class ProvisioningCompletedAccountRequestsInner(BaseModel):
    """
    ProvisioningCompletedAccountRequestsInner
    """
    source: ProvisioningCompletedAccountRequestsInnerSource = Field(...)
    account_id: Optional[StrictStr] = Field(
        None,
        alias="accountId",
        description="The unique idenfier of the account being provisioned.")
    account_operation: StrictStr = Field(
        ...,
        alias="accountOperation",
        description=
        "The provisioning operation; typically Create, Modify, Enable, Disable, Unlock, or Delete."
    )
    provisioning_result: Dict[str, Any] = Field(
        ...,
        alias="provisioningResult",
        description=
        "The overall result of the provisioning transaction; this could be success, pending, failed, etc."
    )
    provisioning_target: StrictStr = Field(
        ...,
        alias="provisioningTarget",
        description=
        "The name of the provisioning channel selected; this could be the same as the source, or could be a Service Desk Integration Module (SDIM)."
    )
    ticket_id: Optional[StrictStr] = Field(
        None,
        alias="ticketId",
        description=
        "A reference to a tracking number, if this is sent to a Service Desk Integration Module (SDIM)."
    )
    attribute_requests: Optional[conlist(
        ProvisioningCompletedAccountRequestsInnerAttributeRequestsInner
    )] = Field(None,
               alias="attributeRequests",
               description=
               "A list of attributes as part of the provisioning transaction.")
    __properties = [
        "source", "accountId", "accountOperation", "provisioningResult",
        "provisioningTarget", "ticketId", "attributeRequests"
    ]

    @validator('provisioning_result')
    def provisioning_result_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('SUCCESS', 'PENDING', 'FAILED'):
            raise ValueError(
                "must be one of enum values ('SUCCESS', 'PENDING', 'FAILED')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls,
                  json_str: str) -> ProvisioningCompletedAccountRequestsInner:
        """Create an instance of ProvisioningCompletedAccountRequestsInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of source
        if self.source:
            _dict['source'] = self.source.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in attribute_requests (list)
        _items = []
        if self.attribute_requests:
            for _item in self.attribute_requests:
                if _item:
                    _items.append(_item.to_dict())
            _dict['attributeRequests'] = _items
        # set to None if ticket_id (nullable) is None
        # and __fields_set__ contains the field
        if self.ticket_id is None and "ticket_id" in self.__fields_set__:
            _dict['ticketId'] = None

        # set to None if attribute_requests (nullable) is None
        # and __fields_set__ contains the field
        if self.attribute_requests is None and "attribute_requests" in self.__fields_set__:
            _dict['attributeRequests'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ProvisioningCompletedAccountRequestsInner:
        """Create an instance of ProvisioningCompletedAccountRequestsInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ProvisioningCompletedAccountRequestsInner.parse_obj(obj)

        _obj = ProvisioningCompletedAccountRequestsInner.parse_obj({
            "source":
            ProvisioningCompletedAccountRequestsInnerSource.from_dict(
                obj.get("source")) if obj.get("source") is not None else None,
            "account_id":
            obj.get("accountId"),
            "account_operation":
            obj.get("accountOperation"),
            "provisioning_result":
            obj.get("provisioningResult"),
            "provisioning_target":
            obj.get("provisioningTarget"),
            "ticket_id":
            obj.get("ticketId"),
            "attribute_requests": [
                ProvisioningCompletedAccountRequestsInnerAttributeRequestsInner
                .from_dict(_item) for _item in obj.get("attributeRequests")
            ] if obj.get("attributeRequests") is not None else None
        })
        return _obj
