# coding: utf-8

"""
    IdentityNow Beta API

    Use these APIs to interact with the IdentityNow platform to achieve repeatable, automated processes with greater scalability. These APIs are in beta and are subject to change. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

    The version of the OpenAPI document: 3.1.0-beta
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, Dict, Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, validator
from beta.models.base_reference_dto1 import BaseReferenceDto1
from beta.models.lifecycle_state_dto import LifecycleStateDto


class Identity(BaseModel):
    """
    Identity
    """
    id: Optional[StrictStr] = Field(
        None, description="System-generated unique ID of the Object")
    name: StrictStr = Field(..., description="Name of the Object")
    created: Optional[datetime] = Field(
        None, description="Creation date of the Object")
    modified: Optional[datetime] = Field(
        None, description="Last modification date of the Object")
    alias: Optional[StrictStr] = Field(
        None, description="Alternate unique identifier for the identity")
    email_address: Optional[StrictStr] = Field(
        None,
        alias="emailAddress",
        description="The email address of the identity")
    processing_state: Optional[StrictStr] = Field(
        None,
        alias="processingState",
        description="The processing state of the identity")
    identity_status: Optional[StrictStr] = Field(
        None,
        alias="identityStatus",
        description="The identity's status in the system")
    manager_ref: Optional[BaseReferenceDto1] = Field(None, alias="managerRef")
    is_manager: Optional[StrictBool] = Field(
        False,
        alias="isManager",
        description="Whether this identity is a manager of another identity")
    last_refresh: Optional[datetime] = Field(
        None,
        alias="lastRefresh",
        description="The last time the identity was refreshed by the system")
    attributes: Optional[Dict[str, Any]] = Field(
        None,
        description="A map with the identity attributes for the identity")
    lifecycle_state: Optional[LifecycleStateDto] = Field(
        None, alias="lifecycleState")
    __properties = [
        "id", "name", "created", "modified", "alias", "emailAddress",
        "processingState", "identityStatus", "managerRef", "isManager",
        "lastRefresh", "attributes", "lifecycleState"
    ]

    @validator('processing_state')
    def processing_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('ERROR', 'OK'):
            raise ValueError("must be one of enum values ('ERROR', 'OK')")
        return value

    @validator('identity_status')
    def identity_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('UNREGISTERED', 'REGISTERED', 'PENDING', 'WARNING',
                         'DISABLED', 'ACTIVE', 'DEACTIVATED', 'TERMINATED',
                         'ERROR', 'LOCKED'):
            raise ValueError(
                "must be one of enum values ('UNREGISTERED', 'REGISTERED', 'PENDING', 'WARNING', 'DISABLED', 'ACTIVE', 'DEACTIVATED', 'TERMINATED', 'ERROR', 'LOCKED')"
            )
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Identity:
        """Create an instance of Identity from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                              "id",
                              "created",
                              "modified",
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of manager_ref
        if self.manager_ref:
            _dict['managerRef'] = self.manager_ref.to_dict()
        # override the default output from pydantic by calling `to_dict()` of lifecycle_state
        if self.lifecycle_state:
            _dict['lifecycleState'] = self.lifecycle_state.to_dict()
        # set to None if processing_state (nullable) is None
        # and __fields_set__ contains the field
        if self.processing_state is None and "processing_state" in self.__fields_set__:
            _dict['processingState'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Identity:
        """Create an instance of Identity from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Identity.parse_obj(obj)

        _obj = Identity.parse_obj({
            "id":
            obj.get("id"),
            "name":
            obj.get("name"),
            "created":
            obj.get("created"),
            "modified":
            obj.get("modified"),
            "alias":
            obj.get("alias"),
            "email_address":
            obj.get("emailAddress"),
            "processing_state":
            obj.get("processingState"),
            "identity_status":
            obj.get("identityStatus"),
            "manager_ref":
            BaseReferenceDto1.from_dict(obj.get("managerRef"))
            if obj.get("managerRef") is not None else None,
            "is_manager":
            obj.get("isManager")
            if obj.get("isManager") is not None else False,
            "last_refresh":
            obj.get("lastRefresh"),
            "attributes":
            obj.get("attributes"),
            "lifecycle_state":
            LifecycleStateDto.from_dict(obj.get("lifecycleState"))
            if obj.get("lifecycleState") is not None else None
        })
        return _obj
