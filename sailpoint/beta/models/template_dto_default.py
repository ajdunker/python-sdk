# coding: utf-8

"""
    IdentityNow Beta API

    Use these APIs to interact with the IdentityNow platform to achieve repeatable, automated processes with greater scalability. These APIs are in beta and are subject to change. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

    The version of the OpenAPI document: 3.1.0-beta
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from typing import Optional
from pydantic import BaseModel, Field, StrictStr, validator


class TemplateDtoDefault(BaseModel):
    """
    TemplateDtoDefault
    """
    key: Optional[StrictStr] = Field(
        None, description="The key of the default template")
    name: Optional[StrictStr] = Field(
        None, description="The name of the default template")
    medium: Optional[StrictStr] = Field(
        None,
        description=
        "The message medium. More mediums may be added in the future.")
    locale: Optional[StrictStr] = Field(
        None,
        description="The locale for the message text, a BCP 47 language tag.")
    subject: Optional[StrictStr] = Field(
        None, description="The subject of the default template")
    header: Optional[StrictStr] = Field(
        None,
        description=
        "The header value is now located within the body field. If included with non-null values, will result in a 400."
    )
    body: Optional[StrictStr] = Field(
        None, description="The body of the default template")
    footer: Optional[StrictStr] = Field(
        None,
        description=
        "The footer value is now located within the body field. If included with non-null values, will result in a 400."
    )
    var_from: Optional[StrictStr] = Field(
        None,
        alias="from",
        description="The \"From:\" address of the default template")
    reply_to: Optional[StrictStr] = Field(
        None,
        alias="replyTo",
        description="The \"Reply To\" field of the default template")
    description: Optional[StrictStr] = Field(
        None, description="The description of the default template")
    __properties = [
        "key", "name", "medium", "locale", "subject", "header", "body",
        "footer", "from", "replyTo", "description"
    ]

    @validator('medium')
    def medium_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('EMAIL', 'PHONE', 'SMS', 'SLACK', 'TEAMS'):
            raise ValueError(
                "must be one of enum values ('EMAIL', 'PHONE', 'SMS', 'SLACK', 'TEAMS')"
            )
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> TemplateDtoDefault:
        """Create an instance of TemplateDtoDefault from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # set to None if header (nullable) is None
        # and __fields_set__ contains the field
        if self.header is None and "header" in self.__fields_set__:
            _dict['header'] = None

        # set to None if footer (nullable) is None
        # and __fields_set__ contains the field
        if self.footer is None and "footer" in self.__fields_set__:
            _dict['footer'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> TemplateDtoDefault:
        """Create an instance of TemplateDtoDefault from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return TemplateDtoDefault.parse_obj(obj)

        _obj = TemplateDtoDefault.parse_obj({
            "key":
            obj.get("key"),
            "name":
            obj.get("name"),
            "medium":
            obj.get("medium"),
            "locale":
            obj.get("locale"),
            "subject":
            obj.get("subject"),
            "header":
            obj.get("header"),
            "body":
            obj.get("body"),
            "footer":
            obj.get("footer"),
            "var_from":
            obj.get("from"),
            "reply_to":
            obj.get("replyTo"),
            "description":
            obj.get("description")
        })
        return _obj
