# coding: utf-8

"""
    IdentityNow Beta API

    Use these APIs to interact with the IdentityNow platform to achieve repeatable, automated processes with greater scalability. These APIs are in beta and are subject to change. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

    The version of the OpenAPI document: 3.1.0-beta
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from typing import Optional
from pydantic import BaseModel, Field, StrictStr
from sailpoint.beta.models.identity_attributes_changed_changes_inner_new_value import IdentityAttributesChangedChangesInnerNewValue
from sailpoint.beta.models.identity_attributes_changed_changes_inner_old_value import IdentityAttributesChangedChangesInnerOldValue


class IdentityAttributesChangedChangesInner(BaseModel):
    """
    IdentityAttributesChangedChangesInner
    """
    attribute: StrictStr = Field(
        ..., description="The name of the identity attribute that changed.")
    old_value: Optional[IdentityAttributesChangedChangesInnerOldValue] = Field(
        None, alias="oldValue")
    new_value: Optional[IdentityAttributesChangedChangesInnerNewValue] = Field(
        None, alias="newValue")
    __properties = ["attribute", "oldValue", "newValue"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> IdentityAttributesChangedChangesInner:
        """Create an instance of IdentityAttributesChangedChangesInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of old_value
        if self.old_value:
            _dict['oldValue'] = self.old_value.to_dict()
        # override the default output from pydantic by calling `to_dict()` of new_value
        if self.new_value:
            _dict['newValue'] = self.new_value.to_dict()
        # set to None if old_value (nullable) is None
        # and __fields_set__ contains the field
        if self.old_value is None and "old_value" in self.__fields_set__:
            _dict['oldValue'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> IdentityAttributesChangedChangesInner:
        """Create an instance of IdentityAttributesChangedChangesInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return IdentityAttributesChangedChangesInner.parse_obj(obj)

        _obj = IdentityAttributesChangedChangesInner.parse_obj({
            "attribute":
            obj.get("attribute"),
            "old_value":
            IdentityAttributesChangedChangesInnerOldValue.from_dict(
                obj.get("oldValue"))
            if obj.get("oldValue") is not None else None,
            "new_value":
            IdentityAttributesChangedChangesInnerNewValue.from_dict(
                obj.get("newValue"))
            if obj.get("newValue") is not None else None
        })
        return _obj
