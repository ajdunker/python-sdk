# coding: utf-8

"""
    IdentityNow Beta API

    Use these APIs to interact with the IdentityNow platform to achieve repeatable, automated processes with greater scalability. These APIs are in beta and are subject to change. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

    The version of the OpenAPI document: 3.1.0-beta
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List
from pydantic import BaseModel, Field, StrictStr, conlist
from beta.models.access_item_requested_for_dto import AccessItemRequestedForDto
from beta.models.access_item_requester_dto import AccessItemRequesterDto
from beta.models.access_request_post_approval_requested_items_status_inner import AccessRequestPostApprovalRequestedItemsStatusInner

class AccessRequestPostApproval(BaseModel):
    """
    AccessRequestPostApproval
    """
    access_request_id: StrictStr = Field(..., alias="accessRequestId", description="The unique ID of the access request.")
    requested_for: AccessItemRequestedForDto = Field(..., alias="requestedFor")
    requested_items_status: conlist(AccessRequestPostApprovalRequestedItemsStatusInner) = Field(..., alias="requestedItemsStatus", description="Details on the outcome of each access item.")
    requested_by: AccessItemRequesterDto = Field(..., alias="requestedBy")
    __properties = ["accessRequestId", "requestedFor", "requestedItemsStatus", "requestedBy"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> AccessRequestPostApproval:
        """Create an instance of AccessRequestPostApproval from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of requested_for
        if self.requested_for:
            _dict['requestedFor'] = self.requested_for.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in requested_items_status (list)
        _items = []
        if self.requested_items_status:
            for _item in self.requested_items_status:
                if _item:
                    _items.append(_item.to_dict())
            _dict['requestedItemsStatus'] = _items
        # override the default output from pydantic by calling `to_dict()` of requested_by
        if self.requested_by:
            _dict['requestedBy'] = self.requested_by.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> AccessRequestPostApproval:
        """Create an instance of AccessRequestPostApproval from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return AccessRequestPostApproval.parse_obj(obj)

        _obj = AccessRequestPostApproval.parse_obj({
            "access_request_id": obj.get("accessRequestId"),
            "requested_for": AccessItemRequestedForDto.from_dict(obj.get("requestedFor")) if obj.get("requestedFor") is not None else None,
            "requested_items_status": [AccessRequestPostApprovalRequestedItemsStatusInner.from_dict(_item) for _item in obj.get("requestedItemsStatus")] if obj.get("requestedItemsStatus") is not None else None,
            "requested_by": AccessItemRequesterDto.from_dict(obj.get("requestedBy")) if obj.get("requestedBy") is not None else None
        })
        return _obj


