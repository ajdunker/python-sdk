# coding: utf-8

"""
    IdentityNow Beta API

    Use these APIs to interact with the IdentityNow platform to achieve repeatable, automated processes with greater scalability. These APIs are in beta and are subject to change. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

    The version of the OpenAPI document: 3.1.0-beta
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr

class MfaDuoConfig(BaseModel):
    """
    MfaDuoConfig
    """
    mfa_method: Optional[StrictStr] = Field(None, alias="mfaMethod", description="Mfa method name")
    enabled: Optional[StrictBool] = Field(False, description="If MFA method is enabled.")
    host: Optional[StrictStr] = Field(None, description="The server host name or IP address of the MFA provider.")
    access_key: Optional[StrictStr] = Field(None, alias="accessKey", description="The secret key for authenticating requests to the MFA provider.")
    identity_attribute: Optional[StrictStr] = Field(None, alias="identityAttribute", description="Optional. The name of the attribute for mapping IdentityNow identity to the MFA provider.")
    config_properties: Optional[Dict[str, Any]] = Field(None, alias="configProperties", description="A map with additional config properties for the given MFA method - duo-web.")
    __properties = ["mfaMethod", "enabled", "host", "accessKey", "identityAttribute", "configProperties"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> MfaDuoConfig:
        """Create an instance of MfaDuoConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if mfa_method (nullable) is None
        # and __fields_set__ contains the field
        if self.mfa_method is None and "mfa_method" in self.__fields_set__:
            _dict['mfaMethod'] = None

        # set to None if host (nullable) is None
        # and __fields_set__ contains the field
        if self.host is None and "host" in self.__fields_set__:
            _dict['host'] = None

        # set to None if access_key (nullable) is None
        # and __fields_set__ contains the field
        if self.access_key is None and "access_key" in self.__fields_set__:
            _dict['accessKey'] = None

        # set to None if identity_attribute (nullable) is None
        # and __fields_set__ contains the field
        if self.identity_attribute is None and "identity_attribute" in self.__fields_set__:
            _dict['identityAttribute'] = None

        # set to None if config_properties (nullable) is None
        # and __fields_set__ contains the field
        if self.config_properties is None and "config_properties" in self.__fields_set__:
            _dict['configProperties'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> MfaDuoConfig:
        """Create an instance of MfaDuoConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return MfaDuoConfig.parse_obj(obj)

        _obj = MfaDuoConfig.parse_obj({
            "mfa_method": obj.get("mfaMethod"),
            "enabled": obj.get("enabled") if obj.get("enabled") is not None else False,
            "host": obj.get("host"),
            "access_key": obj.get("accessKey"),
            "identity_attribute": obj.get("identityAttribute"),
            "config_properties": obj.get("configProperties")
        })
        return _obj


