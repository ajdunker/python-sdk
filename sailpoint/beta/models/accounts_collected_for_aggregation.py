# coding: utf-8

"""
    IdentityNow Beta API

    Use these APIs to interact with the IdentityNow platform to achieve repeatable, automated processes with greater scalability. These APIs are in beta and are subject to change. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

    The version of the OpenAPI document: 3.1.0-beta
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, Dict, List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist, validator
from sailpoint.beta.models.accounts_collected_for_aggregation_source import AccountsCollectedForAggregationSource
from sailpoint.beta.models.accounts_collected_for_aggregation_stats import AccountsCollectedForAggregationStats


class AccountsCollectedForAggregation(BaseModel):
    """
    AccountsCollectedForAggregation
    """
    source: AccountsCollectedForAggregationSource = Field(...)
    status: Dict[str, Any] = Field(
        ..., description="The overall status of the collection.")
    started: datetime = Field(
        ...,
        description="The date and time when the account collection started.")
    completed: datetime = Field(
        ...,
        description="The date and time when the account collection finished.")
    errors: Optional[conlist(StrictStr)] = Field(
        ...,
        description="A list of errors that occurred during the collection.")
    warnings: Optional[conlist(StrictStr)] = Field(
        ...,
        description="A list of warnings that occurred during the collection.")
    stats: AccountsCollectedForAggregationStats = Field(...)
    __properties = [
        "source", "status", "started", "completed", "errors", "warnings",
        "stats"
    ]

    @validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('Success', 'Failed', 'Terminated'):
            raise ValueError(
                "must be one of enum values ('Success', 'Failed', 'Terminated')"
            )
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> AccountsCollectedForAggregation:
        """Create an instance of AccountsCollectedForAggregation from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of source
        if self.source:
            _dict['source'] = self.source.to_dict()
        # override the default output from pydantic by calling `to_dict()` of stats
        if self.stats:
            _dict['stats'] = self.stats.to_dict()
        # set to None if errors (nullable) is None
        # and __fields_set__ contains the field
        if self.errors is None and "errors" in self.__fields_set__:
            _dict['errors'] = None

        # set to None if warnings (nullable) is None
        # and __fields_set__ contains the field
        if self.warnings is None and "warnings" in self.__fields_set__:
            _dict['warnings'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> AccountsCollectedForAggregation:
        """Create an instance of AccountsCollectedForAggregation from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return AccountsCollectedForAggregation.parse_obj(obj)

        _obj = AccountsCollectedForAggregation.parse_obj({
            "source":
            AccountsCollectedForAggregationSource.from_dict(obj.get("source"))
            if obj.get("source") is not None else None,
            "status":
            obj.get("status"),
            "started":
            obj.get("started"),
            "completed":
            obj.get("completed"),
            "errors":
            obj.get("errors"),
            "warnings":
            obj.get("warnings"),
            "stats":
            AccountsCollectedForAggregationStats.from_dict(obj.get("stats"))
            if obj.get("stats") is not None else None
        })
        return _obj
