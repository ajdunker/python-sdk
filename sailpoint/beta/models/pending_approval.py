# coding: utf-8

"""
    IdentityNow Beta API

    Use these APIs to interact with the IdentityNow platform to achieve repeatable, automated processes with greater scalability. These APIs are in beta and are subject to change. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

    The version of the OpenAPI document: 3.1.0-beta
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, conlist
from beta.models.access_request_type import AccessRequestType
from beta.models.approval_forward_history import ApprovalForwardHistory
from beta.models.base_reference_dto1 import BaseReferenceDto1
from beta.models.comment_dto1 import CommentDto1
from beta.models.pending_approval_action import PendingApprovalAction
from beta.models.requestable_object_reference import RequestableObjectReference
from beta.models.sod_violation_context_check_completed1 import SodViolationContextCheckCompleted1


class PendingApproval(BaseModel):
    """
    PendingApproval
    """
    id: Optional[StrictStr] = Field(None, description="The approval id.")
    name: Optional[StrictStr] = Field(None,
                                      description="The name of the approval.")
    created: Optional[datetime] = Field(
        None, description="When the approval was created.")
    modified: Optional[datetime] = Field(
        None, description="When the approval was modified last time.")
    request_created: Optional[datetime] = Field(
        None,
        alias="requestCreated",
        description="When the access-request was created.")
    request_type: Optional[AccessRequestType] = Field(None,
                                                      alias="requestType")
    requester: Optional[BaseReferenceDto1] = None
    requested_for: Optional[BaseReferenceDto1] = Field(None,
                                                       alias="requestedFor")
    owner: Optional[BaseReferenceDto1] = None
    requested_object: Optional[RequestableObjectReference] = Field(
        None, alias="requestedObject")
    requester_comment: Optional[CommentDto1] = Field(None,
                                                     alias="requesterComment")
    previous_reviewers_comments: Optional[conlist(CommentDto1)] = Field(
        None,
        alias="previousReviewersComments",
        description="The history of the previous reviewers comments.")
    forward_history: Optional[conlist(ApprovalForwardHistory)] = Field(
        None,
        alias="forwardHistory",
        description="The history of approval forward action.")
    comment_required_when_rejected: Optional[StrictBool] = Field(
        None,
        alias="commentRequiredWhenRejected",
        description=
        "When true the rejector has to provide comments when rejecting")
    action_in_process: Optional[PendingApprovalAction] = Field(
        None, alias="actionInProcess")
    remove_date: Optional[datetime] = Field(
        None,
        alias="removeDate",
        description=
        "The date the role or access profile is no longer assigned to the specified identity."
    )
    remove_date_update_requested: Optional[StrictBool] = Field(
        None,
        alias="removeDateUpdateRequested",
        description=
        "If true, then the request is to change the remove date or sunset date."
    )
    current_remove_date: Optional[datetime] = Field(
        None,
        alias="currentRemoveDate",
        description=
        "The remove date or sunset date that was assigned at the time of the request."
    )
    sod_violation_context: Optional[
        SodViolationContextCheckCompleted1] = Field(
            None, alias="sodViolationContext")
    __properties = [
        "id", "name", "created", "modified", "requestCreated", "requestType",
        "requester", "requestedFor", "owner", "requestedObject",
        "requesterComment", "previousReviewersComments", "forwardHistory",
        "commentRequiredWhenRejected", "actionInProcess", "removeDate",
        "removeDateUpdateRequested", "currentRemoveDate", "sodViolationContext"
    ]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PendingApproval:
        """Create an instance of PendingApproval from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of requester
        if self.requester:
            _dict['requester'] = self.requester.to_dict()
        # override the default output from pydantic by calling `to_dict()` of requested_for
        if self.requested_for:
            _dict['requestedFor'] = self.requested_for.to_dict()
        # override the default output from pydantic by calling `to_dict()` of owner
        if self.owner:
            _dict['owner'] = self.owner.to_dict()
        # override the default output from pydantic by calling `to_dict()` of requested_object
        if self.requested_object:
            _dict['requestedObject'] = self.requested_object.to_dict()
        # override the default output from pydantic by calling `to_dict()` of requester_comment
        if self.requester_comment:
            _dict['requesterComment'] = self.requester_comment.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in previous_reviewers_comments (list)
        _items = []
        if self.previous_reviewers_comments:
            for _item in self.previous_reviewers_comments:
                if _item:
                    _items.append(_item.to_dict())
            _dict['previousReviewersComments'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in forward_history (list)
        _items = []
        if self.forward_history:
            for _item in self.forward_history:
                if _item:
                    _items.append(_item.to_dict())
            _dict['forwardHistory'] = _items
        # override the default output from pydantic by calling `to_dict()` of sod_violation_context
        if self.sod_violation_context:
            _dict['sodViolationContext'] = self.sod_violation_context.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PendingApproval:
        """Create an instance of PendingApproval from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return PendingApproval.parse_obj(obj)

        _obj = PendingApproval.parse_obj({
            "id":
            obj.get("id"),
            "name":
            obj.get("name"),
            "created":
            obj.get("created"),
            "modified":
            obj.get("modified"),
            "request_created":
            obj.get("requestCreated"),
            "request_type":
            obj.get("requestType"),
            "requester":
            BaseReferenceDto1.from_dict(obj.get("requester"))
            if obj.get("requester") is not None else None,
            "requested_for":
            BaseReferenceDto1.from_dict(obj.get("requestedFor"))
            if obj.get("requestedFor") is not None else None,
            "owner":
            BaseReferenceDto1.from_dict(obj.get("owner"))
            if obj.get("owner") is not None else None,
            "requested_object":
            RequestableObjectReference.from_dict(obj.get("requestedObject"))
            if obj.get("requestedObject") is not None else None,
            "requester_comment":
            CommentDto1.from_dict(obj.get("requesterComment"))
            if obj.get("requesterComment") is not None else None,
            "previous_reviewers_comments": [
                CommentDto1.from_dict(_item)
                for _item in obj.get("previousReviewersComments")
            ] if obj.get("previousReviewersComments") is not None else None,
            "forward_history": [
                ApprovalForwardHistory.from_dict(_item)
                for _item in obj.get("forwardHistory")
            ] if obj.get("forwardHistory") is not None else None,
            "comment_required_when_rejected":
            obj.get("commentRequiredWhenRejected"),
            "action_in_process":
            obj.get("actionInProcess"),
            "remove_date":
            obj.get("removeDate"),
            "remove_date_update_requested":
            obj.get("removeDateUpdateRequested"),
            "current_remove_date":
            obj.get("currentRemoveDate"),
            "sod_violation_context":
            SodViolationContextCheckCompleted1.from_dict(
                obj.get("sodViolationContext"))
            if obj.get("sodViolationContext") is not None else None
        })
        return _obj
