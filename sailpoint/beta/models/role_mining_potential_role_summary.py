# coding: utf-8

"""
    IdentityNow Beta API

    Use these APIs to interact with the IdentityNow platform to achieve repeatable, automated processes with greater scalability. These APIs are in beta and are subject to change. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

    The version of the OpenAPI document: 3.1.0-beta
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from typing import Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr
from sailpoint.beta.models.role_mining_potential_role_provision_state import RoleMiningPotentialRoleProvisionState
from sailpoint.beta.models.role_mining_potential_role_ref import RoleMiningPotentialRoleRef
from sailpoint.beta.models.role_mining_role_type import RoleMiningRoleType
from sailpoint.beta.models.role_mining_session_parameters_dto import RoleMiningSessionParametersDto


class RoleMiningPotentialRoleSummary(BaseModel):
    """
    RoleMiningPotentialRoleSummary
    """
    id: Optional[StrictStr] = Field(None,
                                    description="Id of the potential role")
    name: Optional[StrictStr] = Field(None,
                                      description="Name of the potential role")
    potential_role_ref: Optional[RoleMiningPotentialRoleRef] = Field(
        None, alias="potentialRoleRef")
    identity_count: Optional[StrictInt] = Field(
        None,
        alias="identityCount",
        description="The number of identities in a potential role.")
    entitlement_count: Optional[StrictInt] = Field(
        None,
        alias="entitlementCount",
        description="The number of entitlements in a potential role.")
    identity_group_status: Optional[StrictStr] = Field(
        None,
        alias="identityGroupStatus",
        description=
        "The status for this identity group which can be \"REQUESTED\" or \"OBTAINED\""
    )
    provision_state: Optional[RoleMiningPotentialRoleProvisionState] = Field(
        None, alias="provisionState")
    role_id: Optional[StrictStr] = Field(
        None,
        alias="roleId",
        description=
        "ID of the provisioned role in IIQ or IDN.  Null if this potential role has not been provisioned."
    )
    density: Optional[StrictInt] = Field(
        None,
        description=
        "The density metric (0-100) of this potential role. Higher density values indicate higher similarity amongst the identities."
    )
    freshness: Optional[StrictInt] = Field(
        None,
        description=
        "The freshness metric (0-100) of this potential role. Higher freshness values indicate this potential role is more distinctive compared to existing roles."
    )
    quality: Optional[StrictInt] = Field(
        None,
        description=
        "The quality metric (0-100) of this potential role. Higher quality values indicate this potential role has high density and freshness."
    )
    type: Optional[RoleMiningRoleType] = None
    session: Optional[RoleMiningSessionParametersDto] = None
    __properties = [
        "id", "name", "potentialRoleRef", "identityCount", "entitlementCount",
        "identityGroupStatus", "provisionState", "roleId", "density",
        "freshness", "quality", "type", "session"
    ]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> RoleMiningPotentialRoleSummary:
        """Create an instance of RoleMiningPotentialRoleSummary from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of potential_role_ref
        if self.potential_role_ref:
            _dict['potentialRoleRef'] = self.potential_role_ref.to_dict()
        # override the default output from pydantic by calling `to_dict()` of session
        if self.session:
            _dict['session'] = self.session.to_dict()
        # set to None if role_id (nullable) is None
        # and __fields_set__ contains the field
        if self.role_id is None and "role_id" in self.__fields_set__:
            _dict['roleId'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> RoleMiningPotentialRoleSummary:
        """Create an instance of RoleMiningPotentialRoleSummary from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return RoleMiningPotentialRoleSummary.parse_obj(obj)

        _obj = RoleMiningPotentialRoleSummary.parse_obj({
            "id":
            obj.get("id"),
            "name":
            obj.get("name"),
            "potential_role_ref":
            RoleMiningPotentialRoleRef.from_dict(obj.get("potentialRoleRef"))
            if obj.get("potentialRoleRef") is not None else None,
            "identity_count":
            obj.get("identityCount"),
            "entitlement_count":
            obj.get("entitlementCount"),
            "identity_group_status":
            obj.get("identityGroupStatus"),
            "provision_state":
            obj.get("provisionState"),
            "role_id":
            obj.get("roleId"),
            "density":
            obj.get("density"),
            "freshness":
            obj.get("freshness"),
            "quality":
            obj.get("quality"),
            "type":
            obj.get("type"),
            "session":
            RoleMiningSessionParametersDto.from_dict(obj.get("session"))
            if obj.get("session") is not None else None
        })
        return _obj
