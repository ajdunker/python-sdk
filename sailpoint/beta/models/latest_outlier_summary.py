# coding: utf-8

"""
    IdentityNow Beta API

    Use these APIs to interact with the IdentityNow platform to achieve repeatable, automated processes with greater scalability. These APIs are in beta and are subject to change. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

    The version of the OpenAPI document: 3.1.0-beta
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr, validator

class LatestOutlierSummary(BaseModel):
    """
    LatestOutlierSummary
    """
    type: Optional[StrictStr] = Field(None, description="The type of outlier summary")
    snapshot_date: Optional[datetime] = Field(None, alias="snapshotDate", description="The date the bulk outlier detection ran/snapshot was created")
    total_outliers: Optional[StrictInt] = Field(None, alias="totalOutliers", description="Total number of outliers for the customer making the request")
    total_identities: Optional[StrictInt] = Field(None, alias="totalIdentities", description="Total number of identities for the customer making the request")
    total_ignored: Optional[StrictInt] = Field(None, alias="totalIgnored", description="Total number of ignored outliers")
    __properties = ["type", "snapshotDate", "totalOutliers", "totalIdentities", "totalIgnored"]

    @validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('LOW_SIMILARITY', 'STRUCTURAL'):
            raise ValueError("must be one of enum values ('LOW_SIMILARITY', 'STRUCTURAL')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> LatestOutlierSummary:
        """Create an instance of LatestOutlierSummary from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> LatestOutlierSummary:
        """Create an instance of LatestOutlierSummary from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return LatestOutlierSummary.parse_obj(obj)

        _obj = LatestOutlierSummary.parse_obj({
            "type": obj.get("type"),
            "snapshot_date": obj.get("snapshotDate"),
            "total_outliers": obj.get("totalOutliers"),
            "total_identities": obj.get("totalIdentities"),
            "total_ignored": obj.get("totalIgnored")
        })
        return _obj


