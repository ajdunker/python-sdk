# coding: utf-8

"""
    IdentityNow Beta API

    Use these APIs to interact with the IdentityNow platform to achieve repeatable, automated processes with greater scalability. These APIs are in beta and are subject to change. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

    The version of the OpenAPI document: 3.1.0-beta
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import re  # noqa: F401
import io
import warnings

from pydantic import validate_arguments, ValidationError

from typing_extensions import Annotated
from pydantic import Field, StrictStr, conlist

from beta.models.json_patch_operation import JsonPatchOperation
from beta.models.lifecycle_state import LifecycleState

from beta.api_client import ApiClient
from beta.api_response import ApiResponse
from beta.exceptions import (  # noqa: F401
    ApiTypeError, ApiValueError)


class LifecycleStatesApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def list_lifecycle_states(
            self, identity_profile_id: Annotated[
                StrictStr,
                Field(..., description="Identity Profile ID")],
            lifecycle_state_id: Annotated[
                StrictStr,
                Field(..., description="Lifecycle State ID")],
            **kwargs) -> LifecycleState:  # noqa: E501
        """Lifecycle State  # noqa: E501

        This endpoint returns a lifecycle state.  A token with ORG_ADMIN or API authority is required to call this API.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_lifecycle_states(identity_profile_id, lifecycle_state_id, async_req=True)
        >>> result = thread.get()

        :param identity_profile_id: Identity Profile ID (required)
        :type identity_profile_id: str
        :param lifecycle_state_id: Lifecycle State ID (required)
        :type lifecycle_state_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: LifecycleState
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the list_lifecycle_states_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.list_lifecycle_states_with_http_info(
            identity_profile_id, lifecycle_state_id, **kwargs)  # noqa: E501

    @validate_arguments
    def list_lifecycle_states_with_http_info(
            self, identity_profile_id: Annotated[
                StrictStr,
                Field(..., description="Identity Profile ID")],
            lifecycle_state_id: Annotated[
                StrictStr,
                Field(..., description="Lifecycle State ID")],
            **kwargs) -> ApiResponse:  # noqa: E501
        """Lifecycle State  # noqa: E501

        This endpoint returns a lifecycle state.  A token with ORG_ADMIN or API authority is required to call this API.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_lifecycle_states_with_http_info(identity_profile_id, lifecycle_state_id, async_req=True)
        >>> result = thread.get()

        :param identity_profile_id: Identity Profile ID (required)
        :type identity_profile_id: str
        :param lifecycle_state_id: Lifecycle State ID (required)
        :type lifecycle_state_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(LifecycleState, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ['identity_profile_id', 'lifecycle_state_id']
        _all_params.extend([
            'async_req', '_return_http_data_only', '_preload_content',
            '_request_timeout', '_request_auth', '_content_type', '_headers'
        ])

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError("Got an unexpected keyword argument '%s'"
                                   " to method list_lifecycle_states" % _key)
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['identity_profile_id']:
            _path_params['identity-profile-id'] = _params[
                'identity_profile_id']

        if _params['lifecycle_state_id']:
            _path_params['lifecycle-state-id'] = _params['lifecycle_state_id']

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['UserContextAuth', 'UserContextAuth']  # noqa: E501

        _response_types_map = {
            '200': "LifecycleState",
            '400': "ErrorResponseDto",
            '401': "ListAccessProfiles401Response",
            '403': "ErrorResponseDto",
            '429': "ListAccessProfiles429Response",
            '500': "ErrorResponseDto",
        }

        return self.api_client.call_api(
            '/identity-profiles/{identity-profile-id}/lifecycle-states/{lifecycle-state-id}',
            'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get(
                '_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def update_lifecycle_states(
            self, identity_profile_id: Annotated[
                StrictStr,
                Field(..., description="Identity Profile ID")],
            lifecycle_state_id: Annotated[
                StrictStr,
                Field(..., description="Lifecycle State ID")],
            json_patch_operation:
        Annotated[
            conlist(JsonPatchOperation),
            Field(
                ...,
                description=
                "A list of lifecycle state update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard.  The following fields can be updated: * enabled * description * accountActions * accessProfileIds * emailNotificationOption "
            )], **kwargs) -> LifecycleState:  # noqa: E501
        """Update Lifecycle State  # noqa: E501

        This API updates individual lifecycle state fields using the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard.  A token with ORG_ADMIN or API authority is required to call this API.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_lifecycle_states(identity_profile_id, lifecycle_state_id, json_patch_operation, async_req=True)
        >>> result = thread.get()

        :param identity_profile_id: Identity Profile ID (required)
        :type identity_profile_id: str
        :param lifecycle_state_id: Lifecycle State ID (required)
        :type lifecycle_state_id: str
        :param json_patch_operation: A list of lifecycle state update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard.  The following fields can be updated: * enabled * description * accountActions * accessProfileIds * emailNotificationOption  (required)
        :type json_patch_operation: List[JsonPatchOperation]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: LifecycleState
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the update_lifecycle_states_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.update_lifecycle_states_with_http_info(
            identity_profile_id, lifecycle_state_id, json_patch_operation,
            **kwargs)  # noqa: E501

    @validate_arguments
    def update_lifecycle_states_with_http_info(
            self, identity_profile_id: Annotated[
                StrictStr,
                Field(..., description="Identity Profile ID")],
            lifecycle_state_id: Annotated[
                StrictStr,
                Field(..., description="Lifecycle State ID")],
            json_patch_operation:
        Annotated[
            conlist(JsonPatchOperation),
            Field(
                ...,
                description=
                "A list of lifecycle state update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard.  The following fields can be updated: * enabled * description * accountActions * accessProfileIds * emailNotificationOption "
            )], **kwargs) -> ApiResponse:  # noqa: E501
        """Update Lifecycle State  # noqa: E501

        This API updates individual lifecycle state fields using the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard.  A token with ORG_ADMIN or API authority is required to call this API.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_lifecycle_states_with_http_info(identity_profile_id, lifecycle_state_id, json_patch_operation, async_req=True)
        >>> result = thread.get()

        :param identity_profile_id: Identity Profile ID (required)
        :type identity_profile_id: str
        :param lifecycle_state_id: Lifecycle State ID (required)
        :type lifecycle_state_id: str
        :param json_patch_operation: A list of lifecycle state update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard.  The following fields can be updated: * enabled * description * accountActions * accessProfileIds * emailNotificationOption  (required)
        :type json_patch_operation: List[JsonPatchOperation]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(LifecycleState, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'identity_profile_id', 'lifecycle_state_id', 'json_patch_operation'
        ]
        _all_params.extend([
            'async_req', '_return_http_data_only', '_preload_content',
            '_request_timeout', '_request_auth', '_content_type', '_headers'
        ])

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError("Got an unexpected keyword argument '%s'"
                                   " to method update_lifecycle_states" % _key)
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['identity_profile_id']:
            _path_params['identity-profile-id'] = _params[
                'identity_profile_id']

        if _params['lifecycle_state_id']:
            _path_params['lifecycle-state-id'] = _params['lifecycle_state_id']

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['json_patch_operation'] is not None:
            _body_params = _params['json_patch_operation']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get(
            '_content_type',
            self.api_client.select_header_content_type(
                ['application/json-patch+json']))
        if _content_types_list:
            _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['UserContextAuth', 'UserContextAuth']  # noqa: E501

        _response_types_map = {
            '200': "LifecycleState",
            '400': "ErrorResponseDto",
            '401': "ListAccessProfiles401Response",
            '403': "ErrorResponseDto",
            '429': "ListAccessProfiles429Response",
            '500': "ErrorResponseDto",
        }

        return self.api_client.call_api(
            '/identity-profiles/{identity-profile-id}/lifecycle-states/{lifecycle-state-id}',
            'PATCH',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get(
                '_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))
