# coding: utf-8

"""
    IdentityNow Beta API

    Use these APIs to interact with the IdentityNow platform to achieve repeatable, automated processes with greater scalability. These APIs are in beta and are subject to change. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

    The version of the OpenAPI document: 3.1.0-beta
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import unittest
import datetime

from beta.models.import_form_definitions202_response import ImportFormDefinitions202Response  # noqa: E501


class TestImportFormDefinitions202Response(unittest.TestCase):
    """ImportFormDefinitions202Response unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self,
                      include_optional) -> ImportFormDefinitions202Response:
        """Test ImportFormDefinitions202Response
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ImportFormDefinitions202Response`
        """
        model = ImportFormDefinitions202Response()  # noqa: E501
        if include_optional:
            return ImportFormDefinitions202Response(
                errors = [
                    beta.models.import_form_definitions_202_response_errors_inner.importFormDefinitions_202_response_errors_inner(
                        detail = {
                            'key' : None
                            }, 
                        key = '', 
                        text = '', )
                    ],
                imported_objects = [
                    beta.models.export_form_definitions_by_tenant_200_response_inner.exportFormDefinitionsByTenant_200_response_inner(
                        object = beta.models.form_definition_response.FormDefinitionResponse(
                            created = '2023-07-12T20:14:57.744860Z', 
                            description = 'My form description', 
                            form_conditions = [
                                beta.models.form_condition.FormCondition(
                                    effects = [
                                        beta.models.condition_effect.ConditionEffect(
                                            config = {}, 
                                            effect_type = 'HIDE', )
                                        ], 
                                    rule_operator = 'AND', 
                                    rules = [
                                        beta.models.condition_rule.ConditionRule(
                                            operator = 'EQ', 
                                            source = 'department', 
                                            source_type = 'ELEMENT', 
                                            value = Engineering, 
                                            value_type = 'STRING', )
                                        ], )
                                ], 
                            form_elements = [
                                beta.models.form_element.FormElement(
                                    config = {label=Department}, 
                                    element_type = 'TEXT', 
                                    id = '00000000-0000-0000-0000-000000000000', 
                                    key = 'department', 
                                    validations = [{validationType=REQUIRED}], )
                                ], 
                            form_input = [
                                beta.models.form_definition_input.FormDefinitionInput(
                                    description = 'A single dynamic scalar value (i.e. number, string, date, etc.) that can be passed into the form for use in conditional logic', 
                                    id = '00000000-0000-0000-0000-000000000000', 
                                    label = 'input1', 
                                    type = 'STRING', )
                                ], 
                            id = '00000000-0000-0000-0000-000000000000', 
                            modified = '2023-07-12T20:14:57.744860Z', 
                            name = 'My form', 
                            owner = beta.models.form_owner.FormOwner(
                                id = '00000000-0000-0000-0000-000000000000', 
                                type = 'IDENTITY', ), 
                            used_by = [
                                beta.models.form_used_by.FormUsedBy(
                                    id = '00000000-0000-0000-0000-000000000000', 
                                    type = 'WORKFLOW', )
                                ], ), 
                        self = '', 
                        version = 56, )
                    ],
                infos = [
                    beta.models.import_form_definitions_202_response_errors_inner.importFormDefinitions_202_response_errors_inner(
                        detail = {
                            'key' : None
                            }, 
                        key = '', 
                        text = '', )
                    ],
                warnings = [
                    beta.models.import_form_definitions_202_response_errors_inner.importFormDefinitions_202_response_errors_inner(
                        detail = {
                            'key' : None
                            }, 
                        key = '', 
                        text = '', )
                    ]
            )
        else:
            return ImportFormDefinitions202Response(
        )
        """

    def testImportFormDefinitions202Response(self):
        """Test ImportFormDefinitions202Response"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == '__main__':
    unittest.main()
