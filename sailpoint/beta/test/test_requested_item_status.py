# coding: utf-8

"""
    IdentityNow Beta API

    Use these APIs to interact with the IdentityNow platform to achieve repeatable, automated processes with greater scalability. These APIs are in beta and are subject to change. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

    The version of the OpenAPI document: 3.1.0-beta
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from beta.models.requested_item_status import RequestedItemStatus  # noqa: E501

class TestRequestedItemStatus(unittest.TestCase):
    """RequestedItemStatus unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> RequestedItemStatus:
        """Test RequestedItemStatus
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `RequestedItemStatus`
        """
        model = RequestedItemStatus()  # noqa: E501
        if include_optional:
            return RequestedItemStatus(
                name = 'AccessProfile1',
                type = 'ACCESS_PROFILE',
                cancelled_request_details = beta.models.cancelled_request_details.CancelledRequestDetails(
                    comment = 'Nisl quis ipsum quam quisque condimentum nunc ut dolor nunc.', 
                    owner = beta.models.base_reference_dto.BaseReferenceDto(
                        type = 'IDENTITY', 
                        id = '2c91808568c529c60168cca6f90c1313', 
                        name = 'William Wilson', ), 
                    modified = '2019-12-20T09:17:12.192Z', ),
                error_messages = [
                    [
                        beta.models.error_message_dto.ErrorMessageDto(
                            locale = 'en-US', 
                            locale_origin = 'DEFAULT', 
                            text = 'The request was syntactically correct but its content is semantically invalid.', )
                        ]
                    ],
                state = 'EXECUTING',
                approval_details = [
                    beta.models.approval_status_dto.ApprovalStatusDto(
                        forwarded = False, 
                        original_owner = beta.models.base_reference_dto.BaseReferenceDto(
                            type = 'IDENTITY', 
                            id = '2c91808568c529c60168cca6f90c1313', 
                            name = 'William Wilson', ), 
                        current_owner = beta.models.base_reference_dto.BaseReferenceDto(
                            id = '2c91808568c529c60168cca6f90c1313', 
                            name = 'William Wilson', ), 
                        reviewed_by = , 
                        modified = '2019-08-23T18:52:57.398Z', 
                        status = 'PENDING', 
                        scheme = 'MANAGER', 
                        error_messages = [
                            beta.models.error_message_dto.ErrorMessageDto(
                                locale = 'en-US', 
                                locale_origin = 'DEFAULT', 
                                text = 'The request was syntactically correct but its content is semantically invalid.', )
                            ], 
                        comment = 'I approve this request', 
                        remove_date = '2020-07-11T00:00Z', )
                    ],
                manual_work_item_details = [
                    beta.models.manual_work_item_details.ManualWorkItemDetails(
                        forwarded = True, 
                        original_owner = beta.models.base_reference_dto.BaseReferenceDto(
                            type = 'IDENTITY', 
                            id = '2c91808568c529c60168cca6f90c1313', 
                            name = 'William Wilson', ), 
                        current_owner = beta.models.base_reference_dto.BaseReferenceDto(
                            id = '2c91808568c529c60168cca6f90c1313', 
                            name = 'William Wilson', ), 
                        modified = '2019-08-23T18:52:57.398Z', 
                        status = 'PENDING', 
                        forward_history = [
                            beta.models.approval_forward_history.ApprovalForwardHistory(
                                old_approver_name = 'Frank Mir', 
                                new_approver_name = 'Al Volta', 
                                comment = 'Forwarding from Frank to Al', 
                                modified = '2019-08-23T18:52:57.398Z', 
                                forwarder_name = 'William Wilson', 
                                reassignment_type = 'AUTOMATIC_REASSIGNMENT', )
                            ], )
                    ],
                account_activity_item_id = '2c9180926cbfbddd016cbfc7c3b10010',
                request_type = 'GRANT_ACCESS',
                modified = '2019-08-23T18:52:59.162Z',
                created = '2019-08-23T18:40:35.772Z',
                requester = beta.models.base_reference_dto.BaseReferenceDto(
                    type = 'IDENTITY', 
                    id = '2c91808568c529c60168cca6f90c1313', 
                    name = 'William Wilson', ),
                requested_for = beta.models.base_reference_dto.BaseReferenceDto(
                    type = 'IDENTITY', 
                    id = '2c91808568c529c60168cca6f90c1313', 
                    name = 'William Wilson', ),
                requester_comment = beta.models.comment_dto_1.CommentDto_1(
                    comment = 'Et quam massa maximus vivamus nisi ut urna tincidunt metus elementum erat', 
                    author = beta.models.comment_dto_1_author.CommentDto_1_author(
                        type = 'IDENTITY', 
                        id = '2c91808568c529c60168cca6f90c1313', 
                        name = 'Adam Kennedy', ), 
                    created = '2017-07-11T18:45:37.098Z', ),
                sod_violation_context = beta.models.sod_violation_context_check_completed.SodViolationContextCheckCompleted(
                    state = 'SUCCESS', 
                    uuid = 'f73d16e9-a038-46c5-b217-1246e15fdbdd', 
                    violation_check_result = beta.models.sod_violation_check_result.SodViolationCheckResult(
                        message = beta.models.error_message_dto.ErrorMessageDto(
                            locale = 'en-US', 
                            locale_origin = 'DEFAULT', 
                            text = 'The request was syntactically correct but its content is semantically invalid.', ), 
                        client_metadata = {requestedAppName=test-app, requestedAppId=2c91808f7892918f0178b78da4a305a1}, 
                        violation_contexts = [
                            beta.models.sod_violation_context.SodViolationContext(
                                policy = beta.models.base_reference_dto.BaseReferenceDto(
                                    type = 'IDENTITY', 
                                    id = '2c91808568c529c60168cca6f90c1313', 
                                    name = 'William Wilson', ), 
                                conflicting_access_criteria = beta.models.sod_violation_context_conflicting_access_criteria.SodViolationContext_conflictingAccessCriteria(
                                    left_criteria = beta.models.sod_violation_context_conflicting_access_criteria_left_criteria.SodViolationContext_conflictingAccessCriteria_leftCriteria(
                                        criteria_list = [
                                            beta.models.sod_exempt_criteria.SodExemptCriteria(
                                                existing = True, 
                                                id = '2c918085771e9d3301773b3cb66f6398', 
                                                name = 'My HR Entitlement', )
                                            ], ), 
                                    right_criteria = beta.models.sod_violation_context_conflicting_access_criteria_left_criteria.SodViolationContext_conflictingAccessCriteria_leftCriteria(), ), )
                            ], 
                        violated_policies = [
                            beta.models.base_reference_dto.BaseReferenceDto(
                                id = '2c91808568c529c60168cca6f90c1313', 
                                name = 'William Wilson', )
                            ], ), ),
                provisioning_details = beta.models.provisioning_details.ProvisioningDetails(
                    ordered_sub_phase_references = 'manualWorkItemDetails', ),
                pre_approval_trigger_details = beta.models.pre_approval_trigger_details.PreApprovalTriggerDetails(
                    comment = 'Access is Approved', 
                    reviewer = 'John Doe', 
                    decision = 'APPROVED', ),
                access_request_phases = [
                    beta.models.access_request_phases.AccessRequestPhases(
                        started = '2020-07-11T00:00Z', 
                        finished = '2020-07-12T00:00Z', 
                        name = 'APPROVAL_PHASE', 
                        state = 'COMPLETED', 
                        result = 'SUCCESSFUL', 
                        phase_reference = 'approvalDetails', )
                    ],
                description = 'This is the Engineering role that engineers are granted.',
                remove_date = '2019-10-23T00:00Z',
                cancelable = True,
                access_request_id = '2b838de9-db9b-abcf-e646-d4f274ad4238',
                client_metadata = {key1=value1, key2=value2}
            )
        else:
            return RequestedItemStatus(
        )
        """

    def testRequestedItemStatus(self):
        """Test RequestedItemStatus"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
