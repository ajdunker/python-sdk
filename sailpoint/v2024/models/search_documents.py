# coding: utf-8

"""
    Identity Security Cloud V2024 API

    Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

    The version of the OpenAPI document: v2024
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import json
import pprint
from pydantic import BaseModel, ConfigDict, Field, StrictStr, ValidationError, field_validator
from typing import Any, List, Optional
from sailpoint.v2024.models.access_profile_documents import AccessProfileDocuments
from sailpoint.v2024.models.account_activity_documents import AccountActivityDocuments
from sailpoint.v2024.models.entitlement_documents import EntitlementDocuments
from sailpoint.v2024.models.event_documents import EventDocuments
from sailpoint.v2024.models.identity_documents import IdentityDocuments
from sailpoint.v2024.models.role_documents import RoleDocuments
from pydantic import StrictStr, Field
from typing import Union, List, Set, Optional, Dict
from typing_extensions import Literal, Self

SEARCHDOCUMENTS_ONE_OF_SCHEMAS = ["AccessProfileDocuments", "AccountActivityDocuments", "EntitlementDocuments", "EventDocuments", "IdentityDocuments", "RoleDocuments"]

class SearchDocuments(BaseModel):
    """
    SearchDocuments
    """
    # data type: AccessProfileDocuments
    oneof_schema_1_validator: Optional[AccessProfileDocuments] = None
    # data type: AccountActivityDocuments
    oneof_schema_2_validator: Optional[AccountActivityDocuments] = None
    # data type: EntitlementDocuments
    oneof_schema_3_validator: Optional[EntitlementDocuments] = None
    # data type: EventDocuments
    oneof_schema_4_validator: Optional[EventDocuments] = None
    # data type: IdentityDocuments
    oneof_schema_5_validator: Optional[IdentityDocuments] = None
    # data type: RoleDocuments
    oneof_schema_6_validator: Optional[RoleDocuments] = None
    actual_instance: Optional[Union[AccessProfileDocuments, AccountActivityDocuments, EntitlementDocuments, EventDocuments, IdentityDocuments, RoleDocuments]] = None
    one_of_schemas: Set[str] = { "AccessProfileDocuments", "AccountActivityDocuments", "EntitlementDocuments", "EventDocuments", "IdentityDocuments", "RoleDocuments" }

    model_config = ConfigDict(
        validate_assignment=True,
        protected_namespaces=(),
    )


    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator('actual_instance')
    def actual_instance_must_validate_oneof(cls, v):
        instance = SearchDocuments.model_construct()
        error_messages = []
        match = 0
        # validate data type: AccessProfileDocuments
        if not isinstance(v, AccessProfileDocuments):
            error_messages.append(f"Error! Input type `{type(v)}` is not `AccessProfileDocuments`")
        else:
            match += 1
        # validate data type: AccountActivityDocuments
        if not isinstance(v, AccountActivityDocuments):
            error_messages.append(f"Error! Input type `{type(v)}` is not `AccountActivityDocuments`")
        else:
            match += 1
        # validate data type: EntitlementDocuments
        if not isinstance(v, EntitlementDocuments):
            error_messages.append(f"Error! Input type `{type(v)}` is not `EntitlementDocuments`")
        else:
            match += 1
        # validate data type: EventDocuments
        if not isinstance(v, EventDocuments):
            error_messages.append(f"Error! Input type `{type(v)}` is not `EventDocuments`")
        else:
            match += 1
        # validate data type: IdentityDocuments
        if not isinstance(v, IdentityDocuments):
            error_messages.append(f"Error! Input type `{type(v)}` is not `IdentityDocuments`")
        else:
            match += 1
        # validate data type: RoleDocuments
        if not isinstance(v, RoleDocuments):
            error_messages.append(f"Error! Input type `{type(v)}` is not `RoleDocuments`")
        else:
            match += 1
        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when setting `actual_instance` in SearchDocuments with oneOf schemas: AccessProfileDocuments, AccountActivityDocuments, EntitlementDocuments, EventDocuments, IdentityDocuments, RoleDocuments. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when setting `actual_instance` in SearchDocuments with oneOf schemas: AccessProfileDocuments, AccountActivityDocuments, EntitlementDocuments, EventDocuments, IdentityDocuments, RoleDocuments. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: Union[str, Dict[str, Any]]) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        match = 0

        # deserialize data into AccessProfileDocuments
        try:
            instance.actual_instance = AccessProfileDocuments.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into AccountActivityDocuments
        try:
            instance.actual_instance = AccountActivityDocuments.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into EntitlementDocuments
        try:
            instance.actual_instance = EntitlementDocuments.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into EventDocuments
        try:
            instance.actual_instance = EventDocuments.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into IdentityDocuments
        try:
            instance.actual_instance = IdentityDocuments.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into RoleDocuments
        try:
            instance.actual_instance = RoleDocuments.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when deserializing the JSON string into SearchDocuments with oneOf schemas: AccessProfileDocuments, AccountActivityDocuments, EntitlementDocuments, EventDocuments, IdentityDocuments, RoleDocuments. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when deserializing the JSON string into SearchDocuments with oneOf schemas: AccessProfileDocuments, AccountActivityDocuments, EntitlementDocuments, EventDocuments, IdentityDocuments, RoleDocuments. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        if hasattr(self.actual_instance, "to_json") and callable(self.actual_instance.to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> Optional[Union[Dict[str, Any], AccessProfileDocuments, AccountActivityDocuments, EntitlementDocuments, EventDocuments, IdentityDocuments, RoleDocuments]]:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        if hasattr(self.actual_instance, "to_dict") and callable(self.actual_instance.to_dict):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())


