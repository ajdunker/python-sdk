{{#operations}}
{{#operation}}
- path: {{path}}
  method: {{httpMethod}}
  xCodeSample:
    - lang: Python
      label: SDK_tools/sdk/python/{{#lambda.lowercase}}{{subModuleName}}{{/lambda.lowercase}}/methods/{{#lambda.kebabcase}}{{#lambda.titlecase}}{{baseName}}{{/lambda.titlecase}}{{/lambda.kebabcase}}#{{#lambda.kebabcase}}{{#lambda.titlecase}}{{operationId}}{{/lambda.titlecase}}{{/lambda.kebabcase}}
      source: |
        {{#allParams}}
        {{^isArray}}
        {{#isModel}}
        {{paramName}} = {{#lambda.indented_8}}{{#requestBodyExamples}}{{{example}}}{{/requestBodyExamples}}{{^requestBodyExamples}}{{#example}}{{{example}}}{{/example}}{{/requestBodyExamples}} # {{{dataType}}} | {{{description}}}{{^required}} (optional){{/required}}{{#defaultValue}} (default to {{{.}}}){{/defaultValue}}{{/lambda.indented_8}}
        {{/isModel}}
        {{^isModel}}
        {{paramName}} = {{{example}}} # {{{dataType}}} | {{{description}}}{{^required}} (optional){{/required}}{{#defaultValue}} (default to {{{.}}}){{/defaultValue}} # {{{dataType}}} | {{{description}}}{{^required}} (optional){{/required}}{{#defaultValue}} (default to {{{.}}}){{/defaultValue}}
        {{/isModel}}
        {{/isArray}}
        {{#isArray}}
        {{#items.isModel}}
        {{{example}}} # {{{dataType}}} | {{{description}}}{{^required}} (optional){{/required}}{{#defaultValue}} (default to {{{.}}}){{/defaultValue}}
        {{/items.isModel}}
        {{^items.isModel}}
        {{paramName}} = {{{example}}} # {{{dataType}}} | {{{description}}}{{^required}} (optional){{/required}}{{#defaultValue}} (default to {{{.}}}){{/defaultValue}}
        {{/items.isModel}}
        {{#requestBodyExamples}} {{paramName}} = {{#lambda.indented_8}}{{{example}}} # {{{dataType}}} | {{{description}}}{{^required}} (optional){{/required}}{{#defaultValue}} (default to {{{.}}}){{/defaultValue}}{{/lambda.indented_8}}{{/requestBodyExamples}}
        {{^requestBodyExamples}}{{#example}}{{paramName}} = {{#lambda.indented_8}}{{{example}}} # {{{dataType}}} | {{{description}}}{{^required}} (optional){{/required}}{{#defaultValue}} (default to {{{.}}}){{/defaultValue}}{{/lambda.indented_8}}{{/example}}{{/requestBodyExamples}}
        {{/isArray}}
        {{/allParams}}
        try:
          {{#summary}}
          # {{{.}}}
          {{/summary}}
          {{#requiredAndNotNullableParams}}{{#isBodyParam}}Result = {{paramName}}.from_json({{paramName}}){{/isBodyParam}}{{/requiredAndNotNullableParams}}
          {{#returnType}}api_response = {{/returnType}}{{#asyncio}}await {{/asyncio}}api_instance.{{{operationId}}}({{#allParams}}{{#required}}{{^isBodyParam}}{{paramName}}{{/isBodyParam}}{{#isBodyParam}}Result{{/isBodyParam}}{{^-last}}, {{/-last}}{{/required}}{{/allParams}})
              
          # Below is a request that includes all optional parameters
          # {{#returnType}}api_response = {{/returnType}}{{#asyncio}}await {{/asyncio}}api_instance.{{{operationId}}}({{#allParams}}{{^isBodyParam}}{{paramName}}{{/isBodyParam}}{{#isBodyParam}}Result{{/isBodyParam}}{{^-last}}, {{/-last}}{{/allParams}})
          {{#returnType}}
          print("The response of {{classname}}->{{operationId}}:\n")
          pprint(api_response)
          {{/returnType}}
        except Exception as e:
          print("Exception when calling {{classname}}->{{operationId}}: %s\n" % e)
  {{/operation}}
{{/operations}}
